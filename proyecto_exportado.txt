<relevant_files>
.env
.env.production
.gitignore
package.json
_metadata.json
echo.js
eslint.config.js
export-project.js
index.html
package.json
_redirects
App.jsx
App.scss
Login.jsx
Login.scss
ProtectedRoute.jsx
Register.jsx
Register.scss
EntradaFecha.jsx
EntradaFecha.scss
EntradaMonetaria.jsx
EntradaMonetaria.scss
DashboardComparativo.jsx
DashboardComparativo.scss
DashboardEgresos.jsx
DashboardEgresos.scss
DashboardIngresos.jsx
DashboardIngresos.scss
GraficoBalanceNeto.jsx
GraficoComparativoAcumulado.jsx
GraficoComparativoDiario.jsx
GraficoEgresosDiarios.jsx
GraficoIngresosDiarios.jsx
GraficoMediosPago.jsx
GraficoTiposGasto.jsx
GraficoTotalAcumulado.jsx
GraficoTotalAcumuladoEgresos.jsx
procesadorDatos.js
procesadorDatosComparativo.js
procesadorDatosEgresos.js
FormFields.jsx
FormFields.scss
FormularioCategoriaEgreso.scss
FormularioCategoriaEgresos.jsx
FormularioCategoriaEgresos.scss
GestionCategoriasEgresos.jsx
GestionCategoriasEgresos.scss
ListaCategorias.jsx
ListaCategorias.scss
ListaCategoriasEgresos.jsx
ListaCategoriasEgresos.scss
ListadoCategoriasEgresos.jsx
ListadoCategoriasEgresos.scss
Egresos.jsx
Egresos.scss
BotonesFormulario.jsx
EgresosDatosAdicionales.jsx
EgresosDatosAdicionales.scss
FormularioEgreso.jsx
FormularioEgreso.scss
ListadoEgresos.jsx
ListadoEgresos.scss
RegistroEgresos.jsx
RegistroEgresos.scss
RutaCategoria.jsx
FormFields.jsx
FormFields.scss
FormularioSubcategoriaEgreso.scss
FormularioSubcategoriaEgresos.jsx
GestionSubcategoriasEgresos.jsx
GestionSubcategoriasEgresos.scss
ListaSubcategorias.jsx
ListaSubcategorias.scss
Footer.jsx
FormFields.jsx
FormFields.scss
FormularioCategoria.jsx
FormularioCategoria.scss
GestionCategorias.jsx
GestionCategorias.scss
ListaCategorias.jsx
ListaCategorias.scss
Ingresos.jsx
Ingresos.scss
BotonesFormulario.jsx
FormularioIngreso.jsx
FormularioIngreso.scss
IngresosDatosAdicionales.jsx
IngresosDatosAdicionales.scss
ListadoIngresos.jsx
ListadoIngresos.scss
RegistroIngresos.jsx
RegistroIngresos.scss
RutaCategoria.jsx
FormFields.jsx
FormFields.scss
FormularioSubcategoriaIngresos.jsx
FormularioSubcategoriaIngresos.scss
GestionSubcategoriasIngresos.jsx
GestionSubcategoriasIngresos.scss
ListaSubcategorias.jsx
ListaSubcategorias.scss
ModalItems.jsx
ModalItems.scss
ModalSubcategoria.jsx
ModalSubcategoria.scss
SubcategoriasIngresos.jsx
GestionListasMaestras.jsx
GestionListasMaestras.scss
ModalItems.jsx
ModalItems.scss
ModalListaMaestra.jsx
ModalListaMaestra.scss
NavBar.jsx
PaginaInicial.jsx
constants.js
useCategorias.js
useCategoriasEgresos.js
useInactivityTimer.js
useSubcategoriasEgresos.js
useSubcategoriasIngresos.js
main.jsx
authService.js
categoriaEgresosService.js
categoriasService.js
egresosService.js
ingresosService.js
listaMaestraService.js
subcategoriaEgresosService.js
subcategoriaIngresosService.js
Footer.scss
NavBar.scss
PaginaInicial.scss
_variables.scss
fechaActual.js
vite.config.js
</relevant_files>


ESTRUCTURA DEL PROYECTO:
=====================

📄 .env
📄 .env.production
📄 .gitignore
📁 .vite
  📁 deps
    📄 package.json
    📄 _metadata.json
📄 echo.js
📄 eslint.config.js
📄 export-project.js
📄 index.html
📄 package.json
📁 public
  📄 _redirects
📁 src
  📄 App.jsx
  📄 App.scss
  📁 assets
  📁 components
    📁 auth
      📄 Login.jsx
      📄 Login.scss
      📄 ProtectedRoute.jsx
      📄 Register.jsx
      📄 Register.scss
    📁 comunes
      📄 EntradaFecha.jsx
      📄 EntradaFecha.scss
      📄 EntradaMonetaria.jsx
      📄 EntradaMonetaria.scss
    📁 dashboard
      📄 DashboardComparativo.jsx
      📄 DashboardComparativo.scss
      📄 DashboardEgresos.jsx
      📄 DashboardEgresos.scss
      📄 DashboardIngresos.jsx
      📄 DashboardIngresos.scss
      📄 GraficoBalanceNeto.jsx
      📄 GraficoComparativoAcumulado.jsx
      📄 GraficoComparativoDiario.jsx
      📄 GraficoEgresosDiarios.jsx
      📄 GraficoIngresosDiarios.jsx
      📄 GraficoMediosPago.jsx
      📄 GraficoTiposGasto.jsx
      📄 GraficoTotalAcumulado.jsx
      📄 GraficoTotalAcumuladoEgresos.jsx
      📁 utils
        📄 procesadorDatos.js
        📄 procesadorDatosComparativo.js
        📄 procesadorDatosEgresos.js
    📁 egresos
      📁 categorias
        📄 FormFields.jsx
        📄 FormFields.scss
        📄 FormularioCategoriaEgreso.scss
        📄 FormularioCategoriaEgresos.jsx
        📄 FormularioCategoriaEgresos.scss
        📄 GestionCategoriasEgresos.jsx
        📄 GestionCategoriasEgresos.scss
        📄 ListaCategorias.jsx
        📄 ListaCategorias.scss
        📄 ListaCategoriasEgresos.jsx
        📄 ListaCategoriasEgresos.scss
        📄 ListadoCategoriasEgresos.jsx
        📄 ListadoCategoriasEgresos.scss
      📄 Egresos.jsx
      📄 Egresos.scss
      📁 registro
        📄 BotonesFormulario.jsx
        📄 EgresosDatosAdicionales.jsx
        📄 EgresosDatosAdicionales.scss
        📄 FormularioEgreso.jsx
        📄 FormularioEgreso.scss
        📄 ListadoEgresos.jsx
        📄 ListadoEgresos.scss
        📄 RegistroEgresos.jsx
        📄 RegistroEgresos.scss
        📄 RutaCategoria.jsx
      📁 subcategorias
        📄 FormFields.jsx
        📄 FormFields.scss
        📄 FormularioSubcategoriaEgreso.scss
        📄 FormularioSubcategoriaEgresos.jsx
        📄 GestionSubcategoriasEgresos.jsx
        📄 GestionSubcategoriasEgresos.scss
        📄 ListaSubcategorias.jsx
        📄 ListaSubcategorias.scss
    📄 Footer.jsx
    📁 ingresos
      📁 categorias
        📄 FormFields.jsx
        📄 FormFields.scss
        📄 FormularioCategoria.jsx
        📄 FormularioCategoria.scss
        📄 GestionCategorias.jsx
        📄 GestionCategorias.scss
        📄 ListaCategorias.jsx
        📄 ListaCategorias.scss
      📄 Ingresos.jsx
      📄 Ingresos.scss
      📁 registro
        📄 BotonesFormulario.jsx
        📄 FormularioIngreso.jsx
        📄 FormularioIngreso.scss
        📄 IngresosDatosAdicionales.jsx
        📄 IngresosDatosAdicionales.scss
        📄 ListadoIngresos.jsx
        📄 ListadoIngresos.scss
        📄 RegistroIngresos.jsx
        📄 RegistroIngresos.scss
        📄 RutaCategoria.jsx
      📁 subcategorias
        📄 FormFields.jsx
        📄 FormFields.scss
        📄 FormularioSubcategoriaIngresos.jsx
        📄 FormularioSubcategoriaIngresos.scss
        📄 GestionSubcategoriasIngresos.jsx
        📄 GestionSubcategoriasIngresos.scss
        📄 ListaSubcategorias.jsx
        📄 ListaSubcategorias.scss
        📄 ModalItems.jsx
        📄 ModalItems.scss
        📄 ModalSubcategoria.jsx
        📄 ModalSubcategoria.scss
        📄 SubcategoriasIngresos.jsx
    📁 listas-maestras
      📄 GestionListasMaestras.jsx
      📄 GestionListasMaestras.scss
      📄 ModalItems.jsx
      📄 ModalItems.scss
      📄 ModalListaMaestra.jsx
      📄 ModalListaMaestra.scss
    📄 NavBar.jsx
    📄 PaginaInicial.jsx
  📁 config
    📄 constants.js
  📁 hooks
    📄 useCategorias.js
    📄 useCategoriasEgresos.js
    📄 useInactivityTimer.js
    📄 useSubcategoriasEgresos.js
    📄 useSubcategoriasIngresos.js
  📄 main.jsx
  📁 services
    📄 authService.js
    📄 categoriaEgresosService.js
    📄 categoriasService.js
    📄 egresosService.js
    📄 ingresosService.js
    📄 listaMaestraService.js
    📄 subcategoriaEgresosService.js
    📄 subcategoriaIngresosService.js
  📁 styles
    📄 Footer.scss
    📄 NavBar.scss
    📄 PaginaInicial.scss
    📄 _variables.scss
  📁 utils
    📄 fechaActual.js
📄 vite.config.js


CONTENIDO DE LOS ARCHIVOS:
========================

<open_file>
.env
```.env
VITE_API_URL=http://localhost:5005 
```
</open_file>

<open_file>
.env.production
```.env.production
VITE_API_URL=https://caja-om.estudiobeguier.com:5005
```
</open_file>

<open_file>
.gitignore
```.gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules

dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

```
</open_file>

<open_file>
.vite\deps\package.json
```.vite\deps\package.json
{
  "type": "module"
}

```
</open_file>

<open_file>
.vite\deps\_metadata.json
```.vite\deps\_metadata.json
{
  "hash": "53547ebc",
  "configHash": "65807c56",
  "lockfileHash": "e3b0c442",
  "browserHash": "98e19d71",
  "optimized": {},
  "chunks": {}
}
```
</open_file>

<open_file>
echo.js
```echo.js
console.log(process.argv[2]);

```
</open_file>

<open_file>
eslint.config.js
```eslint.config.js
import js from "@eslint/js";
import globals from "globals";
import react from "eslint-plugin-react";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";

export default [
  { ignores: ["dist"] }, // Ignora la carpeta de salida
  {
    files: ["**/*.{js,jsx}"], // Aplica reglas a archivos JS y JSX
    languageOptions: {
      ecmaVersion: 2020,
      globals: {
        ...globals.browser, // Soporte para el entorno del navegador
        ...globals.node, // Soporte para el entorno de Node.js
      },
      parserOptions: {
        ecmaVersion: "latest",
        ecmaFeatures: { jsx: true },
        sourceType: "module",
      },
    },
    settings: { react: { version: "18.3" } }, // Configuración para React
    plugins: {
      react,
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules, // Reglas recomendadas para JS
      ...react.configs.recommended.rules, // Reglas recomendadas para React
      ...react.configs["jsx-runtime"].rules, // Reglas para el runtime de JSX
      ...reactHooks.configs.recommended.rules, // Reglas recomendadas para React Hooks
      "react/jsx-no-target-blank": "off",
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "no-undef": "off", // Evita errores en variables globales como `process`
    },
  },
];

```
</open_file>

<open_file>
export-project.js
```export-project.js
import fs from 'fs';
import path from 'path';
import process from 'process';

// Patrones de archivos a omitir
const skipPatterns = [
    'package-lock.json',
    'README.md',
    'yarn.lock',
    /\.(jpg|jpeg|png|gif|ico|svg)$/i,
    /\.(mp3|mp4|wav|avi)$/i,
    /\.(pdf|doc|docx)$/i,
    /\.(ttf|woff|woff2|eot)$/i
];

function shouldSkipFile(filename) {
    // Primero verificamos el nombre del archivo
    const skipByName = skipPatterns.some(pattern => {
        if (typeof pattern === 'string') {
            return filename.toLowerCase() === pattern.toLowerCase();
        }
        return pattern.test(filename);
    });

    if (skipByName) return true;

    // Si es un archivo de dependencias, verificamos su contenido
    try {
        if (filename.endsWith('.json') || filename.endsWith('.lock')) {
            const content = fs.readFileSync(filename, 'utf-8');
            // Verificamos si el contenido tiene el patrón típico de dependencias
            if (content.includes('"@') && content.includes('resolved "https://registry.npmjs.org/')) {
                return true;
            }
        }
    } catch (error) {
        // Si hay error al leer el archivo, continuamos con el proceso normal
        console.error(`Error leyendo ${filename}: ${error.message}`);
    }

    return false;
}

function getProjectStructure(dir, indent = '') {
    let structure = '';
    const items = fs.readdirSync(dir);

    for (const item of items) {
        if (item === 'node_modules') continue;

        const fullPath = path.join(dir, item);
        const stats = fs.statSync(fullPath);

        if (stats.isDirectory()) {
            structure += `${indent}📁 ${item}\n`;
            structure += getProjectStructure(fullPath, indent + '  ');
        } else if (!shouldSkipFile(item)) {
            structure += `${indent}📄 ${item}\n`;
        }
    }

    return structure;
}

function exportProject() {
    const currentDir = process.cwd();
    const outputFile = 'proyecto_exportado.txt';
    let output = '';

    // Agregar los comandos necesarios para que el AI pueda ver el contenido
    output += `<relevant_files>\n`;
    output += getProjectStructure(currentDir).split('\n')
        .filter(line => line.includes('📄'))
        .map(line => line.trim().replace('📄 ', ''))
        .join('\n');
    output += `\n</relevant_files>\n\n\n`;

    // Escribir la estructura del proyecto
    output += "ESTRUCTURA DEL PROYECTO:\n";
    output += "=====================\n\n";
    output += getProjectStructure(currentDir);

    // Escribir el contenido de los archivos
    output += "\n\nCONTENIDO DE LOS ARCHIVOS:\n";
    output += "========================\n\n";

    function processDirectory(dir) {
        const items = fs.readdirSync(dir);

        for (const item of items) {
            if (item === 'node_modules') continue;

            const fullPath = path.join(dir, item);
            const stats = fs.statSync(fullPath);

            if (stats.isDirectory()) {
                processDirectory(fullPath);
            } else if (!shouldSkipFile(item)) {
                const relativePath = path.relative(currentDir, fullPath);
                try {
                    const content = fs.readFileSync(fullPath, 'utf-8');
                    output += `<open_file>\n${relativePath}\n\`\`\`${relativePath}\n${content}\n\`\`\`\n</open_file>\n\n`;
                } catch (error) {
                    output += `\n// Error leyendo ${relativePath}: ${error.message}\n`;
                }
            }
        }
    }

    processDirectory(currentDir);

    // Guardar todo en el archivo
    fs.writeFileSync(outputFile, output, 'utf-8');
    console.log('¡Exportación completada! Revisa el archivo "proyecto_exportado.txt"');
}

exportProject(); 
```
</open_file>

<open_file>
index.html
```index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="/EstudioIcono256x256.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Estudio Beguier</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

```
</open_file>

<open_file>
package.json
```package.json
{
  "name": "flujodecajaodontomed",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mui/material": "^6.2.0",
    "@popperjs/core": "^2.11.8",
    "bootstrap": "^5.3.3",
    "chart.js": "^4.4.7",
    "cors": "^2.8.5",
    "date-fns": "^4.1.0",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "lucide-react": "^0.469.0",
    "mongoose": "^8.8.4",
    "prop-types": "^15.8.1",
    "react": "^18.3.1",
    "react-bootstrap": "^2.10.6",
    "react-chartjs-2": "^5.2.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.4.0",
    "react-number-format": "^5.4.2",
    "react-router-dom": "^7.0.2",
    "sass": "^1.83.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.16.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "serve": "^14.2.4",
    "vite": "^6.0.3"
  }
}

```
</open_file>

<open_file>
public\_redirects
```public\_redirects
/*    /index.html   200
```
</open_file>

<open_file>
src\App.jsx
```src\App.jsx
import "./App.scss";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from "react-router-dom";
import { NavBar } from "./components/NavBar";
import { Footer } from "./components/Footer";
import { PaginaInicial } from "./components/PaginaInicial";
import { Ingresos } from "./components/ingresos/Ingresos";
import { GestionCategorias } from "./components/ingresos/categorias/GestionCategorias";
import { RegistroIngresos } from "./components/ingresos/registro/RegistroIngresos";
import { Egresos } from "./components/egresos/Egresos";
import { GestionCategoriasEgresos } from "./components/egresos/categorias/GestionCategoriasEgresos";
import { GestionSubcategoriasEgresos } from "./components/egresos/subcategorias/GestionSubcategoriasEgresos";
import { RegistroEgresos } from "./components/egresos/registro/RegistroEgresos";
import { Login } from "./components/auth/Login";
import { ProtectedRoute } from "./components/auth/ProtectedRoute";
import { Register } from "./components/auth/Register";
import { GestionSubcategoriasIngresos } from "./components/ingresos/subcategorias/GestionSubcategoriasIngresos";
import { GestionListasMaestras } from "./components/listas-maestras/GestionListasMaestras";

function App() {
  return (
    <Router>
      <Routes>
        {/* Rutas sin protección - sin NavBar */}
        <Route path="/" element={<Navigate to="/login" replace />} />
        <Route path="/login" element={<Login />} />

        {/* Rutas protegidas - con NavBar */}
        <Route
          path="/*"
          element={
            <ProtectedRoute>
              <div className="app-container">
                <NavBar />
                <Routes>
                  <Route path="/home" element={<PaginaInicial />} />
                  <Route path="/register" element={<Register />} />
                  <Route path="/ingresos" element={<Ingresos />} />
                  <Route
                    path="/agregar-ingresos"
                    element={<GestionCategorias />}
                  />
                  <Route
                    path="/registar-ingresos"
                    element={<RegistroIngresos />}
                  />
                  <Route path="/egresos" element={<Egresos />} />
                  <Route
                    path="/agregar-egresos"
                    element={<GestionCategoriasEgresos />}
                  />
                  <Route
                    path="/agregar-subcategorias-egresos"
                    element={<GestionSubcategoriasEgresos />}
                  />
                  <Route
                    path="/registrar-egresos"
                    element={<RegistroEgresos />}
                  />
                  <Route
                    path="/agregar-subcategorias-ingresos"
                    element={<GestionSubcategoriasIngresos />}
                  />
                  <Route
                    path="/listas-maestras"
                    element={
                      <ProtectedRoute>
                        <GestionListasMaestras />
                      </ProtectedRoute>
                    }
                  />
                </Routes>
                <Footer />
              </div>
            </ProtectedRoute>
          }
        />
      </Routes>
    </Router>
  );
}

export default App;

```
</open_file>

<open_file>
src\App.scss
```src\App.scss
@use "./styles/variables" as var;

* {
  margin: 0px;
  padding: 0px;
  background-color: var.$color-fondo-estudio;
}

body {
  background-color: var.$color-fondo-estudio;
}

.app-container {
  padding-top: 80px;
  min-height: 100vh;
  background-color: var.$color-fondo-estudio;
}

```
</open_file>

<open_file>
src\components\auth\Login.jsx
```src\components\auth\Login.jsx
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { login } from "../../services/authService";
import logo3 from "../../assets/odontomed512_512.png";
import logo4 from "../../assets/odontomedBigLogo.png";
import logo from "../../assets/logoEstudio.png";
import logo1 from "../../assets/logoEstudio1.png";
import "./Login.scss";

export const Login = () => {
  const [credentials, setCredentials] = useState({
    username: "",
    password: "",
  });
  const [error, setError] = useState("");
  const [showLogo1, setShowLogo1] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const logoTimer = setInterval(() => {
      setShowLogo1((prevShowLogo1) => !prevShowLogo1);
    }, 20000); // Cambia el logo cada 20 segundos
    return () => clearInterval(logoTimer);
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      await login(credentials);
      navigate("/home");
    } catch (error) {
      setError(error.message);
    }
  };

  return (
    <div className="login-container">
      <div className="login-box">
        <div className="login-header">
          <div className="estudio-logos">
            <img
              src={logo}
              className={`login-logo-estudio ${showLogo1 ? "show" : ""}`}
              alt="Logo Estudio"
            />
            <img
              src={logo1}
              className={`login-logo-estudio ${showLogo1 ? "" : "show"}`}
              alt="Logo Estudio 1"
            />
          </div>
          <div className="cliente-logos">
            <img
              src={logo3}
              alt="Logo Cliente"
              className="login-logo-cliente"
            />
            <img
              src={logo4}
              alt="Logo Cliente 1"
              className="login-logo-cliente-1"
            />
          </div>
        </div>
        <p className="login-titulo">Iniciar Sesión</p>
        {error && <div className="error-login">{error}</div>}
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <input
              type="text"
              placeholder="Usuario"
              value={credentials.username}
              onChange={(e) =>
                setCredentials({ ...credentials, username: e.target.value })
              }
              required
            />
          </div>
          <div className="form-group">
            <input
              type="password"
              placeholder="Contraseña"
              value={credentials.password}
              onChange={(e) =>
                setCredentials({ ...credentials, password: e.target.value })
              }
              required
            />
          </div>
          <button type="submit" className="login-button">
            Ingresar
          </button>
        </form>
      </div>
    </div>
  );
};

```
</open_file>

<open_file>
src\components\auth\Login.scss
```src\components\auth\Login.scss
@use "../../styles/variables" as var;

.login-container {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var.$color-fondo-estudio;
  margin-top: 32px;
}

.login-box {
  margin-top: 45px;
  background-color: var.$color-fondo-estudio;
  padding: 1.6rem;
  border-radius: 10px;
  border: 1px solid var.$color-principal-estudio;
  width: 100%;
  max-width: 320px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
}

.login-header {
  text-align: center;
  margin-bottom: 0.8rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.8rem;
}

.estudio-logos {
  position: relative;
  width: 268px;
  height: 56px;
}

.login-logo-estudio {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  transition: opacity 20s ease-in-out;
  border-radius: 10px;

  &.show {
    opacity: 1;
  }
}

.cliente-logos {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  margin-top: 10px;
}

.login-logo-cliente {
  width: 48px;
}

.login-logo-cliente-1 {
  width: 160px;
  margin-top: 7px;
}

.login-titulo {
  color: var.$color-principal-cliente;
  text-align: center;
  margin-bottom: 0.9rem;
  font-size: 1.9rem;
  font-weight: 500;
}

.error-login {
  color: #ff4444;
  text-align: center;

  margin-bottom: 0.4rem;
  font-size: 0.9rem;
  font-weight: 500;
  padding: 0.1rem;
  border-radius: 4px;
}

.form-group {
  margin-bottom: 1.2rem;

  input {
    width: 100%;
    padding: 0.65rem;
    border: 1px solid var.$color-principal-cliente;
    border-radius: 5px;
    background-color: rgba(255, 255, 255, 0.1);
    color: white;
    font-size: 0.95rem;

    &::placeholder {
      color: rgba(255, 255, 255, 0.5);
    }

    &:focus {
      outline: none;
      border-color: var.$color-principal-estudio;
    }
  }
}

.login-button {
  width: 100%;
  padding: 0.65rem;
  background-color: var.$color-principal-cliente;
  color: white;
  border: none;
  border-radius: 5px;
  font-size: 0.95rem;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 700;

  &:hover {
    background-color: var.$color-principal-estudio;
  }
}

@media (max-width: 994px) {
  .estudio-logos {
    width: 200px;
    height: 44px;
  }
}

```
</open_file>

<open_file>
src\components\auth\ProtectedRoute.jsx
```src\components\auth\ProtectedRoute.jsx
import { Navigate } from "react-router-dom";
import PropTypes from "prop-types";
import { isAuthenticated } from "../../services/authService";
import { useInactivityTimer } from "../../hooks/useInactivityTimer";

export const ProtectedRoute = ({ children }) => {
  useInactivityTimer(30); // 30 minutos de inactividad

  if (!isAuthenticated()) {
    return <Navigate to="/login" replace />;
  }

  return children;
};

ProtectedRoute.propTypes = {
  children: PropTypes.node.isRequired,
};

```
</open_file>

<open_file>
src\components\auth\Register.jsx
```src\components\auth\Register.jsx
import { useState } from "react";
import { API_BASE_URL } from "../../config/constants";
import { getAuthHeaders } from "../../services/authService";
import "./Register.scss";

export const Register = () => {
  const [formData, setFormData] = useState({
    username: "",
    password: "",
    role: "user",
  });
  const [message, setMessage] = useState({ text: "", isError: false });

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage({ text: "", isError: false });

    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/register`, {
        method: "POST",
        headers: getAuthHeaders(),
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.mensaje);
      }

      setMessage({ text: "Usuario creado exitosamente", isError: false });
      setFormData({ username: "", password: "", role: "user" });
    } catch (error) {
      setMessage({ text: error.message, isError: true });
    }
  };

  return (
    <div className="register-container">
      <div className="register-box">
        <h2>Crear Nuevo Usuario</h2>
        {message.text && (
          <div className={`message ${message.isError ? "error" : "success"}`}>
            {message.text}
          </div>
        )}
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <input
              type="text"
              placeholder="Usuario"
              value={formData.username}
              onChange={(e) =>
                setFormData({ ...formData, username: e.target.value })
              }
              required
            />
          </div>
          <div className="form-group">
            <input
              type="password"
              placeholder="Contraseña"
              value={formData.password}
              onChange={(e) =>
                setFormData({ ...formData, password: e.target.value })
              }
              required
            />
          </div>
          <div className="form-group">
            <select
              value={formData.role}
              onChange={(e) =>
                setFormData({ ...formData, role: e.target.value })
              }
              required
            >
              <option value="user">Usuario Normal</option>
              <option value="admin">Administrador</option>
            </select>
          </div>
          <button type="submit" className="register-button">
            Crear Usuario
          </button>
        </form>
      </div>
    </div>
  );
};

```
</open_file>

<open_file>
src\components\auth\Register.scss
```src\components\auth\Register.scss
@use "../../styles/variables" as var;

.register-container {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: calc(100vh - 90px); // Ajustar por el NavBar
  padding: 20px;
}

.register-box {
  background-color: var.$color-fondo-estudio;
  padding: 2rem;
  border-radius: 10px;
  border: 1px solid var.$color-principal-estudio;
  width: 100%;
  max-width: 400px;
}

h2 {
  color: var.$color-principal-cliente;
  text-align: center;
  margin-bottom: 2rem;
  font-size: 1.8rem;
}

.form-group {
  margin-bottom: 1.5rem;

  input,
  select {
    width: 100%;
    padding: 0.8rem;
    border: 1px solid var.$color-principal-cliente;
    border-radius: 5px;
    background-color: rgba(255, 255, 255, 0.1);
    color: white;
    font-size: 1rem;
    appearance: none;

    &::placeholder {
      color: rgba(255, 255, 255, 0.5);
    }

    &:focus {
      outline: none;
      border-color: var.$color-principal-estudio;
    }
  }

  select {
    cursor: pointer;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-size: 1em;
    padding-right: 2.5rem;

    option {
      background-color: var.$color-fondo-estudio;
      color: white;
      padding: 0.8rem;
    }

    &:hover {
      border-color: var.$color-principal-estudio;
    }
  }
}

.register-button {
  width: 100%;
  padding: 0.8rem;
  background-color: var.$color-principal-cliente;
  color: white;
  border: none;
  border-radius: 5px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 700;

  &:hover {
    background-color: var.$color-principal-estudio;
  }
}

.message {
  padding: 1rem;
  margin-bottom: 1rem;
  border-radius: 5px;
  text-align: center;

  &.error {
    background-color: rgba(255, 0, 0, 0.1);
    color: #ff4444;
    border: 1px solid #ff4444;
  }

  &.success {
    background-color: rgba(0, 255, 0, 0.1);
    color: #00c851;
    border: 1px solid #00c851;
  }
}

```
</open_file>

<open_file>
src\components\comunes\EntradaFecha.jsx
```src\components\comunes\EntradaFecha.jsx
import PropTypes from "prop-types";
import "./EntradaFecha.scss";

export const EntradaFecha = ({ id, valor, alCambiar, requerido = false }) => {
  return (
    <input
      type="date"
      id={id}
      value={valor}
      onChange={(e) => alCambiar(e.target.value)}
      required={requerido}
      className="entrada-fecha"
    />
  );
};

EntradaFecha.propTypes = {
  id: PropTypes.string.isRequired,
  valor: PropTypes.string.isRequired,
  alCambiar: PropTypes.func.isRequired,
  requerido: PropTypes.bool,
};

```
</open_file>

<open_file>
src\components\comunes\EntradaFecha.scss
```src\components\comunes\EntradaFecha.scss
@use "../../styles/variables" as var;

.entrada-fecha {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
  background-color: #fff;
  cursor: pointer;
  padding-right: 30px;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23666' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='4' width='18' height='18' rx='2' ry='2'%3E%3C/rect%3E%3Cline x1='16' y1='2' x2='16' y2='6'%3E%3C/line%3E%3Cline x1='8' y1='2' x2='8' y2='6'%3E%3C/line%3E%3Cline x1='3' y1='10' x2='21' y2='10'%3E%3C/line%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 8px center;
  background-size: 16px;
}

.entrada-fecha:focus {
  border-color: var.$color-principal-cliente;
  outline: none;
  box-shadow: 0 0 0 2px rgba(64, 181, 166, 0.2);
}

.entrada-fecha::-webkit-calendar-picker-indicator {
  opacity: 0;
  cursor: pointer;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

```
</open_file>

<open_file>
src\components\comunes\EntradaMonetaria.jsx
```src\components\comunes\EntradaMonetaria.jsx
import PropTypes from "prop-types";
import { NumericFormat } from "react-number-format";
import "./EntradaMonetaria.scss";

export const EntradaMonetaria = ({
  valor,
  alCambiar,
  placeholder = "0,00",
}) => {
  return (
    <NumericFormat
      value={valor}
      onValueChange={(values) => {
        alCambiar(values.value);
      }}
      thousandSeparator="."
      decimalSeparator=","
      decimalScale={2}
      fixedDecimalScale
      allowNegative={false}
      placeholder={placeholder}
      className="entrada-monetaria"
    />
  );
};

EntradaMonetaria.propTypes = {
  valor: PropTypes.string.isRequired,
  alCambiar: PropTypes.func.isRequired,
  placeholder: PropTypes.string,
};

```
</open_file>

<open_file>
src\components\comunes\EntradaMonetaria.scss
```src\components\comunes\EntradaMonetaria.scss
@use "../../styles/variables" as var;

.entrada-monetaria {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
  text-align: right;
  background-color: #fff;
}

.entrada-monetaria:focus {
  border-color: var.$color-principal-cliente;
  outline: none;
  box-shadow: 1px 1px 1px 2px rgba(64, 181, 166, 0.2);
}

```
</open_file>

<open_file>
src\components\dashboard\DashboardComparativo.jsx
```src\components\dashboard\DashboardComparativo.jsx
import { useState, useEffect } from "react";
import { getIngresos } from "../../services/ingresosService";
import { getEgresos } from "../../services/egresosService";
import { GraficoComparativoDiario } from "./GraficoComparativoDiario";
import { GraficoComparativoAcumulado } from "./GraficoComparativoAcumulado";
import { GraficoBalanceNeto } from "./GraficoBalanceNeto";
import {
  procesarDatosComparativos,
  opcionesComparativas,
  datosInicialesComparativos,
} from "./utils/procesadorDatosComparativo";
import "./DashboardComparativo.scss";

export const DashboardComparativo = () => {
  const [datosGraficos, setDatosGraficos] = useState(
    datosInicialesComparativos
  );
  const [isLoading, setIsLoading] = useState(true);
  const [diasSeleccionados, setDiasSeleccionados] = useState(7);
  const [periodoAcumulados, setPeriodoAcumulados] = useState("mensual");
  const [periodoBalance, setPeriodoBalance] = useState("mensual");

  const periodos = [
    { valor: "mensual", texto: "Mensual" },
    { valor: "trimestral", texto: "Trimestral" },
    { valor: "semestral", texto: "Semestral" },
    { valor: "anual", texto: "Anual" },
    { valor: "historico", texto: "Histórico" },
  ];

  useEffect(() => {
    const cargarDatos = async () => {
      try {
        const [ingresos, egresos] = await Promise.all([
          getIngresos(),
          getEgresos(),
        ]);

        const datosComparativos = procesarDatosComparativos(
          ingresos,
          egresos,
          diasSeleccionados
        );

        setDatosGraficos(datosComparativos);
      } catch (error) {
        console.error("Error al cargar datos:", error);
      } finally {
        setIsLoading(false);
      }
    };

    cargarDatos();
  }, [diasSeleccionados, periodoAcumulados, periodoBalance]);

  if (isLoading) {
    return <div className="dashboard-loading">Cargando datos...</div>;
  }

  return (
    <div className="dashboard-container">
      <div className="dashboard-header">
        <div className="header-line">
          <div className="line-left"></div>
          <h2 className="dashboard-title">Análisis Comparativo</h2>
          <div className="line-right"></div>
        </div>
      </div>

      <div className="graficos-grid">
        <GraficoComparativoDiario
          datos={datosGraficos.comparativoDiario}
          opciones={opcionesComparativas}
          diasSeleccionados={diasSeleccionados}
          setDiasSeleccionados={setDiasSeleccionados}
        />
        <GraficoComparativoAcumulado
          datos={datosGraficos.acumulados}
          opciones={opcionesComparativas}
          periodoSeleccionado={periodoAcumulados}
          setPeriodoSeleccionado={setPeriodoAcumulados}
          periodos={periodos}
        />
        <GraficoBalanceNeto
          datos={datosGraficos.balanceNeto}
          opciones={opcionesComparativas}
          periodoSeleccionado={periodoBalance}
          setPeriodoSeleccionado={setPeriodoBalance}
          periodos={periodos}
        />
      </div>
    </div>
  );
};

```
</open_file>

<open_file>
src\components\dashboard\DashboardComparativo.scss
```src\components\dashboard\DashboardComparativo.scss
@use "../../styles/variables" as var;

.dashboard-container {
  margin-bottom: 3rem;
  padding: 1rem;
  background-color: var.$color-fondo-estudio;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.graficos-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1rem;
  width: 100%;
  margin-bottom: 1rem;
}

.grafico-item {
  height: 85%;
  width: 98%;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 4px;
  background-color: var.$color-fondo-estudio;

  h3 {
    color: var.$color-principal-cliente;
    font-size: 1rem;
    text-align: center;
    margin-bottom: 0.5rem;
    font-weight: 400;
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.grafico-header {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  padding: 0.5rem 1rem;
  background-color: var.$color-fondo-estudio;

  h3 {
    margin: 0;
  }

  select {
    min-width: 100px;
    background-color: transparent;
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    padding: 0.25rem;
    font-size: 0.9rem;

    option {
      background-color: var.$color-fondo-estudio;
    }
  }
}

@media (max-width: 1200px) {
  .graficos-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 768px) {
  .graficos-grid {
    grid-template-columns: 1fr;
  }
}

```
</open_file>

<open_file>
src\components\dashboard\DashboardEgresos.jsx
```src\components\dashboard\DashboardEgresos.jsx
import { useState, useEffect } from "react";
import { getEgresos } from "../../services/egresosService";
import { GraficoEgresosDiarios } from "./GraficoEgresosDiarios";
import { GraficoTotalAcumuladoEgresos } from "./GraficoTotalAcumuladoEgresos";
import { GraficoTiposGasto } from "./GraficoTiposGasto";
import {
  procesarEgresosPorDia,
  procesarEgresosTotal,
  procesarDatosEgresos,
  opcionesBase,
  datosInicialesEgresos,
} from "./utils/procesadorDatosEgresos";
import "./DashboardEgresos.scss";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  Filler,
} from "chart.js";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  Filler
);

export const DashboardEgresos = () => {
  const [datosGraficos, setDatosGraficos] = useState(datosInicialesEgresos);
  const [isLoading, setIsLoading] = useState(true);
  const [diasSeleccionados, setDiasSeleccionados] = useState(7);
  const [periodoSeleccionado, setPeriodoSeleccionado] = useState("mensual");
  const [periodoTiposGasto, setPeriodoTiposGasto] = useState("mensual");

  const periodos = [
    { valor: "mensual", texto: "Mensual" },
    { valor: "trimestral", texto: "Trimestral" },
    { valor: "semestral", texto: "Semestral" },
    { valor: "anual", texto: "Anual" },
    { valor: "historico", texto: "Histórico" },
  ];

  useEffect(() => {
    const cargarDatosEgresos = async () => {
      try {
        const egresos = await getEgresos();
        setDatosGraficos({
          diario: procesarEgresosPorDia(egresos, diasSeleccionados),
          total: procesarEgresosTotal(egresos, periodoSeleccionado),
          tiposGasto: procesarDatosEgresos(egresos, periodoTiposGasto),
        });
      } catch (error) {
        console.error("Error al cargar datos:", error);
      } finally {
        setIsLoading(false);
      }
    };

    cargarDatosEgresos();
  }, [diasSeleccionados, periodoSeleccionado, periodoTiposGasto]);

  if (isLoading) {
    return <div className="dashboard-loading">Cargando datos...</div>;
  }

  if (
    !datosGraficos.diario?.labels ||
    !datosGraficos.total?.labels ||
    !datosGraficos.tiposGasto?.labels
  ) {
    return <div className="dashboard-loading">Error al cargar los datos</div>;
  }

  return (
    <div className="dashboard-container">
      <div className="dashboard-header">
        <div className="header-line">
          <div className="line-left"></div>
          <h2 className="dashboard-title">Egresos</h2>
          <div className="line-right"></div>
        </div>
      </div>

      <div className="graficos-grid">
        <GraficoEgresosDiarios
          datos={datosGraficos.diario}
          opciones={opcionesBase}
          diasSeleccionados={diasSeleccionados}
          setDiasSeleccionados={setDiasSeleccionados}
        />
        <GraficoTotalAcumuladoEgresos
          datos={datosGraficos.total}
          opciones={opcionesBase}
          periodoSeleccionado={periodoSeleccionado}
          setPeriodoSeleccionado={setPeriodoSeleccionado}
          periodos={periodos}
        />
        <GraficoTiposGasto
          datos={datosGraficos.tiposGasto}
          opciones={opcionesBase}
          periodoTiposGasto={periodoTiposGasto}
          setPeriodoTiposGasto={setPeriodoTiposGasto}
          periodos={periodos}
        />
      </div>

      <div className="separator-line"></div>
    </div>
  );
};

```
</open_file>

<open_file>
src\components\dashboard\DashboardEgresos.scss
```src\components\dashboard\DashboardEgresos.scss
@use "../../styles/variables" as var;

.dashboard-container {
  margin-bottom: 3rem;
  padding: 1rem;
  background-color: var.$color-fondo-estudio;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.graficos-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1rem;
  width: 100%;
  margin-bottom: 1rem;
}

.grafico-item {
  height: 85%;
  width: 98%;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 4px;
  background-color: var.$color-fondo-estudio;

  h3 {
    color: var.$color-principal-cliente;
    font-size: 1rem;
    text-align: center;
    margin-bottom: 0.5rem;
    font-weight: 400;
  }
}

.dashboard-loading {
  text-align: center;
  color: white;
  padding: 2rem;
  font-size: 1.2rem;
}

.dashboard-header {
  margin-bottom: 1rem;
  text-align: center;
  background-color: var.$color-fondo-estudio;
}

.header-line {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  width: 100%;
  background-color: var.$color-fondo-estudio;
}

.line-left,
.line-right {
  height: 1px;
  background-color: rgba(255, 255, 255, 0.3);
  flex: 1;
}

.dashboard-title {
  color: white;
  font-size: 1.5rem;
  font-weight: 400;
  margin: 0;
  white-space: nowrap;
}

@media (max-width: 1200px) {
  .graficos-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 768px) {
  .graficos-grid {
    grid-template-columns: 1fr;
  }
}

```
</open_file>

<open_file>
src\components\dashboard\DashboardIngresos.jsx
```src\components\dashboard\DashboardIngresos.jsx
import { useState, useEffect } from "react";
import { getIngresos } from "../../services/ingresosService";
import { GraficoIngresosDiarios } from "./GraficoIngresosDiarios";
import { GraficoTotalAcumulado } from "./GraficoTotalAcumulado";
import { GraficoMediosPago } from "./GraficoMediosPago";
import {
  procesarIngresosPorDia,
  procesarIngresosTotal,
  procesarIngresosPorMedio,
  opcionesBase,
  datosIniciales,
} from "./utils/procesadorDatos";
import "./DashboardIngresos.scss";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  Filler,
} from "chart.js";

// Registramos todos los componentes necesarios
ChartJS.register(
  CategoryScale, // Escala para categorías (eje X)
  LinearScale, // Escala lineal (eje Y)
  PointElement, // Puntos en las líneas
  LineElement, // Líneas
  BarElement, // Barras
  Title, // Títulos
  Tooltip, // Tooltips
  Legend, // Leyendas
  Filler // Relleno bajo las líneas
);

export const DashboardIngresos = () => {
  const [datosGraficos, setDatosGraficos] = useState(datosIniciales);
  const [isLoading, setIsLoading] = useState(true);
  const [diasSeleccionados, setDiasSeleccionados] = useState(7);
  const [periodoSeleccionado, setPeriodoSeleccionado] = useState("mensual");
  const [periodoMediosPago, setPeriodoMediosPago] = useState("mensual");

  const periodos = [
    { valor: "mensual", texto: "Mensual" },
    { valor: "trimestral", texto: "Trimestral" },
    { valor: "semestral", texto: "Semestral" },
    { valor: "anual", texto: "Anual" },
    { valor: "historico", texto: "Histórico" },
  ];

  useEffect(() => {
    const cargarDatosIngresos = async () => {
      try {
        const ingresos = await getIngresos();
        setDatosGraficos({
          diario: procesarIngresosPorDia(ingresos, diasSeleccionados),
          total: procesarIngresosTotal(ingresos, periodoSeleccionado),
          mediosPago: procesarIngresosPorMedio(ingresos, periodoMediosPago),
        });
      } catch (error) {
        console.error("Error al cargar datos:", error);
      } finally {
        setIsLoading(false);
      }
    };

    cargarDatosIngresos();
  }, [diasSeleccionados, periodoSeleccionado, periodoMediosPago]);

  if (isLoading) {
    return <div className="dashboard-loading">Cargando datos...</div>;
  }

  if (
    !datosGraficos.diario?.labels ||
    !datosGraficos.total?.labels ||
    !datosGraficos.mediosPago?.labels
  ) {
    return <div className="dashboard-loading">Error al cargar los datos</div>;
  }

  return (
    <div className="dashboard-container">
      <div className="dashboard-header">
        <div className="header-line">
          <div className="line-left"></div>
          <h2 className="dashboard-title">Ingresos</h2>
          <div className="line-right"></div>
        </div>
      </div>

      <div className="graficos-grid">
        <GraficoIngresosDiarios
          datos={datosGraficos.diario}
          opciones={opcionesBase}
          diasSeleccionados={diasSeleccionados}
          setDiasSeleccionados={setDiasSeleccionados}
        />
        <GraficoTotalAcumulado
          datos={datosGraficos.total}
          opciones={opcionesBase}
          periodoSeleccionado={periodoSeleccionado}
          setPeriodoSeleccionado={setPeriodoSeleccionado}
          periodos={periodos}
        />
        <GraficoMediosPago
          datos={datosGraficos.mediosPago}
          opciones={opcionesBase}
          periodoMediosPago={periodoMediosPago}
          setPeriodoMediosPago={setPeriodoMediosPago}
          periodos={periodos}
        />
      </div>

      <div className="separator-line"></div>
    </div>
  );
};

```
</open_file>

<open_file>
src\components\dashboard\DashboardIngresos.scss
```src\components\dashboard\DashboardIngresos.scss
@use "../../styles/variables" as var;

body {
  background-color: var.$color-fondo-estudio;
}

.dashboard-container {
  margin-bottom: 3rem;
  padding: 1rem;
  background-color: var.$color-fondo-estudio;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.graficos-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1rem;
  width: 100%;
  margin-bottom: 1rem;
}

.grafico-item {
  height: 85%;
  width: 98%;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 4px;
  background-color: var.$color-fondo-estudio;

  h3 {
    color: var.$color-principal-cliente;
    font-size: 1rem;
    text-align: center;
    margin-bottom: 0.5rem;
    font-weight: 400;
  }
}

.dashboard-loading {
  text-align: center;
  color: white;
  padding: 2rem;
  font-size: 1.2rem;
}

@media (max-width: 1200px) {
  .graficos-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 768px) {
  .graficos-grid {
    grid-template-columns: 1fr;
  }
}

.grafico-header {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1rem;

  h3 {
    margin: 0;
  }
}

.periodo-selector {
  background-color: var.$color-fondo-estudio;
  color: white;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 4px;
  padding: 0.3rem 0.5rem;
  font-size: 0.9rem;
  cursor: pointer;

  &:focus {
    outline: none;
    border-color: var.$color-principal-estudio;
  }

  option {
    background-color: var.$color-fondo-estudio;
    color: white;
  }
}

.dias-selector {
  background-color: var.$color-fondo-estudio;
  color: white;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 4px;
  padding: 0.3rem 0.5rem;
  font-size: 0.9rem;
  cursor: pointer;

  &:focus {
    outline: none;
    border-color: var.$color-principal-estudio;
  }

  option {
    background-color: var.$color-fondo-estudio;
    color: white;
  }
}

.dashboard-header {
  margin-bottom: 1rem;
  text-align: center;
  background-color: var.$color-fondo-estudio;
}

.header-line {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  width: 100%;
  background-color: var.$color-fondo-estudio;
}

.line-left,
.line-right {
  height: 1px;
  background-color: rgba(255, 255, 255, 0.3);
  flex: 1;
}

.dashboard-title {
  color: white;
  font-size: 1.5rem;
  font-weight: 400;
  margin: 0;
  white-space: nowrap;
}
.separator-line {
  background-color: var.$color-fondo-estudio;
}

```
</open_file>

<open_file>
src\components\dashboard\GraficoBalanceNeto.jsx
```src\components\dashboard\GraficoBalanceNeto.jsx
import PropTypes from "prop-types";
import { forwardRef } from "react";
import { Line } from "react-chartjs-2";

export const GraficoBalanceNeto = forwardRef(
  (
    { datos, opciones, periodoSeleccionado, setPeriodoSeleccionado, periodos },
    ref
  ) => {
    return (
      <div className="grafico-item">
        <div className="grafico-header">
          <h3>Balance Neto</h3>
          <select
            value={periodoSeleccionado}
            onChange={(e) => setPeriodoSeleccionado(e.target.value)}
            className="periodo-selector"
          >
            {periodos.map((periodo) => (
              <option key={periodo.valor} value={periodo.valor}>
                {periodo.texto}
              </option>
            ))}
          </select>
        </div>
        <Line data={datos} options={opciones} ref={ref} />
      </div>
    );
  }
);

GraficoBalanceNeto.propTypes = {
  datos: PropTypes.shape({
    labels: PropTypes.arrayOf(PropTypes.string).isRequired,
    datasets: PropTypes.arrayOf(PropTypes.object).isRequired,
  }).isRequired,
  opciones: PropTypes.object.isRequired,
  periodoSeleccionado: PropTypes.string.isRequired,
  setPeriodoSeleccionado: PropTypes.func.isRequired,
  periodos: PropTypes.arrayOf(
    PropTypes.shape({
      valor: PropTypes.string.isRequired,
      texto: PropTypes.string.isRequired,
    })
  ).isRequired,
};

GraficoBalanceNeto.displayName = "GraficoBalanceNeto";

```
</open_file>

<open_file>
src\components\dashboard\GraficoComparativoAcumulado.jsx
```src\components\dashboard\GraficoComparativoAcumulado.jsx
import PropTypes from "prop-types";
import { forwardRef } from "react";
import { Line } from "react-chartjs-2";

export const GraficoComparativoAcumulado = forwardRef(
  (
    { datos, opciones, periodoSeleccionado, setPeriodoSeleccionado, periodos },
    ref
  ) => {
    return (
      <div className="grafico-item">
        <div className="grafico-header">
          <h3>Acumulados Comparativos</h3>
          <select
            value={periodoSeleccionado}
            onChange={(e) => setPeriodoSeleccionado(e.target.value)}
            className="periodo-selector"
          >
            {periodos.map((periodo) => (
              <option key={periodo.valor} value={periodo.valor}>
                {periodo.texto}
              </option>
            ))}
          </select>
        </div>
        <Line data={datos} options={opciones} ref={ref} />
      </div>
    );
  }
);

GraficoComparativoAcumulado.displayName = "GraficoComparativoAcumulado";

GraficoComparativoAcumulado.propTypes = {
  datos: PropTypes.object.isRequired,
  opciones: PropTypes.object.isRequired,
  periodoSeleccionado: PropTypes.string.isRequired,
  setPeriodoSeleccionado: PropTypes.func.isRequired,
  periodos: PropTypes.arrayOf(
    PropTypes.shape({
      valor: PropTypes.string.isRequired,
      texto: PropTypes.string.isRequired,
    })
  ).isRequired,
};

```
</open_file>

<open_file>
src\components\dashboard\GraficoComparativoDiario.jsx
```src\components\dashboard\GraficoComparativoDiario.jsx
import PropTypes from "prop-types";
import { Line } from "react-chartjs-2";

export const GraficoComparativoDiario = ({
  datos,
  opciones,
  diasSeleccionados,
  setDiasSeleccionados,
}) => {
  const opcionesSelector = [
    { valor: 7, texto: "7 días" },
    { valor: 14, texto: "14 días" },
    { valor: 21, texto: "21 días" },
    { valor: 30, texto: "30 días" },
  ];

  return (
    <div className="grafico-item">
      <div className="grafico-header">
        <h3>Ingresos vs Egresos Diarios</h3>
        <select
          value={diasSeleccionados}
          onChange={(e) => setDiasSeleccionados(Number(e.target.value))}
          className="periodo-selector"
        >
          {opcionesSelector.map((opcion) => (
            <option key={opcion.valor} value={opcion.valor}>
              {opcion.texto}
            </option>
          ))}
        </select>
      </div>
      <Line data={datos} options={opciones} />
    </div>
  );
};

GraficoComparativoDiario.propTypes = {
  datos: PropTypes.object.isRequired,
  opciones: PropTypes.object.isRequired,
  diasSeleccionados: PropTypes.number.isRequired,
  setDiasSeleccionados: PropTypes.func.isRequired,
};

```
</open_file>

<open_file>
src\components\dashboard\GraficoEgresosDiarios.jsx
```src\components\dashboard\GraficoEgresosDiarios.jsx
import PropTypes from "prop-types";
import { Line } from "react-chartjs-2";

export const GraficoEgresosDiarios = ({
  datos,
  opciones,
  diasSeleccionados,
  setDiasSeleccionados,
}) => {
  return (
    <div className="grafico-item">
      <div className="grafico-header">
        <h3>Egresos Diarios</h3>
        <select
          value={diasSeleccionados}
          onChange={(e) => setDiasSeleccionados(Number(e.target.value))}
          className="dias-selector"
        >
          {[7, 14, 21, 30].map((dias) => (
            <option key={dias} value={dias}>
              {dias} días
            </option>
          ))}
        </select>
      </div>
      <Line data={datos} options={opciones} id="grafico-egresos-diarios" />
    </div>
  );
};

GraficoEgresosDiarios.propTypes = {
  datos: PropTypes.shape({
    labels: PropTypes.arrayOf(PropTypes.string).isRequired,
    datasets: PropTypes.arrayOf(PropTypes.object).isRequired,
  }).isRequired,
  opciones: PropTypes.object.isRequired,
  diasSeleccionados: PropTypes.number.isRequired,
  setDiasSeleccionados: PropTypes.func.isRequired,
};

```
</open_file>

<open_file>
src\components\dashboard\GraficoIngresosDiarios.jsx
```src\components\dashboard\GraficoIngresosDiarios.jsx
import PropTypes from "prop-types";
import { Line } from "react-chartjs-2";

export const GraficoIngresosDiarios = ({
  datos,
  opciones,
  diasSeleccionados,
  setDiasSeleccionados,
}) => {
  return (
    <div className="grafico-item">
      <div className="grafico-header">
        <h3> Diarios</h3>
        <select
          value={diasSeleccionados}
          onChange={(e) => setDiasSeleccionados(Number(e.target.value))}
          className="dias-selector"
        >
          {[7, 14, 21, 30].map((dias) => (
            <option key={dias} value={dias}>
              {dias} días
            </option>
          ))}
        </select>
      </div>
      <Line data={datos} options={opciones} id="grafico-ingresos-diarios" />
    </div>
  );
};

GraficoIngresosDiarios.propTypes = {
  datos: PropTypes.shape({
    labels: PropTypes.arrayOf(PropTypes.string).isRequired,
    datasets: PropTypes.arrayOf(PropTypes.object).isRequired,
  }).isRequired,
  opciones: PropTypes.object.isRequired,
  diasSeleccionados: PropTypes.number.isRequired,
  setDiasSeleccionados: PropTypes.func.isRequired,
};

```
</open_file>

<open_file>
src\components\dashboard\GraficoMediosPago.jsx
```src\components\dashboard\GraficoMediosPago.jsx
import PropTypes from "prop-types";
import { Bar } from "react-chartjs-2";

export const GraficoMediosPago = ({
  datos,
  opciones,
  periodoMediosPago,
  setPeriodoMediosPago,
  periodos,
}) => {
  return (
    <div className="grafico-item">
      <div className="grafico-header">
        <h3>Por Medio de Pago</h3>
        <select
          value={periodoMediosPago}
          onChange={(e) => setPeriodoMediosPago(e.target.value)}
          className="periodo-selector"
        >
          {periodos.map((periodo) => (
            <option key={periodo.valor} value={periodo.valor}>
              {periodo.texto}
            </option>
          ))}
        </select>
      </div>
      <Bar data={datos} options={opciones} id="grafico-medios-pago" />
    </div>
  );
};

GraficoMediosPago.propTypes = {
  datos: PropTypes.shape({
    labels: PropTypes.arrayOf(PropTypes.string).isRequired,
    datasets: PropTypes.arrayOf(PropTypes.object).isRequired,
  }).isRequired,
  opciones: PropTypes.object.isRequired,
  periodoMediosPago: PropTypes.string.isRequired,
  setPeriodoMediosPago: PropTypes.func.isRequired,
  periodos: PropTypes.arrayOf(
    PropTypes.shape({
      valor: PropTypes.string.isRequired,
      texto: PropTypes.string.isRequired,
    })
  ).isRequired,
};

```
</open_file>

<open_file>
src\components\dashboard\GraficoTiposGasto.jsx
```src\components\dashboard\GraficoTiposGasto.jsx
import PropTypes from "prop-types";
import { Bar } from "react-chartjs-2";

export const GraficoTiposGasto = ({
  datos,
  opciones,
  periodoTiposGasto,
  setPeriodoTiposGasto,
  periodos,
}) => {
  return (
    <div className="grafico-item">
      <div className="grafico-header">
        <h3>Por Tipo de Egreso</h3>
        <select
          value={periodoTiposGasto}
          onChange={(e) => setPeriodoTiposGasto(e.target.value)}
          className="periodo-selector"
        >
          {periodos.map((periodo) => (
            <option key={periodo.valor} value={periodo.valor}>
              {periodo.texto}
            </option>
          ))}
        </select>
      </div>
      <Bar data={datos} options={opciones} id="grafico-tipos-gasto" />
    </div>
  );
};

GraficoTiposGasto.propTypes = {
  datos: PropTypes.shape({
    labels: PropTypes.arrayOf(PropTypes.string).isRequired,
    datasets: PropTypes.arrayOf(PropTypes.object).isRequired,
  }).isRequired,
  opciones: PropTypes.object.isRequired,
  periodoTiposGasto: PropTypes.string.isRequired,
  setPeriodoTiposGasto: PropTypes.func.isRequired,
  periodos: PropTypes.arrayOf(
    PropTypes.shape({
      valor: PropTypes.string.isRequired,
      texto: PropTypes.string.isRequired,
    })
  ).isRequired,
};

```
</open_file>

<open_file>
src\components\dashboard\GraficoTotalAcumulado.jsx
```src\components\dashboard\GraficoTotalAcumulado.jsx
import PropTypes from "prop-types";
import { Line } from "react-chartjs-2";

export const GraficoTotalAcumulado = ({
  datos,
  opciones,
  periodoSeleccionado,
  setPeriodoSeleccionado,
  periodos,
}) => {
  return (
    <div className="grafico-item">
      <div className="grafico-header">
        <h3> Acumulados</h3>
        <select
          value={periodoSeleccionado}
          onChange={(e) => setPeriodoSeleccionado(e.target.value)}
          className="periodo-selector"
        >
          {periodos.map((periodo) => (
            <option key={periodo.valor} value={periodo.valor}>
              {periodo.texto}
            </option>
          ))}
        </select>
      </div>
      <Line data={datos} options={opciones} id="grafico-total-acumulado" />
    </div>
  );
};

GraficoTotalAcumulado.propTypes = {
  datos: PropTypes.shape({
    labels: PropTypes.arrayOf(PropTypes.string).isRequired,
    datasets: PropTypes.arrayOf(PropTypes.object).isRequired,
  }).isRequired,
  opciones: PropTypes.object.isRequired,
  periodoSeleccionado: PropTypes.string.isRequired,
  setPeriodoSeleccionado: PropTypes.func.isRequired,
  periodos: PropTypes.arrayOf(
    PropTypes.shape({
      valor: PropTypes.string.isRequired,
      texto: PropTypes.string.isRequired,
    })
  ).isRequired,
};

```
</open_file>

<open_file>
src\components\dashboard\GraficoTotalAcumuladoEgresos.jsx
```src\components\dashboard\GraficoTotalAcumuladoEgresos.jsx
import PropTypes from "prop-types";
import { Line } from "react-chartjs-2";

export const GraficoTotalAcumuladoEgresos = ({
  datos,
  opciones,
  periodoSeleccionado,
  setPeriodoSeleccionado,
  periodos,
}) => {
  return (
    <div className="grafico-item">
      <div className="grafico-header">
        <h3>Egresos Acumulados</h3>
        <select
          value={periodoSeleccionado}
          onChange={(e) => setPeriodoSeleccionado(e.target.value)}
          className="periodo-selector"
        >
          {periodos.map((periodo) => (
            <option key={periodo.valor} value={periodo.valor}>
              {periodo.texto}
            </option>
          ))}
        </select>
      </div>
      <Line
        data={datos}
        options={opciones}
        id="grafico-total-acumulado-egresos"
      />
    </div>
  );
};

GraficoTotalAcumuladoEgresos.propTypes = {
  datos: PropTypes.shape({
    labels: PropTypes.arrayOf(PropTypes.string).isRequired,
    datasets: PropTypes.arrayOf(PropTypes.object).isRequired,
  }).isRequired,
  opciones: PropTypes.object.isRequired,
  periodoSeleccionado: PropTypes.string.isRequired,
  setPeriodoSeleccionado: PropTypes.func.isRequired,
  periodos: PropTypes.arrayOf(
    PropTypes.shape({
      valor: PropTypes.string.isRequired,
      texto: PropTypes.string.isRequired,
    })
  ).isRequired,
};

```
</open_file>

<open_file>
src\components\dashboard\utils\procesadorDatos.js
```src\components\dashboard\utils\procesadorDatos.js
export const datosIniciales = {
  diario: {
    labels: [],
    datasets: [
      {
        label: "Ingresos Diarios",
        data: [],
        borderColor: "rgba(40, 167, 69, 0.8)",
        backgroundColor: "rgba(40, 167, 69, 0.1)",
        tension: 0.4,
        fill: true,
      },
    ],
  },
  total: {
    labels: [],
    datasets: [
      {
        label: "Total Acumulado",
        data: [],
        borderColor: "rgba(40, 167, 69, 0.8)",
        backgroundColor: "rgba(40, 167, 69, 0.1)",
        tension: 0.4,
        fill: true,
      },
    ],
  },
  mediosPago: {
    labels: [],
    datasets: [
      {
        label: "Ingresos por Medio de Pago",
        data: [],
        backgroundColor: ["rgba(40, 167, 69, 0.3)", "rgba(0, 123, 255, 0.3)"],
        borderColor: ["rgb(40, 167, 69)", "rgb(0, 123, 255)"],
        borderWidth: 1,
      },
    ],
  },
};

export const opcionesBase = {
  responsive: true,
  maintainAspectRatio: false,
  interaction: {
    mode: "index",
    intersect: false,
  },
  plugins: {
    legend: {
      display: true,
      position: "top",
      align: "center",
      labels: {
        color: "white",
        padding: 15,
        font: {
          size: 12,
        },
        boxWidth: 12,
        boxHeight: 12,
        usePointStyle: true,
        pointStyle: "rect",
      },
    },
    tooltip: {
      callbacks: {
        label: (context) => {
          const value = context.raw;
          return `${context.dataset.label}: ${new Intl.NumberFormat("es-AR", {
            style: "currency",
            currency: "ARS",
            maximumFractionDigits: 0,
          }).format(value)}`;
        },
      },
    },
  },
  scales: {
    y: {
      beginAtZero: true,
      ticks: {
        color: "white",
        callback: (value) =>
          new Intl.NumberFormat("es-AR", {
            style: "currency",
            currency: "ARS",
            maximumFractionDigits: 0,
          }).format(value),
      },
      grid: { color: "rgba(255, 255, 255, 0.1)" },
    },
    x: {
      ticks: { color: "white" },
      grid: { color: "rgba(255, 255, 255, 0.1)" },
    },
  },
};

export const procesarIngresosPorDia = (ingresos = [], dias = 7) => {
  try {
    const fechaActual = new Date();
    const fechaLimite = new Date();
    fechaLimite.setDate(fechaLimite.getDate() - (dias - 1));
    fechaLimite.setHours(0, 0, 0, 0);

    const todasLasFechas = [];
    for (let d = 0; d < dias; d++) {
      const fecha = new Date(fechaActual);
      fecha.setDate(fecha.getDate() - d);
      todasLasFechas.unshift(fecha.toLocaleDateString("es-AR"));
    }

    const ingresosPorDia = ingresos.reduce((acc, ingreso) => {
      const fechaIngreso = new Date(ingreso.fecha);
      if (fechaIngreso >= fechaLimite && fechaIngreso <= fechaActual) {
        const fechaKey = fechaIngreso.toLocaleDateString("es-AR");
        acc[fechaKey] = (acc[fechaKey] || 0) + ingreso.importe;
      }
      return acc;
    }, {});

    const datosCompletos = todasLasFechas.reduce((acc, fecha) => {
      acc[fecha] = ingresosPorDia[fecha] || 0;
      return acc;
    }, {});

    return {
      labels: Object.keys(datosCompletos),
      datasets: [
        {
          label: "Ingresos Diarios",
          data: Object.values(datosCompletos),
          borderColor: "rgba(40, 167, 69, 0.8)",
          backgroundColor: "rgba(40, 167, 69, 0.1)",
          tension: 0.4,
          fill: true,
        },
      ],
    };
  } catch (error) {
    console.error("Error en procesarIngresosPorDia:", error);
    return datosIniciales.diario;
  }
};

export const procesarIngresosTotal = (ingresos = [], periodo = "mensual") => {
  try {
    let fechaInicio = new Date();

    switch (periodo) {
      case "mensual":
        fechaInicio.setMonth(fechaInicio.getMonth() - 1);
        break;
      case "trimestral":
        fechaInicio.setMonth(fechaInicio.getMonth() - 3);
        break;
      case "semestral":
        fechaInicio.setMonth(fechaInicio.getMonth() - 6);
        break;
      case "anual":
        fechaInicio.setFullYear(fechaInicio.getFullYear() - 1);
        break;
      case "historico":
        fechaInicio = new Date(0);
        break;
      default:
        fechaInicio.setMonth(fechaInicio.getMonth() - 1);
    }

    const ingresosFiltrados = ingresos
      .filter((ingreso) => new Date(ingreso.fecha) >= fechaInicio)
      .sort((a, b) => new Date(a.fecha) - new Date(b.fecha));

    let acumulado = 0;
    const datosAcumulados = ingresosFiltrados.map((ingreso) => {
      acumulado += ingreso.importe;
      return {
        fecha: new Date(ingreso.fecha).toLocaleDateString("es-AR"),
        total: acumulado,
      };
    });

    return {
      labels: datosAcumulados.map((dato) => dato.fecha),
      datasets: [
        {
          label: "Total Acumulado",
          data: datosAcumulados.map((dato) => dato.total),
          borderColor: "rgba(40, 167, 69, 0.8)",
          backgroundColor: "rgba(40, 167, 69, 0.1)",
          tension: 0.4,
          fill: true,
        },
      ],
    };
  } catch (error) {
    console.error("Error en procesarIngresosTotal:", error);
    return datosIniciales.total;
  }
};

export const procesarIngresosPorMedio = (
  ingresos = [],
  periodo = "mensual"
) => {
  try {
    let fechaInicio = new Date();

    switch (periodo) {
      case "mensual":
        fechaInicio.setMonth(fechaInicio.getMonth() - 1);
        break;
      case "trimestral":
        fechaInicio.setMonth(fechaInicio.getMonth() - 3);
        break;
      case "semestral":
        fechaInicio.setMonth(fechaInicio.getMonth() - 6);
        break;
      case "anual":
        fechaInicio.setFullYear(fechaInicio.getFullYear() - 1);
        break;
      case "historico":
        fechaInicio = new Date(0);
        break;
      default:
        fechaInicio.setMonth(fechaInicio.getMonth() - 1);
    }

    const ingresosFiltrados = ingresos.filter(
      (ingreso) => new Date(ingreso.fecha) >= fechaInicio
    );

    const mediosPago = ingresosFiltrados.reduce(
      (acc, ingreso) => {
        if (ingreso.categoria?.nombre?.toLowerCase() === "efectivo") {
          acc.efectivo += ingreso.importe;
        } else {
          acc.electronico += ingreso.importe;
        }
        return acc;
      },
      { efectivo: 0, electronico: 0 }
    );

    return {
      labels: ["Efectivo", "Electrónico"],
      datasets: [
        {
          label: "Ingresos por Medio de Pago",
          data: [mediosPago.efectivo, mediosPago.electronico],
          backgroundColor: ["rgba(40, 167, 69, 0.3)", "rgba(0, 123, 255, 0.3)"],
          borderColor: ["rgb(40, 167, 69)", "rgb(0, 123, 255)"],
          borderWidth: 1,
        },
      ],
    };
  } catch (error) {
    console.error("Error en procesarDatosIngresos:", error);
    return datosIniciales.mediosPago;
  }
};

```
</open_file>

<open_file>
src\components\dashboard\utils\procesadorDatosComparativo.js
```src\components\dashboard\utils\procesadorDatosComparativo.js
import { format } from "date-fns";
import { es } from "date-fns/locale";

export const procesarDatosComparativos = (
  ingresos = [],
  egresos = [],
  dias = 30
) => {
  try {
    const fechaActual = new Date();
    const fechaLimite = new Date();
    fechaLimite.setDate(fechaLimite.getDate() - (dias - 1));
    fechaLimite.setHours(0, 0, 0, 0);

    // Generar array de fechas
    const todasLasFechas = [];
    for (let d = 0; d < dias; d++) {
      const fecha = new Date(fechaActual);
      fecha.setDate(fecha.getDate() - d);
      todasLasFechas.unshift(format(fecha, "dd/MM/yy", { locale: es }));
    }

    // Procesar ingresos y egresos por día
    const ingresosPorDia = procesarMovimientosPorDia(
      ingresos,
      fechaLimite,
      fechaActual
    );
    const egresosPorDia = procesarMovimientosPorDia(
      egresos,
      fechaLimite,
      fechaActual
    );

    // Completar datos para todas las fechas
    const datosCompletos = todasLasFechas.reduce(
      (acc, fecha) => {
        acc.ingresos[fecha] = ingresosPorDia[fecha] || 0;
        acc.egresos[fecha] = egresosPorDia[fecha] || 0;
        acc.balance[fecha] =
          (ingresosPorDia[fecha] || 0) - (egresosPorDia[fecha] || 0);
        return acc;
      },
      { ingresos: {}, egresos: {}, balance: {} }
    );

    return {
      comparativoDiario: generarDatosComparativos(
        datosCompletos,
        todasLasFechas
      ),
      acumulados: generarDatosAcumulados(datosCompletos, todasLasFechas),
      balanceNeto: generarDatosBalance(datosCompletos, todasLasFechas),
    };
  } catch (error) {
    console.error("Error en procesarDatosComparativos:", error);
    return datosInicialesComparativos;
  }
};

const procesarMovimientosPorDia = (movimientos, fechaLimite, fechaActual) => {
  return movimientos.reduce((acc, mov) => {
    const fechaMov = new Date(mov.fecha);
    if (fechaMov >= fechaLimite && fechaMov <= fechaActual) {
      const fechaKey = format(fechaMov, "dd/MM/yy", { locale: es });
      acc[fechaKey] = (acc[fechaKey] || 0) + mov.importe;
    }
    return acc;
  }, {});
};

const generarDatosComparativos = (datos, fechas) => ({
  labels: fechas,
  datasets: [
    {
      label: "Ingresos",
      data: fechas.map((fecha) => datos.ingresos[fecha]),
      borderColor: "rgba(40, 167, 69, 0.8)",
      backgroundColor: (context) => {
        const ingresos = context.dataset.data[context.dataIndex] || 0;
        const gastos =
          context.chart.data.datasets[1].data[context.dataIndex] || 0;
        return ingresos > gastos
          ? "rgba(0, 123, 255, 0.1)"
          : "rgba(40, 167, 69, 0.1)";
      },
      tension: 0.4,
      fill: true,
    },
    {
      label: "Egresos",
      data: fechas.map((fecha) => datos.egresos[fecha]),
      borderColor: "rgba(128, 128, 128, 0.8)",
      backgroundColor: (context) => {
        const gastos = context.dataset.data[context.dataIndex] || 0;
        const ingresos =
          context.chart.data.datasets[0].data[context.dataIndex] || 0;
        return gastos > ingresos
          ? "rgba(220, 53, 69, 0.1)"
          : "rgba(128, 128, 128, 0.1)";
      },
      tension: 0.4,
      fill: true,
    },
  ],
});

const generarDatosAcumulados = (datos, fechas) => ({
  labels: fechas,
  datasets: [
    {
      label: "Ingresos Acumulados",
      data: fechas.map((fecha, index) => {
        let acumuladoIngresos = 0;
        for (let i = 0; i <= index; i++) {
          acumuladoIngresos += datos.ingresos[fechas[i]] || 0;
        }
        return acumuladoIngresos;
      }),
      borderColor: "rgba(40, 167, 69, 0.8)",
      backgroundColor: (context) => {
        const ingresos = context.dataset.data[context.dataIndex] || 0;
        const gastos =
          context.chart.data.datasets[1].data[context.dataIndex] || 0;
        return ingresos > gastos
          ? "rgba(0, 123, 255, 0.1)"
          : "rgba(40, 167, 69, 0.1)";
      },
      tension: 0.4,
      fill: true,
    },
    {
      label: "Egresos Acumulados",
      data: fechas.map((fecha, index) => {
        let acumuladoEgresos = 0;
        for (let i = 0; i <= index; i++) {
          acumuladoEgresos += datos.egresos[fechas[i]] || 0;
        }
        return acumuladoEgresos;
      }),
      borderColor: "rgba(128, 128, 128, 0.8)",
      backgroundColor: (context) => {
        const gastos = context.dataset.data[context.dataIndex] || 0;
        const ingresos =
          context.chart.data.datasets[0].data[context.dataIndex] || 0;
        return gastos > ingresos
          ? "rgba(220, 53, 69, 0.1)"
          : "rgba(128, 128, 128, 0.1)";
      },
      tension: 0.4,
      fill: true,
    },
  ],
});

const generarDatosBalance = (datos, fechas) => ({
  labels: fechas,
  datasets: [
    {
      label: "Balance Neto",
      data: fechas.map((fecha) => datos.balance[fecha]),
      borderColor: "rgba(0, 123, 255, 0.8)",
      backgroundColor: "rgba(0, 123, 255, 0.1)",
      tension: 0.4,
      fill: {
        target: {
          value: 0,
        },
        above: "rgba(0, 123, 255, 0.1)",
        below: "rgba(128, 128, 128, 0.1)",
      },
    },
  ],
});

export const opcionesComparativas = {
  responsive: true,
  maintainAspectRatio: false,
  interaction: {
    mode: "index",
    intersect: false,
  },
  plugins: {
    legend: {
      display: true,
      position: "top",
      align: "center",
      labels: {
        color: "white",
        padding: 15,
        font: {
          size: 12,
        },
        boxWidth: 12,
        boxHeight: 12,
        usePointStyle: true,
        pointStyle: "rect",
      },
    },
    tooltip: {
      callbacks: {
        label: (context) => {
          const value = context.raw;
          return `${context.dataset.label}: ${new Intl.NumberFormat("es-AR", {
            style: "currency",
            currency: "ARS",
            maximumFractionDigits: 0,
          }).format(value)}`;
        },
      },
    },
  },
  scales: {
    y: {
      beginAtZero: true,
      ticks: {
        color: "white",
        callback: (value) =>
          new Intl.NumberFormat("es-AR", {
            style: "currency",
            currency: "ARS",
            maximumFractionDigits: 0,
          }).format(value),
      },
      grid: { color: "rgba(255, 255, 255, 0.1)" },
    },
    x: {
      ticks: { color: "white" },
      grid: { color: "rgba(255, 255, 255, 0.1)" },
    },
  },
};

export const datosInicialesComparativos = {
  comparativoDiario: {
    labels: [],
    datasets: [
      {
        label: "Ingresos",
        data: [],
        borderColor: "rgba(40, 167, 69, 0.8)",
        backgroundColor: "rgba(40, 167, 69, 0.1)",
        tension: 0.4,
        fill: true,
      },
      {
        label: "Gastos",
        data: [],
        borderColor: "rgba(128, 128, 128, 0.8)",
        backgroundColor: "rgba(128, 128, 128, 0.1)",
        tension: 0.4,
        fill: true,
      },
    ],
  },
  acumulados: {
    labels: [],
    datasets: [
      {
        label: "Ingresos Acumulados",
        data: [],
        borderColor: "rgba(40, 167, 69, 0.8)",
        backgroundColor: "rgba(40, 167, 69, 0.1)",
        tension: 0.4,
        fill: true,
      },
      {
        label: "Gastos Acumulados",
        data: [],
        borderColor: "rgba(128, 128, 128, 0.8)",
        backgroundColor: "rgba(128, 128, 128, 0.1)",
        tension: 0.4,
        fill: true,
      },
    ],
  },
  balanceNeto: {
    labels: [],
    datasets: [
      {
        label: "Balance Neto",
        data: [],
        borderColor: "rgba(0, 123, 255, 0.8)",
        backgroundColor: "rgba(40, 167, 69, 0.1)",
        tension: 0.4,
        fill: true,
      },
    ],
  },
};

```
</open_file>

<open_file>
src\components\dashboard\utils\procesadorDatosEgresos.js
```src\components\dashboard\utils\procesadorDatosEgresos.js
export const procesarEgresosPorDia = (egresos = [], dias = 7) => {
  try {
    const fechaActual = new Date();
    const fechaLimite = new Date();
    fechaLimite.setDate(fechaLimite.getDate() - (dias - 1));
    fechaLimite.setHours(0, 0, 0, 0);

    const todasLasFechas = [];
    for (let d = 0; d < dias; d++) {
      const fecha = new Date(fechaActual);
      fecha.setDate(fecha.getDate() - d);
      todasLasFechas.unshift(fecha.toLocaleDateString("es-AR"));
    }

    const egresosPorDia = egresos.reduce((acc, egreso) => {
      const fechaEgreso = new Date(egreso.fecha);
      if (fechaEgreso >= fechaLimite && fechaEgreso <= fechaActual) {
        const fechaKey = fechaEgreso.toLocaleDateString("es-AR");
        acc[fechaKey] = (acc[fechaKey] || 0) + egreso.importe;
      }
      return acc;
    }, {});

    const datosCompletos = todasLasFechas.reduce((acc, fecha) => {
      acc[fecha] = egresosPorDia[fecha] || 0;
      return acc;
    }, {});

    return {
      labels: Object.keys(datosCompletos),
      datasets: [
        {
          label: "Egresos Diarios",
          data: Object.values(datosCompletos),
          borderColor: "rgba(128, 128, 128, 0.45)", // Gris para gastos
          backgroundColor: "rgba(128, 128, 128, 0.2)",
          tension: 0.4,
          fill: true,
        },
      ],
    };
  } catch (error) {
    console.error("Error en procesarEgresosPorDia:", error);
    return datosInicialesEgresos.diario;
  }
};

export const procesarEgresosTotal = (egresos = [], periodo = "mensual") => {
  try {
    let fechaInicio = new Date();

    switch (periodo) {
      case "mensual":
        fechaInicio.setMonth(fechaInicio.getMonth() - 1);
        break;
      case "trimestral":
        fechaInicio.setMonth(fechaInicio.getMonth() - 3);
        break;
      case "semestral":
        fechaInicio.setMonth(fechaInicio.getMonth() - 6);
        break;
      case "anual":
        fechaInicio.setFullYear(fechaInicio.getFullYear() - 1);
        break;
      case "historico":
        fechaInicio = new Date(0);
        break;
      default:
        fechaInicio.setMonth(fechaInicio.getMonth() - 1);
    }

    const egresosFiltrados = egresos
      .filter((egreso) => new Date(egreso.fecha) >= fechaInicio)
      .sort((a, b) => new Date(a.fecha) - new Date(b.fecha));

    let acumulado = 0;
    const datosAcumulados = egresosFiltrados.map((egreso) => {
      acumulado += egreso.importe;
      return {
        fecha: new Date(egreso.fecha).toLocaleDateString("es-AR"),
        total: acumulado,
      };
    });

    return {
      labels: datosAcumulados.map((dato) => dato.fecha),
      datasets: [
        {
          label: "Total Acumulado",
          data: datosAcumulados.map((dato) => dato.total),
          borderColor: "rgba(128, 128, 128, 0.45)", // Gris para gastos
          backgroundColor: "rgba(128, 128, 128, 0.2)",
          tension: 0.4,
          fill: true,
        },
      ],
    };
  } catch (error) {
    console.error("Error en procesarEgresosTotal:", error);
    return datosInicialesEgresos.total;
  }
};

export const procesarEgresosPorTipo = (egresos = [], periodo = "mensual") => {
  try {
    let fechaInicio = new Date();

    switch (periodo) {
      case "mensual":
        fechaInicio.setMonth(fechaInicio.getMonth() - 1);
        break;
      case "trimestral":
        fechaInicio.setMonth(fechaInicio.getMonth() - 3);
        break;
      case "semestral":
        fechaInicio.setMonth(fechaInicio.getMonth() - 6);
        break;
      case "anual":
        fechaInicio.setFullYear(fechaInicio.getFullYear() - 1);
        break;
      case "historico":
        fechaInicio = new Date(0);
        break;
      default:
        fechaInicio.setMonth(fechaInicio.getMonth() - 1);
    }

    const egresosFiltrados = egresos.filter(
      (egreso) => new Date(egreso.fecha) >= fechaInicio
    );

    const egresosPorTipo = egresosFiltrados.reduce((acc, egreso) => {
      const tipo = egreso.categoria.nombre;
      acc[tipo] = (acc[tipo] || 0) + egreso.importe;
      return acc;
    }, {});

    // Ordenar por monto de mayor a menor
    const tiposOrdenados = Object.entries(egresosPorTipo)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 5); // Tomar los 5 tipos con más gastos

    return {
      labels: tiposOrdenados.map(([tipo]) => tipo),
      datasets: [
        {
          label: "Egresos por Tipo",
          data: tiposOrdenados.map(([, monto]) => monto),
          backgroundColor: [
            "rgba(128, 128, 128, 0.45)",
            "rgba(169, 169, 169, 0.45)",
            "rgba(23, 162, 184, 0.45)",
            "rgba(40, 167, 69, 0.45)",
            "rgba(111, 66, 193, 0.45)",
          ],
          borderColor: [
            "rgb(128, 128, 128)",
            "rgb(169, 169, 169)",
            "rgb(23, 162, 184)",
            "rgb(40, 167, 69)",
            "rgb(111, 66, 193)",
          ],
          borderWidth: 1,
        },
      ],
    };
  } catch (error) {
    console.error("Error en procesarEgresosPorTipo:", error);
    return datosInicialesEgresos.tiposGasto;
  }
};

export const opcionesBase = {
  responsive: true,
  maintainAspectRatio: false,
  animation: {
    duration: 2000,
    easing: "easeInOutQuart",
    delay: (context) => context.dataIndex * 100,
  },
  plugins: {
    legend: {
      display: true,
      labels: {
        color: "white",
        usePointStyle: true,
        pointStyle: "rect",
        boxWidth: 10,
        boxHeight: 10,
      },
    },
  },
  scales: {
    y: {
      ticks: { color: "white" },
      grid: { color: "rgba(255, 255, 255, 0.1)" },
    },
    x: {
      ticks: { color: "white" },
      grid: { color: "rgba(255, 255, 255, 0.1)" },
    },
  },
};

export const datosInicialesEgresos = {
  diario: {
    labels: [],
    datasets: [
      {
        label: "Egresos Diarios",
        data: [],
        borderColor: "rgba(128, 128, 128, 0.45)",
        backgroundColor: "rgba(128, 128, 128, 0.2)",
        tension: 0.4,
        fill: true,
      },
    ],
  },
  total: {
    labels: [],
    datasets: [
      {
        label: "Total Acumulado",
        data: [],
        borderColor: "rgba(128, 128, 128, 0.45)",
        backgroundColor: "rgba(128, 128, 128, 0.2)",
        tension: 0.4,
        fill: true,
      },
    ],
  },
  tiposGasto: {
    labels: [],
    datasets: [
      {
        label: "Egresos por Tipo",
        data: [],
        backgroundColor: [
          "rgba(128, 128, 128, 0.45)",
          "rgba(169, 169, 169, 0.45)",
          "rgba(23, 162, 184, 0.45)",
          "rgba(40, 167, 69, 0.45)",
          "rgba(111, 66, 193, 0.45)",
        ],
        borderColor: [
          "rgb(128, 128, 128)",
          "rgb(169, 169, 169)",
          "rgb(23, 162, 184)",
          "rgb(40, 167, 69)",
          "rgb(111, 66, 193)",
        ],
        borderWidth: 1,
      },
    ],
  },
};

export const procesarDatosEgresos = (egresos = [], periodo = "mensual") => {
  try {
    let fechaInicio = new Date();

    switch (periodo) {
      case "mensual":
        fechaInicio.setMonth(fechaInicio.getMonth() - 1);
        break;
      case "trimestral":
        fechaInicio.setMonth(fechaInicio.getMonth() - 3);
        break;
      case "semestral":
        fechaInicio.setMonth(fechaInicio.getMonth() - 6);
        break;
      case "anual":
        fechaInicio.setFullYear(fechaInicio.getFullYear() - 1);
        break;
      case "historico":
        fechaInicio = new Date(0);
        break;
      default:
        fechaInicio.setMonth(fechaInicio.getMonth() - 1);
    }

    const egresosFiltrados = egresos.filter(
      (egreso) => new Date(egreso.fecha) >= fechaInicio
    );

    const mediosPago = egresosFiltrados.reduce(
      (acc, egreso) => {
        const metodoPago = egreso.categoria.nombre.toLowerCase();
        if (metodoPago === "efectivo") {
          acc.efectivo += egreso.importe;
        } else {
          acc.electronico += egreso.importe;
        }
        return acc;
      },
      { efectivo: 0, electronico: 0 }
    );

    return {
      labels: ["Efectivo", "Electrónico"],
      datasets: [
        {
          label: "Egresos por Medio de Pago",
          data: [mediosPago.efectivo, mediosPago.electronico],
          backgroundColor: [
            "rgba(128, 128, 128, 0.3)", // Gris para Efectivo, más transparente
            "rgba(169, 169, 169, 0.3)", // Gris más claro para Electrónico, más transparente
          ],
          borderColor: ["rgb(128, 128, 128)", "rgb(169, 169, 169)"],
          borderWidth: 1,
        },
      ],
    };
  } catch (error) {
    console.error("Error en procesarDatosEgresos:", error);
    return datosInicialesEgresos.tiposGasto;
  }
};

```
</open_file>

<open_file>
src\components\egresos\categorias\FormFields.jsx
```src\components\egresos\categorias\FormFields.jsx
import PropTypes from "prop-types";
import { useState, useEffect, useCallback } from "react";
import "./FormFields.scss";

export const FormFields = ({ formData, handleChange, categoriasEgresos }) => {
  const [siguienteCodigo, setSiguienteCodigo] = useState("");
  const [categoriasNivel, setCategoriasNivel] = useState([]);
  const [rutaNavegacion, setRutaNavegacion] = useState([]);

  const actualizarCodigo = useCallback(
    (nuevoCodigo) => {
      setSiguienteCodigo(nuevoCodigo);
      if (formData.codigo !== nuevoCodigo) {
        handleChange({
          target: {
            name: "codigo",
            value: nuevoCodigo,
          },
        });
      }
    },
    [formData.codigo, handleChange]
  );

  useEffect(() => {
    // Actualizar ruta de navegación
    if (formData.categoriaPadre) {
      const ruta = [];
      let categoriaActual = categoriasEgresos.find(
        (c) => c.codigo === formData.categoriaPadre
      );

      while (categoriaActual) {
        ruta.unshift(categoriaActual);
        categoriaActual = categoriasEgresos.find(
          (c) => c.codigo === categoriaActual.categoriaPadre
        );
      }

      setRutaNavegacion(ruta);
    } else {
      setRutaNavegacion([]);
    }

    // Generar siguiente código
    if (formData.categoriaPadre) {
      const categoriaPadre = categoriasEgresos.find(
        (c) => c.codigo === formData.categoriaPadre
      );
      if (categoriaPadre) {
        const subcategorias = categoriasEgresos.filter(
          (c) => c.categoriaPadre === formData.categoriaPadre
        );
        const ultimoNumero =
          subcategorias.length > 0
            ? Math.max(
                ...subcategorias.map((c) => parseInt(c.codigo.split(".").pop()))
              )
            : 0;
        const nuevoCodigo = `${categoriaPadre.codigo}.${ultimoNumero + 1}`;
        actualizarCodigo(nuevoCodigo);
      }
    } else {
      const categoriasNivel1 = categoriasEgresos.filter(
        (c) => !c.categoriaPadre
      );
      const ultimoNumero =
        categoriasNivel1.length > 0
          ? Math.max(...categoriasNivel1.map((c) => parseInt(c.codigo)))
          : 0;
      const nuevoCodigo = `${ultimoNumero + 1}`;
      actualizarCodigo(nuevoCodigo);
    }

    // Actualizar lista de categorías del nivel actual
    const categoriasDelNivel = categoriasEgresos.filter((c) =>
      formData.categoriaPadre
        ? c.categoriaPadre === formData.categoriaPadre
        : !c.categoriaPadre
    );
    setCategoriasNivel(categoriasDelNivel);
  }, [formData.categoriaPadre, categoriasEgresos, actualizarCodigo]);

  const handleAgregarSubcategoria = (categoria) => {
    handleChange({
      target: {
        name: "categoriaPadre",
        value: categoria.codigo,
      },
    });
  };

  const handleNavegar = (categoria) => {
    handleChange({
      target: {
        name: "categoriaPadre",
        value: categoria.codigo,
      },
    });
  };

  const mostrarSubcategorias = (categoria) => {
    const subcategorias = categoriasEgresos.filter(
      (c) => c.categoriaPadre === categoria.codigo
    );
    return (
      subcategorias.length > 0 && (
        <ul className="lista-subcategorias">
          {subcategorias.map((subcat) => (
            <li key={subcat._id} className="subcategoria-item">
              <div className="categoria-info">
                <span className="categoria-codigo">{subcat.codigo}</span>
                <span className="categoria-nombre">{subcat.nombre}</span>
              </div>
              <div className="categoria-acciones">
                <button
                  type="button"
                  onClick={() => handleNavegar(subcat)}
                  className="btn-navegar"
                >
                  Ver subcategorías
                </button>
                <button
                  type="button"
                  onClick={() => handleAgregarSubcategoria(subcat)}
                  className="btn-agregar-subcategoria"
                >
                  + Agregar Subcategoría
                </button>
              </div>
            </li>
          ))}
        </ul>
      )
    );
  };

  return (
    <div className="form-fields-container">
      {rutaNavegacion.length > 0 && (
        <div className="ruta-navegacion">
          <button
            type="button"
            onClick={() =>
              handleChange({
                target: { name: "categoriaPadre", value: "" },
              })
            }
            className="btn-navegacion"
          >
            Inicio
          </button>
          {rutaNavegacion.map((cat) => (
            <span key={cat._id}>
              <span className="separador-ruta">›</span>
              <button
                type="button"
                onClick={() => handleNavegar(cat)}
                className="btn-navegacion"
              >
                {cat.nombre}
              </button>
            </span>
          ))}
        </div>
      )}

      <div className="form-group">
        <input
          type="text"
          name="nombre"
          value={formData.nombre}
          onChange={handleChange}
          className="form-input"
          placeholder="Nombre de la categoría"
          required
        />
        <div className="codigo-sugerido">Código: {siguienteCodigo}</div>
      </div>

      {categoriasNivel.length > 0 && (
        <div className="categorias-nivel">
          <ul className="lista-categorias">
            {categoriasNivel.map((categoria) => (
              <li key={categoria._id} className="categoria-item">
                <div className="categoria-info">
                  <span className="categoria-codigo">{categoria.codigo}</span>
                  <span className="categoria-nombre">{categoria.nombre}</span>
                </div>
                <div className="categoria-acciones">
                  <button
                    type="button"
                    onClick={() => handleAgregarSubcategoria(categoria)}
                    className="btn-agregar-subcategoria"
                  >
                    + Agregar Subcategoría
                  </button>
                </div>
                {mostrarSubcategorias(categoria)}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

FormFields.propTypes = {
  formData: PropTypes.shape({
    codigo: PropTypes.string,
    nombre: PropTypes.string.isRequired,
    nivel: PropTypes.number,
    categoriaPadre: PropTypes.string,
  }).isRequired,
  handleChange: PropTypes.func.isRequired,
  categoriasEgresos: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired,
      categoriaPadre: PropTypes.string,
    })
  ).isRequired,
};

```
</open_file>

<open_file>
src\components\egresos\categorias\FormFields.scss
```src\components\egresos\categorias\FormFields.scss
@use "../../../styles/variables" as var;

.form-fields-container {
  width: 100%;
}

.form-group {
  margin-bottom: 1rem;
}

.form-input {
  width: 100%;
  padding: 8px;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 4px;
  background-color: white;
  color: black;
  font-size: 1rem;

  &:focus {
    outline: none;
    border-color: var.$color-principal-estudio;
  }
}

.codigo-sugerido {
  color: var.$color-principal-cliente;
  font-size: 0.9rem;
  margin-top: 0.5rem;
}

.ruta-navegacion {
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

.btn-navegacion {
  background: none;
  border: none;
  color: var.$color-principal-cliente;
  cursor: pointer;
  padding: 4px 8px;

  &:hover {
    text-decoration: underline;
  }
}

.separador-ruta {
  color: var.$color-principal-cliente;
  margin: 0 8px;
}

.lista-categorias {
  list-style: none;
  padding: 0;
}

.categoria-item {
  margin-bottom: 1rem;
  padding: 0.5rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 4px;
}

.categoria-info {
  display: flex;
  align-items: center;
  margin-bottom: 0.5rem;
}

.categoria-codigo {
  color: var.$color-principal-cliente;
  margin-right: 1rem;
}

.categoria-nombre {
  color: white;
}

.categoria-acciones {
  display: flex;
  gap: 1rem;
}

.btn-agregar-subcategoria {
  background: none;
  border: 1px solid var.$color-principal-cliente;
  color: var.$color-principal-cliente;
  padding: 4px 12px;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background-color: var.$color-principal-cliente;
    color: black;
  }
}

.btn-navegar {
  background: none;
  border: 1px solid var.$color-principal-estudio;
  color: var.$color-principal-estudio;
  padding: 4px 12px;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background-color: var.$color-principal-estudio;
    color: black;
  }
}

.lista-subcategorias {
  margin-left: 20px;
  margin-top: 10px;
  list-style: none;
  padding: 0;
}

.subcategoria-item {
  margin-bottom: 0.5rem;
  padding: 0.5rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 4px;
}

```
</open_file>

<open_file>
src\components\egresos\categorias\FormularioCategoriaEgreso.scss
```src\components\egresos\categorias\FormularioCategoriaEgreso.scss
@use "../../../styles/variables" as var;

.formulario-categoria-container {
  max-width: 600px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 8px;
  background-color: var.$color-fondo-estudio;
}

.formulario-categoria {
  padding: 20px;
  background-color: transparent !important;
  box-shadow: none !important;
  text-align: center !important;
}

.icono-centrado {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.icono-agregar {
  font-size: 30px;
  color: var.$color-principal-estudio;
  cursor: pointer;
  transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;

  &:hover {
    color: white;
    transform: scale(1.3);
  }

  &:active {
    transform: scale(1);
  }
}

.input-container {
  width: 100%;

  input {
    width: 100%;
    padding: 8px;
    border: 1px solid var.$color-principal-cliente;
    border-radius: 4px;
    background-color: white !important;
    color: black !important;
    font-size: 1rem;

    &:focus {
      outline: none;
      border-color: var.$color-principal-estudio;
    }
  }
}

.alerta-error {
  color: #c62828 !important;
  border-radius: 8px !important;
  margin-bottom: 16px !important;
  position: relative !important;
  z-index: 2 !important;
  background-color: var.$color-fondo-estudio !important;
  border: 1px solid #c62828 !important;
}

.alerta-success {
  color: #2e7d32 !important;
  border-radius: 8px !important;
  margin-bottom: 16px !important;
  position: relative !important;
  z-index: 2 !important;
  background-color: black !important;
  border: 1px solid #2e7d32 !important;
}

```
</open_file>

<open_file>
src\components\egresos\categorias\FormularioCategoriaEgresos.jsx
```src\components\egresos\categorias\FormularioCategoriaEgresos.jsx
import { useState } from "react";
import PropTypes from "prop-types";
import { Box, Alert } from "@mui/material";
import { FormFields } from "./FormFields";
import { createCategoriaEgreso } from "../../../services/categoriaEgresosService";
import { INITIAL_FORM_STATE } from "../../../config/constants";
import { FaSave } from "react-icons/fa";
import "./FormularioCategoriaEgreso.scss";

export const FormularioCategoriaEgresos = ({
  onCategoriaCreada,
  categorias,
}) => {
  const [formData, setFormData] = useState(INITIAL_FORM_STATE);
  const [error, setError] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      await createCategoriaEgreso(formData);
      setFormData(INITIAL_FORM_STATE);
      onCategoriaCreada();
    } catch (err) {
      setError(err.message);
    }
  };

  const handleChange = (e) => {
    const value =
      e.target.name === "nivel" ? Number(e.target.value) : e.target.value;
    setFormData({
      ...formData,
      [e.target.name]: value,
    });
  };

  return (
    <Box
      component="form"
      onSubmit={handleSubmit}
      className="formulario-categoria"
    >
      {error && (
        <Alert severity="error" className="alerta-error">
          {error}
        </Alert>
      )}

      <div className="icono-centrado">
        <FaSave
          className="icono-agregar"
          onClick={handleSubmit}
          title="Guardar categoría"
        />
      </div>

      <div className="input-container">
        <FormFields
          formData={formData}
          handleChange={handleChange}
          categoriasEgresos={categorias}
        />
      </div>
    </Box>
  );
};

FormularioCategoriaEgresos.propTypes = {
  onCategoriaCreada: PropTypes.func.isRequired,
  categorias: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired,
      categoriaPadre: PropTypes.string,
    })
  ),
};

```
</open_file>

<open_file>
src\components\egresos\categorias\FormularioCategoriaEgresos.scss
```src\components\egresos\categorias\FormularioCategoriaEgresos.scss
@use "../../../styles/variables" as var;

.formulario-categoria {
  padding: 20px;
  background-color: transparent !important;
  box-shadow: none !important;
  text-align: center !important;
}

.icono-centrado {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.icono-agregar {
  font-size: 30px;
  color: var.$color-principal-estudio;
  cursor: pointer;
  transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;

  &:hover {
    color: white;
    transform: scale(1.3);
  }

  &:active {
    transform: scale(1);
  }
}

.input-container {
  width: 100%;
}

.alerta-error {
  color: #c62828 !important;
  border-radius: 8px !important;
  margin-bottom: 16px !important;
  position: relative !important;
  z-index: 2 !important;
  background-color: var.$color-fondo-estudio !important;
  border: 1px solid #c62828 !important;
}

.alerta-success {
  color: #2e7d32 !important;
  border-radius: 8px !important;
  margin-bottom: 16px !important;
  position: relative !important;
  z-index: 2 !important;
  background-color: black !important;
  border: 1px solid #2e7d32 !important;
}

```
</open_file>

<open_file>
src\components\egresos\categorias\GestionCategoriasEgresos.jsx
```src\components\egresos\categorias\GestionCategoriasEgresos.jsx
import { useState, useEffect } from "react";
import { Box, Paper, Alert, Snackbar } from "@mui/material";
import { FormularioCategoriaEgresos } from "./FormularioCategoriaEgresos";
import { ListaCategorias } from "./ListaCategorias";
import logo from "../../../assets/odontomed512_512.png";
import logo1 from "../../../assets/odontomedBigLogo.png";
import "./GestionCategoriasEgresos.scss";
import { API_BASE_URL } from "../../../config/constants";

export const GestionCategoriasEgresos = () => {
  const [categorias, setCategorias] = useState([]);
  const [notification, setNotification] = useState({
    open: false,
    message: "",
    severity: "success",
  });

  const fetchCategorias = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/categorias-egresos`);
      const data = await response.json();
      setCategorias(data);
    } catch (error) {
      console.error("Error al cargar categorías:", error);
      setNotification({
        open: true,
        message: "Error al cargar las categorías",
        severity: "error",
      });
    }
  };

  useEffect(() => {
    fetchCategorias();
  }, []);

  const handleCategoriaCreada = async () => {
    await fetchCategorias();
    setNotification({
      open: true,
      message: "Categoría creada exitosamente",
      severity: "success",
    });
  };

  const handleCloseNotification = () => {
    setNotification({ ...notification, open: false });
  };

  return (
    <>
      <div className="pagina-egresos-container-1">
        <img src={logo} alt="Logo" className="egresos-logo" />
        <img src={logo1} alt="Logo1" className="egresos-logo-1" />
        <p className="egresos-titulo">Registro de categorías de egresos</p>
      </div>
      <Box className="categorias-container">
        <Paper className="formulario-categoria">
          <FormularioCategoriaEgresos
            onCategoriaCreada={handleCategoriaCreada}
            categorias={categorias}
          />
        </Paper>

        <Paper className="tabla-categorias">
          <ListaCategorias categorias={categorias} />
        </Paper>

        <Snackbar
          open={notification.open}
          autoHideDuration={6000}
          onClose={handleCloseNotification}
          anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
          className="notification"
        >
          <Alert
            onClose={handleCloseNotification}
            severity={notification.severity}
            className={`alerta-${notification.severity}`}
          >
            {notification.message}
          </Alert>
        </Snackbar>
      </Box>
    </>
  );
};

```
</open_file>

<open_file>
src\components\egresos\categorias\GestionCategoriasEgresos.scss
```src\components\egresos\categorias\GestionCategoriasEgresos.scss
@use "../../../styles/variables" as var;

.pagina-egresos-container-1 {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  text-align: center;
  margin-top: 20px;
}

.notification {
  position: fixed;
  bottom: 24px;
  right: 24px;
  z-index: 1000;
}

```
</open_file>

<open_file>
src\components\egresos\categorias\ListaCategorias.jsx
```src\components\egresos\categorias\ListaCategorias.jsx
import { useCategoriasEgresos } from "../../../hooks/useCategoriasEgresos";
import "./ListaCategorias.scss";

export const ListaCategorias = () => {
  const { categorias } = useCategoriasEgresos();

  return (
    <div className="lista-categorias-wrapper">
      <h2 className="lista-categorias-titulo">
        Categorías de Egresos Existentes
      </h2>
      <table className="tabla-categorias">
        <thead>
          <tr>
            <th className="tabla-header">Código</th>
            <th className="tabla-header">Nombre</th>
            <th className="tabla-header">Categoría Padre</th>
          </tr>
        </thead>
        <tbody>
          {categorias.map((categoria) => (
            <tr key={categoria._id}>
              <td className="tabla-cell">{categoria.codigo}</td>
              <td className="tabla-cell">{categoria.nombre}</td>
              <td className="tabla-cell">{categoria.categoriaPadre || "-"}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

```
</open_file>

<open_file>
src\components\egresos\categorias\ListaCategorias.scss
```src\components\egresos\categorias\ListaCategorias.scss
@use "../../../styles/variables" as var;

.lista-categorias-wrapper {
  margin-top: 0;
}

.lista-categorias-titulo {
  color: var.$color-principal-estudio;
  font-weight: 600;
  margin-top: 10px;
  margin-bottom: 0.7rem;
  text-align: center;
  padding-bottom: 5px;
  font-size: 1.4rem;
}

.tabla-categorias {
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: auto !important;
  max-width: 600px !important;
  margin: 0 auto !important;
  background-color: transparent !important;
}

.tabla-header {
  background-color: var.$color-principal-estudio !important;
  color: white !important;
  font-weight: 600 !important;
  font-size: 0.9rem !important;
  white-space: nowrap !important;
  padding: 12px 16px !important;
  border: 1px solid var.$color-principal-estudio !important;
}

.tabla-cell {
  color: white !important;
  font-size: 0.8rem !important;
  padding: 4px 16px !important;
  white-space: nowrap !important;
  border-bottom: 1px solid var.$color-principal-estudio !important;
}

/* Ajustes para el ancho de las columnas */
.tabla-header:first-child,
.tabla-cell:first-child {
  width: 20% !important; /* Columna código */
}

.tabla-header:nth-child(2),
.tabla-cell:nth-child(2) {
  width: 60% !important; /* Columna nombre */
}

.tabla-header:last-child,
.tabla-cell:last-child {
  width: 20% !important; /* Columna categoría padre */
  text-align: center !important;
}

/* Centrar el contenido de la celda de categoría padre */
.tabla-cell:last-child {
  text-align: center !important;
}

/* Asegurar que la tabla se mantenga compacta */
.MuiTable-root {
  min-width: unset !important;
}

/* Hacer que el contenedor de la tabla sea responsive */
@media (max-width: 700px) {
  .tabla-categorias {
    margin: 0 16px !important;
  }
}

```
</open_file>

<open_file>
src\components\egresos\categorias\ListaCategoriasEgresos.jsx
```src\components\egresos\categorias\ListaCategoriasEgresos.jsx
import PropTypes from "prop-types";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  Paper,
} from "@mui/material";
import "./ListaCategoriasEgresos.scss";

export const ListaCategoriasEgresos = ({ categorias }) => {
  const ordenarCategorias = (cats) => {
    const compararCodigos = (a, b) => {
      const partsA = a.codigo.split(".").map(Number);
      const partsB = b.codigo.split(".").map(Number);

      for (let i = 0; i < Math.max(partsA.length, partsB.length); i++) {
        const numA = partsA[i] || 0;
        const numB = partsB[i] || 0;
        if (numA !== numB) return numA - numB;
      }
      return 0;
    };

    return [...cats].sort(compararCodigos);
  };

  const categoriasOrdenadas = ordenarCategorias(categorias);

  return (
    <>
      <Typography variant="h6" gutterBottom className="lista-categorias-titulo">
        Categorías Egresos Existentes
      </Typography>

      <TableContainer component={Paper} className="tabla-categorias">
        <Table>
          <TableHead>
            <TableRow>
              <TableCell className="tabla-header">Código</TableCell>
              <TableCell className="tabla-header">Nombre</TableCell>
              <TableCell className="tabla-header">Categoría Padre</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {categoriasOrdenadas.map((categoria) => (
              <TableRow key={categoria._id} className="tabla-row">
                <TableCell className="tabla-cell">{categoria.codigo}</TableCell>
                <TableCell className="tabla-cell">{categoria.nombre}</TableCell>
                <TableCell className="tabla-cell">
                  {categoria.categoriaPadre || "-"}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </>
  );
};

ListaCategoriasEgresos.propTypes = {
  categorias: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired,
      categoriaPadre: PropTypes.string,
    })
  ).isRequired,
};

```
</open_file>

<open_file>
src\components\egresos\categorias\ListaCategoriasEgresos.scss
```src\components\egresos\categorias\ListaCategoriasEgresos.scss
@use "../../../styles/variables" as var;

.lista-categorias-titulo {
  color: var.$color-principal-estudio;
  font-weight: 600;
  margin-bottom: 0.8rem;
  text-align: center;
  padding-bottom: 10px;
}

.tabla-categorias {
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: auto !important;
  max-width: 600px !important;
  margin: 0 auto !important;
  background-color: transparent !important;
}

.tabla-header {
  background-color: var.$color-principal-estudio !important;
  color: white !important;
  font-weight: 600 !important;
  font-size: 0.9rem !important;
  white-space: nowrap !important;
  padding: 12px 16px !important;
  border: 1px solid var.$color-principal-estudio !important;
}

.tabla-cell {
  color: white !important;
  font-size: 0.8rem !important;
  padding: 4px 16px !important;
  white-space: nowrap !important;
  border-bottom: 1px solid var.$color-principal-estudio !important;
}

/* Ajustes para el ancho de las columnas */
.tabla-header:first-child,
.tabla-cell:first-child {
  width: 20% !important;
}

.tabla-header:nth-child(2),
.tabla-cell:nth-child(2) {
  width: 60% !important;
}

.tabla-header:last-child,
.tabla-cell:last-child {
  width: 20% !important;
  text-align: center !important;
}

.tabla-cell:last-child {
  text-align: center !important;
}

.MuiTable-root {
  min-width: unset !important;
}

@media (max-width: 700px) {
  .tabla-categorias {
    margin: 0 16px !important;
  }
}

```
</open_file>

<open_file>
src\components\egresos\categorias\ListadoCategoriasEgresos.jsx
```src\components\egresos\categorias\ListadoCategoriasEgresos.jsx
import { useCategoriasEgresos } from "../../../hooks/useCategoriasEgresos";
import "./ListadoCategoriasEgresos.scss";

export const ListadoCategoriasEgresos = () => {
  const { categorias } = useCategoriasEgresos();

  return (
    <div className="listado-categorias-container">
      <p className="titulo-categorias-egresos">Categorías Egresos Existentes</p>
      <table className="tabla-categorias">
        <thead>
          <tr>
            <th>Código</th>
            <th>Nombre</th>
            <th>Categoría Padre</th>
          </tr>
        </thead>
        <tbody>
          {categorias.map((categoria) => (
            <tr key={categoria._id}>
              <td>{categoria.codigo}</td>
              <td>{categoria.nombre}</td>
              <td>{categoria.categoriaPadre || "-"}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

```
</open_file>

<open_file>
src\components\egresos\categorias\ListadoCategoriasEgresos.scss
```src\components\egresos\categorias\ListadoCategoriasEgresos.scss
@use "../../../styles/variables" as var;

.listado-categorias-container {
  margin: 1px auto;
  max-width: 70%;
}

.titulo-categorias-egresos {
  color: var.$color-principal-estudio;
  font-size: 0.8rem;
  margin-bottom: 20px;
  text-align: center;
}

.tabla-categorias {
  width: 100%;
  border-collapse: collapse;
  margin-top: 0px;
  background-color: transparent;

  th,
  td {
    padding: 4px 15px;
    vertical-align: middle;
  }

  th {
    color: var.$color-principal-estudio;
    font-weight: 700;
    border-bottom: 2px solid var.$color-principal-cliente;

    &:first-child,
    &:nth-child(2) {
      text-align: left;
    }
    &:last-child {
      text-align: center;
    }
  }

  td {
    color: white;
    font-size: 0.9rem;

    &:first-child,
    &:nth-child(2) {
      text-align: left;
    }
  }

  tbody {
    tr {
      background-color: var.$color-fondo-estudio;
      border-bottom: 1px solid var.$color-principal-cliente;
      transition: background-color 0.2s ease;
      height: 32px;

      &:last-child {
        border-bottom: 1px solid var.$color-principal-cliente;
      }

      &:hover {
        background-color: rgba(5, 55, 89, 0.231) !important;
      }

      td {
        background-color: inherit;
        padding: 0.25rem 0.75rem;
        color: white;
      }
    }
  }
}

```
</open_file>

<open_file>
src\components\egresos\Egresos.jsx
```src\components\egresos\Egresos.jsx
import { Link } from "react-router-dom";
import { ListadoEgresos } from "./registro/ListadoEgresos";
import { ListaCategorias } from "./categorias/ListaCategorias";
import logo from "../../assets/odontomed512_512.png";
import logo1 from "../../assets/odontomedBigLogo.png";
import { FaRegPlusSquare, FaRegListAlt, FaSitemap } from "react-icons/fa";
import "./Egresos.scss";

export const Egresos = () => {
  return (
    <>
      <div className="pagina-egresos-container">
        <img src={logo} alt="Logo" className="egresos-logo" />
        <img src={logo1} alt="Logo1" className="egresos-logo-1" />
        <p className="egresos-titulo">Gestión de Egresos</p>
      </div>

      <div className="egresos-container">
        <Link to="/registrar-egresos">
          <button className="btn-reg-egresos">
            <FaRegListAlt className="btn-egresos-icon" />
            Registrar Egresos
          </button>
        </Link>
        <Link to="/agregar-egresos">
          <button className="btn-agregar-egresos">
            <FaRegPlusSquare className="btn-egresos-icon" />
            Agregar Categorías
          </button>
        </Link>
        <Link to="/agregar-subcategorias-egresos">
          <button className="btn-subcategorias-egresos">
            <FaSitemap className="btn-egresos-icon" />
            Agregar Subcategorías
          </button>
        </Link>
      </div>

      <ListadoEgresos />
      <ListaCategorias />
    </>
  );
};

```
</open_file>

<open_file>
src\components\egresos\Egresos.scss
```src\components\egresos\Egresos.scss
@use "../../styles/variables" as var;

body {
  background-color: var.$color-fondo-estudio;
}

/* Elimina el subrayado de todos los enlaces */
a {
  text-decoration: none;
}

.egresos {
  width: 100%;
}

.pagina-egresos-container {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  text-align: center;
  margin: 20px 0;
}

.egresos-container {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 20px;
  margin-top: 30px;
}

.egresos-logo {
  width: 55px;
  margin-right: 10px;
}

.egresos-logo-1 {
  width: 180px;
  margin-left: 10px;
  margin-top: 10px;
}

.egresos-titulo {
  font-size: 2.3rem;
  color: var.$color-principal-estudio;
  margin-top: 10px;
  margin-left: 25px;
  font-weight: 600;
}

.btn-reg-egresos,
.btn-agregar-egresos {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: transparent;
  color: white;
  border: 2px solid;
  border-radius: 30px;
  padding: 10px 20px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 200px;
}

.btn-agregar-egresos {
  border-color: white;
  background-color: black;
  color: white;
  font-weight: 700;

  .btn-egresos-icon {
    color: white;
    transition: all 0.3s ease;
    background-color: transparent !important;
  }

  &:hover {
    background-color: white;
    color: black;
    border-color: rgb(167, 160, 160);

    .btn-egresos-icon {
      color: black;
    }
  }
}

.btn-reg-egresos {
  border-color: var.$color-principal-cliente;
  background-color: black;
  color: var.$color-principal-cliente;
  font-weight: 700;

  .btn-egresos-icon {
    color: var.$color-principal-cliente;
    transition: all 0.3s ease;
    background-color: transparent !important;
  }

  &:hover {
    background-color: var.$color-principal-cliente;
    color: white;
    border-color: rgb(167, 160, 160);

    .btn-egresos-icon {
      color: white;
    }
  }
}

.btn-egresos-icon {
  margin-right: 10px;
  font-size: 1.2rem;
}

.btn-subcategorias-egresos {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: black;
  color: #a0a0a0;
  border: 2px solid #a0a0a0;
  border-radius: 25px;
  padding: 10px 20px;
  font-size: 1rem;
  cursor: pointer;
  gap: 8px;
  font-weight: 700;
  min-width: 200px;
  transition: all 0.3s ease;

  .btn-egresos-icon {
    color: #a0a0a0;
    transition: all 0.3s ease;
  }

  &:hover {
    background-color: #403f3f;
    color: white;
    border-color: rgb(167, 160, 160);

    .btn-egresos-icon {
      color: white;
      background-color: transparent !important;
    }
  }
}

```
</open_file>

<open_file>
src\components\egresos\registro\BotonesFormulario.jsx
```src\components\egresos\registro\BotonesFormulario.jsx
import PropTypes from "prop-types";

export const BotonesFormulario = ({ onCancelar }) => {
  return (
    <div className="botones-formulario">
      <button type="button" className="boton-cancelar" onClick={onCancelar}>
        Cancelar
      </button>
      <button type="submit" className="boton-guardar">
        Guardar
      </button>
    </div>
  );
};

BotonesFormulario.propTypes = {
  onCancelar: PropTypes.func.isRequired,
};

```
</open_file>

<open_file>
src\components\egresos\registro\EgresosDatosAdicionales.jsx
```src\components\egresos\registro\EgresosDatosAdicionales.jsx
import PropTypes from "prop-types";
import { useState, useEffect } from "react";
import { updateEgreso } from "../../../services/egresosService";
import { useSubcategoriasEgresos } from "../../../hooks/useSubcategoriasEgresos";
import { FaChevronRight, FaUndo } from "react-icons/fa";
import "./EgresosDatosAdicionales.scss";

export const EgresosDatosAdicionales = ({ egreso, onClose, onUpdate }) => {
  const [observaciones, setObservaciones] = useState(
    egreso.observaciones || ""
  );
  const [subcategoriaSeleccionada, setSubcategoriaSeleccionada] = useState(
    egreso.subcategoria || null
  );
  const [isLoading, setIsLoading] = useState(false);
  const {
    subcategorias,
    cargando,
    error,
    subcategoriasVisibles,
    seleccionarSubcategoria,
    resetearSeleccion,
    rutaSeleccion,
  } = useSubcategoriasEgresos();

  useEffect(() => {}, []);

  const formatearFecha = (fecha) => {
    const date = new Date(fecha);
    const options = {
      timeZone: "America/Argentina/Buenos_Aires",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
    };
    return date.toLocaleDateString("es-AR", options);
  };

  const formatearImporte = (importe) => {
    return new Intl.NumberFormat("es-AR", {
      style: "currency",
      currency: "ARS",
    }).format(importe);
  };

  const adjustTextareaHeight = (e) => {
    const textarea = e.target;
    textarea.style.height = "auto";
    textarea.style.height = `${textarea.scrollHeight}px`;
  };

  const handleSeleccionarSubcategoria = (subcategoria) => {
    const tieneHijos = subcategorias.some(
      (sub) => sub.categoriaPadre === subcategoria.codigo
    );

    if (tieneHijos) {
      seleccionarSubcategoria(subcategoria);
    } else {
      setSubcategoriaSeleccionada({
        ...subcategoria,
        rutaSubcategoria: [...rutaSeleccion, subcategoria],
      });
      seleccionarSubcategoria(subcategoria);
    }
  };

  const handleResetear = () => {
    resetearSeleccion();
    setSubcategoriaSeleccionada(null);
  };

  const handleGuardar = async () => {
    try {
      setIsLoading(true);
      const egresoActualizado = {
        ...egreso,
        observaciones,
        subcategoria: subcategoriaSeleccionada,
      };
      await updateEgreso(egreso._id, egresoActualizado);
      onUpdate();
      onClose();
    } catch (error) {
      console.error("Error al guardar:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="datos-adicionales-overlay">
      <div className="datos-adicionales-container">
        <p>Egresos - Datos Adicionales</p>
        <div className="datos-content">
          <div className="dato-grupo">
            <label>Fecha:</label>
            <span>{formatearFecha(egreso.fecha)}</span>
          </div>
          <div className="dato-grupo">
            <label>Ruta Completa:</label>
            <span>
              {egreso.categoria.rutaCategoria
                .map((cat) => cat.nombre)
                .join(" > ")}
            </span>
          </div>
          <div className="dato-grupo">
            <label>Importe:</label>
            <span>{formatearImporte(egreso.importe)}</span>
          </div>
          <div className="dato-grupo">
            <label>Subcategoría:</label>
            {cargando ? (
              <span>Cargando subcategorías...</span>
            ) : error ? (
              <span className="error">{error}</span>
            ) : (
              <div className="subcategorias-navegacion">
                {subcategoriaSeleccionada && (
                  <div className="ruta-actual">
                    {subcategoriaSeleccionada.rutaSubcategoria.length > 1 && (
                      <button
                        className="btn-reset"
                        onClick={handleResetear}
                        title="Volver al inicio"
                      >
                        <FaUndo />
                      </button>
                    )}
                    {subcategoriaSeleccionada.rutaSubcategoria.map(
                      (sub, index) => (
                        <span key={sub.codigo}>
                          {sub.nombre}
                          {index <
                            subcategoriaSeleccionada.rutaSubcategoria.length -
                              1 && <FaChevronRight />}
                        </span>
                      )
                    )}
                  </div>
                )}

                <div className="subcategorias-grid">
                  {subcategoriasVisibles.map((sub) => (
                    <button
                      key={sub.codigo}
                      className={`btn-subcategoria ${
                        subcategoriaSeleccionada?.codigo === sub.codigo
                          ? "seleccionada"
                          : ""
                      }`}
                      onClick={() => handleSeleccionarSubcategoria(sub)}
                    >
                      {sub.nombre}
                    </button>
                  ))}
                </div>

                {subcategoriaSeleccionada &&
                  subcategoriaSeleccionada.rutaSubcategoria.length > 1 && (
                    <div className="subcategoria-seleccionada">
                      <span>✓ {subcategoriaSeleccionada.nombre}</span>
                      <small>
                        Subcategoría seleccionada - Puede guardar los cambios
                      </small>
                    </div>
                  )}
              </div>
            )}
          </div>
          <div className="dato-grupo">
            <label>Observaciones:</label>
            <textarea
              value={observaciones}
              onChange={(e) => {
                setObservaciones(e.target.value);
                adjustTextareaHeight(e);
              }}
              onInput={adjustTextareaHeight}
              className="observaciones-input"
              placeholder="Ingrese sus observaciones aquí..."
            />
          </div>
        </div>
        <div className="botones-container">
          <button
            className="btn-cancelar"
            onClick={onClose}
            disabled={isLoading}
          >
            Cancelar
          </button>
          <button
            className="btn-guardar"
            onClick={handleGuardar}
            disabled={isLoading}
          >
            {isLoading ? "Guardando..." : "Guardar"}
          </button>
        </div>
      </div>
    </div>
  );
};

EgresosDatosAdicionales.propTypes = {
  egreso: PropTypes.shape({
    _id: PropTypes.string.isRequired,
    fecha: PropTypes.string.isRequired,
    importe: PropTypes.number.isRequired,
    observaciones: PropTypes.string,
    categoria: PropTypes.shape({
      rutaCategoria: PropTypes.arrayOf(
        PropTypes.shape({
          nombre: PropTypes.string.isRequired,
        })
      ).isRequired,
    }).isRequired,
    subcategoria: PropTypes.shape({
      codigo: PropTypes.string,
      nombre: PropTypes.string,
      rutaSubcategoria: PropTypes.arrayOf(
        PropTypes.shape({
          codigo: PropTypes.string,
          nombre: PropTypes.string,
        })
      ),
    }),
  }).isRequired,
  onClose: PropTypes.func.isRequired,
  onUpdate: PropTypes.func.isRequired,
};

```
</open_file>

<open_file>
src\components\egresos\registro\EgresosDatosAdicionales.scss
```src\components\egresos\registro\EgresosDatosAdicionales.scss
@use "../../../styles/variables" as var;

.datos-adicionales-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: var.$color-fondo-estudio;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.datos-adicionales-container {
  background-color: var.$color-fondo-estudio;
  padding: 1rem;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 8px;
  min-width: 600px;
  max-width: 800px;
  box-shadow: 0 1px 10px rgba(175, 173, 173, 0.561);

  p {
    margin-bottom: 1.2rem;
    text-align: center;
    color: var.$color-principal-cliente;
    font-size: 1.5rem;
    font-weight: 400;
  }
}

.datos-content {
  .dato-grupo {
    margin-bottom: 0.5rem;

    label {
      font-weight: bold;
      margin-right: 0.5rem;
      color: var.$color-principal-estudio;
    }

    span {
      color: white;
      font-size: 0.9rem;
    }
  }
}

.botones-container {
  margin-top: 1.5rem;
  display: flex;
  gap: 1rem;
  justify-content: flex-end;
}

.btn-cancelar {
  padding: 0.5rem 1rem;
  background-color: #abb1b6;
  color: black;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  width: 120px;

  &:hover {
    background-color: #292a2b;
    color: white;
  }
}

.btn-guardar {
  padding: 0.5rem 1rem;
  background-color: var.$color-principal-cliente;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  width: 120px;

  &:hover {
    background-color: var.$color-principal-estudio;
  }
}

.observaciones-input {
  width: 100%;
  min-height: 36px;
  max-height: 150px;
  padding: 0.5rem;
  margin-top: 0.5rem;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 4px;
  background-color: rgba(255, 255, 255, 0.1);
  color: white;
  resize: none;
  overflow-y: hidden;
  line-height: 1.5;

  &:focus {
    outline: none;
    border-color: var.$color-principal-estudio;
  }
}

.tiene-obs {
  color: var.$color-principal-cliente;
  cursor: help;

  &:hover {
    text-decoration: underline;
  }
}

.subcategorias-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin: 10px 0;

  .btn-subcategoria {
    background: none;
    border: 1px solid var.$color-principal-cliente;
    color: white;
    cursor: pointer;
    padding: 4px 12px;
    font-size: 0.85rem;
    border-radius: 15px;
    transition: all 0.3s ease;

    &:hover {
      background-color: rgba(var.$color-principal-cliente, 0.2);
    }

    &.seleccionada {
      background-color: var.$color-principal-cliente;
      color: white;
    }
  }
}

.ruta-actual {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 10px;

  .btn-reset {
    background: none;
    border: none;
    cursor: pointer;
    color: var.$color-principal-cliente;
    padding: 4px;
    margin-right: 4px;
    transition: all 0.3s ease;

    &:hover {
      color: var.$color-principal-estudio;
      transform: scale(1.1);
    }
  }

  span {
    display: flex;
    align-items: center;
    gap: 8px;
    color: white;
    font-size: 0.9rem;
  }
}

.subcategoria-seleccionada {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 2px;
  gap: 8px;

  span {
    color: white;
    display: flex;
    align-items: center;
    gap: 4px;
  }

  small {
    color: var.$color-principal-estudio;
    font-size: 0.85rem;
  }
}

```
</open_file>

<open_file>
src\components\egresos\registro\FormularioEgreso.jsx
```src\components\egresos\registro\FormularioEgreso.jsx
import { useState } from "react";
import PropTypes from "prop-types";
import { EntradaMonetaria } from "../../comunes/EntradaMonetaria";
import { EntradaFecha } from "../../comunes/EntradaFecha";
import { RutaCategoria } from "./RutaCategoria";
import { BotonesFormulario } from "./BotonesFormulario";
import { ListadoEgresos } from "./ListadoEgresos";
import "./FormularioEgreso.scss";

export const FormularioEgreso = ({
  categoriaSeleccionada,
  rutaCompleta,
  onGuardar,
  onCancelar,
}) => {
  const [formData, setFormData] = useState({
    fecha: new Date().toISOString().split("T")[0],
    importe: "",
  });
  const [error, setError] = useState("");
  const [actualizarListado, setActualizarListado] = useState(false);
  const [ultimoEgresoId, setUltimoEgresoId] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    if (!formData.importe || parseFloat(formData.importe) <= 0) {
      setError("El importe debe ser mayor a 0");
      return;
    }

    const egresoData = {
      fecha: formData.fecha,
      importe: parseFloat(formData.importe),
      categoria: {
        codigo: categoriaSeleccionada.codigo,
        nombre: categoriaSeleccionada.nombre,
        rutaCategoria: rutaCompleta,
      },
    };

    try {
      const nuevoEgreso = await onGuardar(egresoData);
      setUltimoEgresoId(nuevoEgreso._id);
      setActualizarListado((prev) => !prev);
      setFormData({
        fecha: new Date().toISOString().split("T")[0],
        importe: "",
      });

      setTimeout(() => {
        setUltimoEgresoId(null);
      }, 3000);
    } catch (error) {
      console.error("Error en el formulario:", error);
      setError(error.message || "Error al guardar el egreso");
    }
  };

  return (
    <div className="container-general">
      <div className="formulario-egreso-container">
        <h2 className="formulario-titulo">Registrar Egreso</h2>
        <RutaCategoria rutaCompleta={rutaCompleta} />
        {error && <div className="error-mensaje">{error}</div>}
        <form onSubmit={handleSubmit} className="formulario-egreso">
          <div className="campos-inline">
            <div className="campo-formulario">
              <label htmlFor="fecha">Fecha:</label>
              <EntradaFecha
                id="fecha"
                valor={formData.fecha}
                alCambiar={(valor) =>
                  setFormData((prev) => ({ ...prev, fecha: valor }))
                }
                requerido
              />
            </div>
            <div className="campo-formulario">
              <label htmlFor="importe">Importe:</label>
              <EntradaMonetaria
                valor={formData.importe}
                alCambiar={(valor) =>
                  setFormData((prev) => ({ ...prev, importe: valor }))
                }
                placeholder="0,00"
              />
            </div>
          </div>
          <BotonesFormulario onCancelar={onCancelar} />
        </form>
      </div>
      <ListadoEgresos key={actualizarListado} ultimoEgresoId={ultimoEgresoId} />
    </div>
  );
};

FormularioEgreso.propTypes = {
  categoriaSeleccionada: PropTypes.shape({
    codigo: PropTypes.string.isRequired,
    nombre: PropTypes.string.isRequired,
  }).isRequired,
  rutaCompleta: PropTypes.arrayOf(
    PropTypes.shape({
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
    })
  ).isRequired,
  onGuardar: PropTypes.func.isRequired,
  onCancelar: PropTypes.func.isRequired,
};

```
</open_file>

<open_file>
src\components\egresos\registro\FormularioEgreso.scss
```src\components\egresos\registro\FormularioEgreso.scss
@use "../../../styles/variables" as var;

.container-general {
  margin-top: 110px;
}

.formulario-egreso-container {
  max-width: 600px;
  margin: 5px auto;
  padding: 20px;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 8px;
  box-shadow: 0 1px 10px rgba(175, 173, 173, 0.561);
}

.formulario-titulo {
  color: var.$color-principal-cliente;
  font-size: 1.8rem;
  margin-bottom: 20px;
  text-align: center;
}

.ruta-categoria {
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 10px;
  color: var.$color-principal-cliente;
  font-weight: 500;
  text-align: center;
}

.formulario-egreso {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.campos-inline {
  display: flex;
  gap: 30px;
  justify-content: space-between;
}

.campo-formulario {
  flex: 1;
}

.campo-formulario label {
  display: block;
  color: var.$color-principal-cliente;
  font-size: 1rem;
  margin-bottom: 4px;
}

.campo-formulario input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
  background-color: #fff;
}

.error-mensaje {
  color: #f44336;
  text-align: center;
  margin: 10px 0;
  font-size: 0.9rem;
}

.botones-formulario {
  display: flex;
  gap: 20px;
  justify-content: flex-end;
  margin-top: 10px;
}

.boton-cancelar,
.boton-guardar {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
  transition: all 0.3s ease;
}

.boton-cancelar {
  background-color: #f5f5f5;
  color: #666;
}

.boton-guardar {
  background-color: var.$color-principal-cliente;
  color: white;
}

.boton-cancelar:hover {
  background-color: #5f5b5b;
  color: white;
}

.boton-guardar:hover {
  background-color: var.$color-principal-estudio;
}

.selector-metodo-pago {
  width: 100%;
  padding: 8px;
  border-radius: 4px;
  border: 1px solid #ccc;
  background-color: #fff;
  margin-top: 4px;

  &:focus {
    outline: none;
    border-color: #007bff;
  }
}

```
</open_file>

<open_file>
src\components\egresos\registro\ListadoEgresos.jsx
```src\components\egresos\registro\ListadoEgresos.jsx
import { useState, useEffect } from "react";
import PropTypes from "prop-types";
import { getEgresos } from "../../../services/egresosService";
import { FaPencilAlt } from "react-icons/fa";
import "./ListadoEgresos.scss";
import { EgresosDatosAdicionales } from "./EgresosDatosAdicionales";
import { useSubcategoriasEgresos } from "../../../hooks/useSubcategoriasEgresos";

export const ListadoEgresos = ({ ultimoEgresoId }) => {
  const [egresos, setEgresos] = useState([]);
  const [error, setError] = useState("");
  const [egresoSeleccionado, setEgresoSeleccionado] = useState(null);
  const { subcategorias } = useSubcategoriasEgresos();

  useEffect(() => {
    cargarEgresos();
  }, []);

  const cargarEgresos = async () => {
    try {
      const data = await getEgresos();
      const egresosOrdenados = data.sort(
        (a, b) => new Date(b.fecha).getTime() - new Date(a.fecha).getTime()
      );
      setEgresos(egresosOrdenados);
    } catch (error) {
      setError(error.message);
    }
  };

  const formatearFecha = (fecha) => {
    const date = new Date(fecha);
    const options = {
      timeZone: "America/Argentina/Buenos_Aires",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
    };
    return date.toLocaleDateString("es-AR", options);
  };

  const formatearImporte = (importe) => {
    return new Intl.NumberFormat("es-AR", {
      style: "currency",
      currency: "ARS",
    }).format(importe);
  };

  const handleClickLapiz = (egreso) => {
    setEgresoSeleccionado(egreso);
  };

  if (error) {
    return <div className="error-mensaje">{error}</div>;
  }

  return (
    <div className="listado-egresos-container">
      <h3 className="listado-titulo">Últimos Egresos Registrados</h3>
      <div className="tabla-responsive">
        <table className="tabla-egresos">
          <thead>
            <tr>
              <th>FECHA</th>
              <th>CATEGORÍA</th>
              <th>SUBCATEGORÍA</th>
              <th>IMPORTE</th>
              <th>ACCIONES</th>
              <th>OBS</th>
            </tr>
          </thead>
          <tbody>
            {egresos.map((egreso) => (
              <tr
                key={egreso._id}
                className={egreso._id === ultimoEgresoId ? "nuevo-egreso" : ""}
              >
                <td>{formatearFecha(egreso.fecha)}</td>
                <td>{egreso.categoria.nombre}</td>
                <td>
                  {egreso.subcategoria ? (
                    <div className="subcategoria-container">
                      <span className="subcategoria-cell">
                        {egreso.subcategoria.nombre}
                      </span>
                      <div className="subcategoria-tooltip">
                        <div className="tooltip-content">
                          {(() => {
                            const rutaCategoria = egreso.categoria.rutaCategoria
                              .map((cat) => cat.nombre)
                              .join(" → ");

                            const rutaSubcategoria = [];
                            let actual = subcategorias.find(
                              (s) => s.codigo === egreso.subcategoria.codigo
                            );

                            while (actual) {
                              rutaSubcategoria.unshift(actual.nombre);
                              actual = subcategorias.find(
                                (s) => s.codigo === actual.categoriaPadre
                              );
                            }

                            return `${rutaCategoria} → ${rutaSubcategoria.join(
                              " → "
                            )}`;
                          })()}
                        </div>
                      </div>
                    </div>
                  ) : (
                    "-"
                  )}
                </td>
                <td className="importe">{formatearImporte(egreso.importe)}</td>
                <td className="acciones">
                  <button
                    className="btn-accion"
                    onClick={() => handleClickLapiz(egreso)}
                  >
                    <FaPencilAlt />
                  </button>
                </td>
                <td className="observaciones">
                  {egreso.observaciones?.trim() ? (
                    <span
                      className="tiene-obs"
                      title={egreso.observaciones}
                      onClick={() => handleClickLapiz(egreso)}
                    >
                      Sí
                    </span>
                  ) : (
                    "No"
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {egresoSeleccionado && (
        <EgresosDatosAdicionales
          egreso={egresoSeleccionado}
          onClose={() => setEgresoSeleccionado(null)}
          onUpdate={cargarEgresos}
        />
      )}
    </div>
  );
};

ListadoEgresos.propTypes = {
  ultimoEgresoId: PropTypes.string,
};

```
</open_file>

<open_file>
src\components\egresos\registro\ListadoEgresos.scss
```src\components\egresos\registro\ListadoEgresos.scss
@use "../../../styles/variables" as var;

.listado-egresos-container {
  margin: auto;
  padding: 10px;
  max-width: 70%;
}

.listado-titulo {
  color: var.$color-principal-estudio;
  font-size: 1.5rem;
  margin: 20px 0 20px 0;
  text-align: center;
}

.tabla-responsive {
  overflow-x: auto;
}

.tabla-egresos {
  width: 100%;
  border-collapse: collapse;
  margin: 0 auto;

  th,
  td {
    padding: 4px 15px;
    vertical-align: middle;
  }

  tr {
    background-color: transparent;
    transition: background-color 0.3s ease;

    &:hover {
      background-color: rgba(0, 0, 0, 0.4);

      td {
        background-color: rgba(0, 0, 0, 0.4);

        .subcategoria-container,
        .subcategoria-cell,
        .btn-accion {
          background-color: rgba(0, 0, 0, 0.4);
        }
      }
    }
  }

  th {
    color: var.$color-principal-estudio;
    font-weight: 700;
    border-bottom: 2px solid var.$color-principal-cliente;

    &:first-child,
    &:nth-child(2) {
      text-align: left;
    }
    &:last-child {
      text-align: center;
    }
  }

  td {
    color: white;
    font-size: 0.9rem;

    &:first-child,
    &:nth-child(2) {
      text-align: left;
    }
  }

  td.importe {
    text-align: right;
    font-weight: 500;
    color: white;
  }

  th,
  td {
    &:first-child {
      width: 15%;
    }
    &:nth-child(2) {
      width: 25%;
    }
    &:nth-child(3) {
      width: 25%;
      text-align: center;
    }
    &:nth-child(4) {
      width: 15%;
      text-align: right;
    }
    &:nth-child(5) {
      width: 10%;
      text-align: center;
    }
    &:last-child {
      width: 10%;
      text-align: left;
    }
  }

  tbody {
    tr {
      background-color: var.$color-fondo-estudio;
      border-bottom: 1px solid var.$color-principal-cliente;
      transition: background-color 0.2s ease;
      height: 32px;

      &:last-child {
        border-bottom: 1px solid var.$color-principal-cliente;
      }

      &:hover {
        background-color: rgba(0, 0, 0, 0.4);

        .subcategoria-container,
        .subcategoria-cell,
        .btn-accion,
        .btn-accion svg {
          background-color: inherit;
        }
      }

      td {
        background-color: inherit;
        padding: 0.25rem 0.75rem;
        color: white;
      }
    }
  }

  .acciones {
    text-align: center;

    .btn-accion {
      background: none;
      border: none;
      color: var.$color-principal-cliente;
      cursor: pointer;
      transition: color 0.3s ease;
      text-align: center;

      &:hover {
        color: rgb(193, 186, 186);
        transform: scale(1.3);
      }
    }
  }
}

@media (max-width: 768px) {
  .tabla-egresos {
    th,
    td {
      padding: 8px;
      font-size: 0.9rem;
    }
  }
}

.nuevo-egreso {
  animation: resaltarNuevo 3s ease;
}

@keyframes resaltarNuevo {
  0% {
    color: #ff0000;
  }
  70% {
    color: #ff0000;
  }
  100% {
    color: white;
  }
}

.nuevo-egreso td {
  animation: resaltarNuevo 3s ease;
}

.observaciones {
  text-align: left;
  padding-left: 20px !important;

  .tiene-obs {
    color: var.$color-principal-cliente;
    cursor: pointer;
    font-weight: 500;
    font-size: 1.1rem;
    transition: all 0.3s ease;

    &:hover {
      text-decoration: none;
      color: rgb(193, 186, 186);
      font-weight: 700;
    }
  }

  & > span,
  & {
    font-size: 1.1rem;
    font-weight: 500;
  }
}

[title] {
  transition: none;
}

.importe {
  text-align: right;
}

.subcategoria-container {
  position: relative;
  display: inline-block;
  width: 100%;
  text-align: center;
}

.subcategoria-cell {
  color: var.$color-principal-estudio;
  font-weight: 500;
  cursor: help;
  text-align: center;
  display: inline-block;
}

.subcategoria-tooltip {
  visibility: hidden;
  position: absolute;
  z-index: 1000;
  bottom: 150%;
  left: 50%;
  transform: translateX(-50%);
  background-color: var.$color-principal-estudio;
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  animation: fadeIn 0.2s ease-in-out;
  min-width: max-content;

  .tooltip-content {
    font-size: 0.85rem;
    line-height: 1.4;
    text-align: center;
    white-space: nowrap;
    display: block;
    width: 100%;
    background-color: var.$color-principal-estudio;
  }

  &::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -4px;
    border-width: 4px;
    border-style: solid;
    border-color: var.$color-principal-estudio transparent transparent
      transparent;
  }
}

.subcategoria-container:hover .subcategoria-tooltip {
  visibility: visible;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translate(-50%, 5px);
  }
  to {
    opacity: 1;
    transform: translate(-50%, 0);
  }
}

```
</open_file>

<open_file>
src\components\egresos\registro\RegistroEgresos.jsx
```src\components\egresos\registro\RegistroEgresos.jsx
import { useState } from "react";
import logo from "../../../assets/odontomed512_512.png";
import logo1 from "../../../assets/odontomedBigLogo.png";
import { createEgreso } from "../../../services/egresosService";
import { FormularioEgreso } from "./FormularioEgreso";
import { useCategoriasEgresos } from "../../../hooks/useCategoriasEgresos";
import { ListadoEgresos } from "./ListadoEgresos";
import "./RegistroEgresos.scss";

export const RegistroEgresos = () => {
  const {
    rutaSeleccion,
    categoriasVisibles,
    cargando,
    error,
    esCategoriaNivelFinal,
    seleccionarCategoria,
    volverAtras,
  } = useCategoriasEgresos();

  const [mostrarFormulario, setMostrarFormulario] = useState(false);
  const [ultimoEgresoId, setUltimoEgresoId] = useState(null);

  const handleSeleccionar = () => {
    if (rutaSeleccion.length > 0) {
      setMostrarFormulario(true);
    }
  };

  const handleGuardarEgreso = async (egresoData) => {
    try {
      const nuevoEgreso = await createEgreso(egresoData);
      setUltimoEgresoId(nuevoEgreso._id);
      return nuevoEgreso;
    } catch (error) {
      console.error("Error al guardar el egreso:", error);
      throw error;
    }
  };

  const handleCancelarEgreso = () => {
    setMostrarFormulario(false);
  };

  if (cargando) {
    return <div className="mensaje-carga">Cargando categorías...</div>;
  }

  if (error) {
    return <div className="mensaje-error">Error: {error}</div>;
  }

  if (mostrarFormulario) {
    return (
      <>
        <FormularioEgreso
          categoriaSeleccionada={rutaSeleccion[rutaSeleccion.length - 1]}
          rutaCompleta={rutaSeleccion}
          onGuardar={handleGuardarEgreso}
          onCancelar={handleCancelarEgreso}
        />
      </>
    );
  }

  const categoriaActual = rutaSeleccion[rutaSeleccion.length - 1];
  const mostrarBotonRegistrar =
    categoriaActual && esCategoriaNivelFinal(categoriaActual);

  return (
    <>
      <div className="pagina-egresos-container-2">
        <img src={logo} alt="Logo" className="egresos-logo" />
        <img src={logo1} alt="Logo1" className="egresos-logo-1" />
        <p className="egresos-registro-titulo">Registro de Egresos</p>
      </div>
      <div className="seleccion-categorias-container">
        {rutaSeleccion.length > 0 && (
          <div className="ruta-navegacion">
            <button className="boton-volver" onClick={volverAtras}>
              ← Volver
            </button>
            <div className="ruta-seleccion">
              {rutaSeleccion.map((cat, index) => (
                <span key={cat.codigo} className="categoria-seleccionada">
                  {index > 0 ? " → " : ""}
                  {cat.nombre}
                </span>
              ))}
            </div>
            {mostrarBotonRegistrar && (
              <button className="boton-registrar" onClick={handleSeleccionar}>
                Registrar →
              </button>
            )}
          </div>
        )}
        <div className="grid-categorias">
          {categoriasVisibles.map((categoria) => (
            <button
              key={categoria.codigo}
              className="boton-categoria"
              onClick={() => seleccionarCategoria(categoria)}
            >
              {categoria.nombre}
            </button>
          ))}
        </div>
      </div>
      <ListadoEgresos ultimoEgresoId={ultimoEgresoId} />
    </>
  );
};

```
</open_file>

<open_file>
src\components\egresos\registro\RegistroEgresos.scss
```src\components\egresos\registro\RegistroEgresos.scss
@use "../../../styles/variables" as var;

.registro-egresos {
  width: 100%;
}

.registro-egresos-container {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  text-align: center;
  margin: 20px 0;
}

.egresos-logo {
  width: 55px;
  margin-right: 10px;
}

.egresos-logo-1 {
  width: 180px;
  margin-left: 10px;
  margin-top: 10px;
}

.egresos-titulo {
  font-size: 2.3rem;
  color: var.$color-principal-estudio;
  margin-top: 10px;
  margin-left: 25px;
  font-weight: 600;
}

.pagina-egresos-container-2 {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  text-align: center;
  margin-top: 20px;
}

.egresos-registro-titulo {
  font-size: 2.2rem;
  color: var.$color-principal-estudio;
  margin-top: 10px;
  margin-left: 25px;
  font-weight: 600;
}

.seleccion-categorias-container {
  width: 90%;
  max-width: 1200px;
  margin: 20px auto;
  text-align: center;
}

.ruta-navegacion {
  display: flex;
  align-items: center;
  gap: 20px;
  margin: 20px 0;
  padding: 10px;
  border-radius: 5px;
}

.boton-volver {
  padding: 8px 16px;
  background-color: var.$color-principal-cliente;
  color: var.$color-fondo-estudio;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.3s ease;
}

.boton-volver:hover {
  background-color: var.$color-principal-estudio;
  color: white;
}

.boton-registrar {
  padding: 8px 16px;
  background-color: var.$color-principal-estudio;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.3s ease;
}

.boton-registrar:hover {
  background-color: var.$color-principal-cliente;
  color: var.$color-fondo-estudio;
}

.ruta-seleccion {
  flex-grow: 1;
  font-size: 1.2rem;
}

.categoria-seleccionada {
  color: var.$color-principal-cliente;
  font-weight: 700;
}

.grid-categorias {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
  margin-top: 20px;
}

.boton-categoria {
  padding: 5px;
  background-color: var.$color-principal-cliente;
  color: var.$color-fondo-estudio;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 500;
  text-transform: uppercase;
  transition: all 0.3s ease;
  width: 100%;
}

.boton-categoria:hover {
  background-color: var.$color-principal-estudio;
  transform: translateY(-2px);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  color: white;
}

.boton-categoria:active {
  transform: translateY(0);
}

```
</open_file>

<open_file>
src\components\egresos\registro\RutaCategoria.jsx
```src\components\egresos\registro\RutaCategoria.jsx
import PropTypes from "prop-types";

export const RutaCategoria = ({ rutaCompleta }) => {
  return (
    <div className="ruta-categoria">
      {rutaCompleta.map((cat, index) => (
        <span key={cat.codigo}>
          {index > 0 ? " → " : ""}
          {cat.nombre}
        </span>
      ))}
    </div>
  );
};

RutaCategoria.propTypes = {
  rutaCompleta: PropTypes.arrayOf(
    PropTypes.shape({
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
    })
  ).isRequired,
};

```
</open_file>

<open_file>
src\components\egresos\subcategorias\FormFields.jsx
```src\components\egresos\subcategorias\FormFields.jsx
import PropTypes from "prop-types";
import { useState, useEffect, useCallback } from "react";
import "./FormFields.scss";

export const FormFields = ({
  formData,
  handleChange,
  subcategoriasEgresos,
}) => {
  const [siguienteCodigo, setSiguienteCodigo] = useState("");
  const [subcategoriasNivel, setSubcategoriasNivel] = useState([]);
  const [rutaNavegacion, setRutaNavegacion] = useState([]);

  const actualizarCodigo = useCallback(
    (nuevoCodigo) => {
      setSiguienteCodigo(nuevoCodigo);
      if (formData.codigo !== nuevoCodigo) {
        handleChange({
          target: {
            name: "codigo",
            value: nuevoCodigo,
          },
        });
      }
    },
    [formData.codigo, handleChange]
  );

  useEffect(() => {
    // Actualizar ruta de navegación
    if (formData.categoriaPadre) {
      const ruta = [];
      let subcategoriaActual = subcategoriasEgresos.find(
        (c) => c.codigo === formData.categoriaPadre
      );

      while (subcategoriaActual) {
        ruta.unshift(subcategoriaActual);
        subcategoriaActual = subcategoriasEgresos.find(
          (c) => c.codigo === subcategoriaActual.categoriaPadre
        );
      }

      setRutaNavegacion(ruta);
    } else {
      setRutaNavegacion([]);
    }

    // Generar siguiente código
    if (formData.categoriaPadre) {
      const categoriaPadre = subcategoriasEgresos.find(
        (c) => c.codigo === formData.categoriaPadre
      );
      if (categoriaPadre) {
        const subcategorias = subcategoriasEgresos.filter(
          (c) => c.categoriaPadre === formData.categoriaPadre
        );
        const ultimoNumero =
          subcategorias.length > 0
            ? Math.max(
                ...subcategorias.map((c) => parseInt(c.codigo.split(".").pop()))
              )
            : 0;
        const nuevoCodigo = `${categoriaPadre.codigo}.${ultimoNumero + 1}`;
        actualizarCodigo(nuevoCodigo);
      }
    } else {
      const subcategoriasNivel1 = subcategoriasEgresos.filter(
        (c) => !c.categoriaPadre
      );
      const ultimoNumero =
        subcategoriasNivel1.length > 0
          ? Math.max(...subcategoriasNivel1.map((c) => parseInt(c.codigo)))
          : 0;
      const nuevoCodigo = `${ultimoNumero + 1}`;
      actualizarCodigo(nuevoCodigo);
    }

    // Actualizar lista de subcategorías del nivel actual
    const subcategoriasDelNivel = subcategoriasEgresos.filter((c) =>
      formData.categoriaPadre
        ? c.categoriaPadre === formData.categoriaPadre
        : !c.categoriaPadre
    );
    setSubcategoriasNivel(subcategoriasDelNivel);
  }, [formData.categoriaPadre, subcategoriasEgresos, actualizarCodigo]);

  const handleAgregarSubcategoria = (subcategoria) => {
    handleChange({
      target: {
        name: "categoriaPadre",
        value: subcategoria.codigo,
      },
    });
  };

  const handleNavegar = (subcategoria) => {
    handleChange({
      target: {
        name: "categoriaPadre",
        value: subcategoria.codigo,
      },
    });
  };

  const mostrarSubcategorias = (subcategoria) => {
    const subsubcategorias = subcategoriasEgresos.filter(
      (c) => c.categoriaPadre === subcategoria.codigo
    );
    return (
      subsubcategorias.length > 0 && (
        <ul className="lista-subcategorias">
          {subsubcategorias.map((subcat) => (
            <li key={subcat._id} className="subcategoria-item">
              <div className="categoria-info">
                <span className="categoria-codigo">{subcat.codigo}</span>
                <span className="categoria-nombre">{subcat.nombre}</span>
              </div>
              <div className="categoria-acciones">
                <button
                  type="button"
                  onClick={() => handleNavegar(subcat)}
                  className="btn-navegar"
                >
                  Ver subcategorías
                </button>
                <button
                  type="button"
                  onClick={() => handleAgregarSubcategoria(subcat)}
                  className="btn-agregar-subcategoria"
                >
                  + Agregar Subcategoría
                </button>
              </div>
            </li>
          ))}
        </ul>
      )
    );
  };

  return (
    <div className="form-fields-container">
      {rutaNavegacion.length > 0 && (
        <div className="ruta-navegacion">
          <button
            type="button"
            onClick={() =>
              handleChange({
                target: { name: "categoriaPadre", value: "" },
              })
            }
            className="btn-navegacion"
          >
            Inicio
          </button>
          {rutaNavegacion.map((cat) => (
            <span key={cat._id}>
              <span className="separador-ruta">›</span>
              <button
                type="button"
                onClick={() => handleNavegar(cat)}
                className="btn-navegacion"
              >
                {cat.nombre}
              </button>
            </span>
          ))}
        </div>
      )}

      <div className="form-group">
        <input
          type="text"
          name="nombre"
          value={formData.nombre}
          onChange={handleChange}
          className="form-input"
          placeholder="Nombre de la subcategoría"
          required
        />
        <div className="codigo-sugerido">Código: {siguienteCodigo}</div>
      </div>

      {subcategoriasNivel.length > 0 && (
        <div className="subcategorias-nivel">
          <ul className="lista-subcategorias">
            {subcategoriasNivel.map((subcategoria) => (
              <li key={subcategoria._id} className="subcategoria-item">
                <div className="categoria-info">
                  <span className="categoria-codigo">
                    {subcategoria.codigo}
                  </span>
                  <span className="categoria-nombre">
                    {subcategoria.nombre}
                  </span>
                </div>
                <div className="categoria-acciones">
                  <button
                    type="button"
                    onClick={() => handleAgregarSubcategoria(subcategoria)}
                    className="btn-agregar-subcategoria"
                  >
                    + Agregar Subcategoría
                  </button>
                </div>
                {mostrarSubcategorias(subcategoria)}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

FormFields.propTypes = {
  formData: PropTypes.shape({
    codigo: PropTypes.string,
    nombre: PropTypes.string.isRequired,
    nivel: PropTypes.number,
    categoriaPadre: PropTypes.string,
  }).isRequired,
  handleChange: PropTypes.func.isRequired,
  subcategoriasEgresos: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired,
      categoriaPadre: PropTypes.string,
    })
  ).isRequired,
};

```
</open_file>

<open_file>
src\components\egresos\subcategorias\FormFields.scss
```src\components\egresos\subcategorias\FormFields.scss
@use "../../../styles/variables" as var;

.form-fields-container {
  width: 100%;
}

.form-group {
  margin-bottom: 1rem;
}

.form-input {
  width: 100%;
  padding: 8px;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 4px;
  background-color: white;
  color: black;
  font-size: 1rem;

  &:focus {
    outline: none;
    border-color: var.$color-principal-estudio;
  }
}

.codigo-sugerido {
  color: var.$color-principal-cliente;
  font-size: 0.9rem;
  margin-top: 0.5rem;
}

.ruta-navegacion {
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

.btn-navegacion {
  background: none;
  border: none;
  color: var.$color-principal-cliente;
  cursor: pointer;
  padding: 4px 8px;

  &:hover {
    text-decoration: underline;
  }
}

.separador-ruta {
  color: var.$color-principal-cliente;
  margin: 0 8px;
}

.lista-subcategorias {
  list-style: none;
  padding: 0;
}

.subcategoria-item {
  margin-bottom: 1rem;
  padding: 0.5rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 4px;
}

.categoria-info {
  display: flex;
  align-items: center;
  margin-bottom: 0.5rem;
}

.categoria-codigo {
  color: var.$color-principal-cliente;
  margin-right: 1rem;
}

.categoria-nombre {
  color: white;
}

.categoria-acciones {
  display: flex;
  gap: 1rem;
}

.btn-agregar-subcategoria {
  background: none;
  border: 1px solid var.$color-principal-cliente;
  color: var.$color-principal-cliente;
  padding: 4px 12px;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background-color: var.$color-principal-cliente;
    color: black;
  }
}

.btn-navegar {
  background: none;
  border: 1px solid var.$color-principal-estudio;
  color: var.$color-principal-estudio;
  padding: 4px 12px;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background-color: var.$color-principal-estudio;
    color: black;
  }
}

.lista-subcategorias {
  margin-left: 20px;
  margin-top: 10px;
  list-style: none;
  padding: 0;
}

.subcategoria-item {
  margin-bottom: 0.5rem;
  padding: 0.5rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 4px;
}

```
</open_file>

<open_file>
src\components\egresos\subcategorias\FormularioSubcategoriaEgreso.scss
```src\components\egresos\subcategorias\FormularioSubcategoriaEgreso.scss
@use "../../../styles/variables" as var;

.formulario-subcategoria-container {
  max-width: 600px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 8px;
  background-color: var.$color-fondo-estudio;
}

.formulario-subcategoria {
  padding: 20px;
  background-color: transparent !important;
  box-shadow: none !important;
  text-align: center !important;
}

.icono-centrado {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.icono-agregar {
  font-size: 30px;
  color: var.$color-principal-estudio;
  cursor: pointer;
  transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;

  &:hover {
    color: white;
    transform: scale(1.3);
  }

  &:active {
    transform: scale(1);
  }
}

.input-container {
  width: 100%;

  input {
    width: 100%;
    padding: 8px;
    border: 1px solid var.$color-principal-cliente;
    border-radius: 4px;
    background-color: white !important;
    color: black !important;
    font-size: 1rem;

    &:focus {
      outline: none;
      border-color: var.$color-principal-estudio;
    }
  }
}

.alerta-error {
  color: #c62828 !important;
  border-radius: 8px !important;
  margin-bottom: 16px !important;
  position: relative !important;
  z-index: 2 !important;
  background-color: var.$color-fondo-estudio !important;
  border: 1px solid #c62828 !important;
}

.alerta-success {
  color: #2e7d32 !important;
  border-radius: 8px !important;
  margin-bottom: 16px !important;
  position: relative !important;
  z-index: 2 !important;
  background-color: black !important;
  border: 1px solid #2e7d32 !important;
}

```
</open_file>

<open_file>
src\components\egresos\subcategorias\FormularioSubcategoriaEgresos.jsx
```src\components\egresos\subcategorias\FormularioSubcategoriaEgresos.jsx
import { useState } from "react";
import PropTypes from "prop-types";
import { Box, Alert } from "@mui/material";
import { FormFields } from "./FormFields";
import { INITIAL_SUBCATEGORIA_FORM_STATE } from "../../../config/constants";
import { FaSave } from "react-icons/fa";
import "./FormularioSubcategoriaEgreso.scss";
import { createSubcategoriaEgreso } from "../../../services/subcategoriaEgresosService";

export const FormularioSubcategoriaEgresos = ({
  onSubcategoriaCreada,
  subcategorias,
}) => {
  const [formData, setFormData] = useState(INITIAL_SUBCATEGORIA_FORM_STATE);
  const [error, setError] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      await createSubcategoriaEgreso(formData);
      setFormData(INITIAL_SUBCATEGORIA_FORM_STATE);
      onSubcategoriaCreada();
    } catch (err) {
      setError(err.message);
    }
  };

  const handleChange = (e) => {
    const value =
      e.target.name === "nivel" ? Number(e.target.value) : e.target.value;
    setFormData({
      ...formData,
      [e.target.name]: value,
    });
  };

  return (
    <Box
      component="form"
      onSubmit={handleSubmit}
      className="formulario-subcategoria"
    >
      {error && (
        <Alert severity="error" className="alerta-error">
          {error}
        </Alert>
      )}

      <div className="icono-centrado">
        <FaSave
          className="icono-agregar"
          onClick={handleSubmit}
          title="Guardar subcategoría"
        />
      </div>

      <div className="input-container">
        <FormFields
          formData={formData}
          handleChange={handleChange}
          subcategoriasEgresos={subcategorias}
        />
      </div>
    </Box>
  );
};

FormularioSubcategoriaEgresos.propTypes = {
  onSubcategoriaCreada: PropTypes.func.isRequired,
  subcategorias: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired,
      categoriaPadre: PropTypes.string,
    })
  ),
};

```
</open_file>

<open_file>
src\components\egresos\subcategorias\GestionSubcategoriasEgresos.jsx
```src\components\egresos\subcategorias\GestionSubcategoriasEgresos.jsx
import { useState, useEffect } from "react";
import { Box, Paper, Alert, Snackbar } from "@mui/material";
import { FormularioSubcategoriaEgresos } from "./FormularioSubcategoriaEgresos";
import { ListaSubcategorias } from "./ListaSubcategorias";
import logo from "../../../assets/odontomed512_512.png";
import logo1 from "../../../assets/odontomedBigLogo.png";
import "./GestionSubcategoriasEgresos.scss";
import { getSubcategoriasEgresos } from "../../../services/subcategoriaEgresosService";

export const GestionSubcategoriasEgresos = () => {
  const [subcategorias, setSubcategorias] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [notification, setNotification] = useState({
    open: false,
    message: "",
    severity: "success",
  });

  const fetchSubcategorias = async () => {
    try {
      setIsLoading(true);
      const data = await getSubcategoriasEgresos();
      setSubcategorias(data);
    } catch (error) {
      console.error("Error al cargar subcategorías:", error);
      setNotification({
        open: true,
        message: "El sistema de subcategorías está en mantenimiento",
        severity: "error",
      });
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchSubcategorias();
  }, []);

  const handleSubcategoriaCreada = async () => {
    await fetchSubcategorias();
    setNotification({
      open: true,
      message: "Subcategoría creada exitosamente",
      severity: "success",
    });
  };

  const handleCloseNotification = () => {
    setNotification({ ...notification, open: false });
  };

  return (
    <>
      <div className="pagina-egresos-container-1">
        <img src={logo} alt="Logo" className="egresos-logo" />
        <img src={logo1} alt="Logo1" className="egresos-logo-1" />
        <p className="egresos-titulo">Registro de subcategorías de egresos</p>
      </div>
      <Box className="subcategorias-container">
        <Paper className="formulario-subcategoria">
          <FormularioSubcategoriaEgresos
            onSubcategoriaCreada={handleSubcategoriaCreada}
            subcategorias={subcategorias}
          />
        </Paper>

        <Paper className="tabla-subcategorias">
          {isLoading ? (
            <p className="mensaje-carga">Cargando subcategorías...</p>
          ) : subcategorias.length === 0 ? (
            <p className="mensaje-vacio">No hay subcategorías registradas</p>
          ) : (
            <ListaSubcategorias subcategorias={subcategorias} />
          )}
        </Paper>

        <Snackbar
          open={notification.open}
          autoHideDuration={6000}
          onClose={handleCloseNotification}
          anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
          className="notification"
        >
          <Alert
            onClose={handleCloseNotification}
            severity={notification.severity}
            className={`alerta-${notification.severity}`}
          >
            {notification.message}
          </Alert>
        </Snackbar>
      </Box>
    </>
  );
};

```
</open_file>

<open_file>
src\components\egresos\subcategorias\GestionSubcategoriasEgresos.scss
```src\components\egresos\subcategorias\GestionSubcategoriasEgresos.scss
@use "../../../styles/variables" as var;

.pagina-egresos-container-1 {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  text-align: center;
}

.notification {
  position: fixed;
  bottom: 24px;
  right: 24px;
  z-index: 1000;
}

.mensaje-carga,
.mensaje-vacio {
  color: var.$color-principal-cliente;
  text-align: center;
  padding: 20px;
  font-size: 1.1rem;
}

.mensaje-vacio {
  color: #666;
  font-style: italic;
}

```
</open_file>

<open_file>
src\components\egresos\subcategorias\ListaSubcategorias.jsx
```src\components\egresos\subcategorias\ListaSubcategorias.jsx
import { useSubcategoriasEgresos } from "../../../hooks/useSubcategoriasEgresos";
import "./ListaSubcategorias.scss";

export const ListaSubcategorias = () => {
  const { subcategorias } = useSubcategoriasEgresos();

  return (
    <div className="lista-subcategorias-wrapper">
      <h2 className="lista-subcategorias-titulo">
        Subcategorías de Egresos Existentes
      </h2>
      <table className="tabla-subcategorias">
        <thead>
          <tr>
            <th className="tabla-header">Código</th>
            <th className="tabla-header">Nombre</th>
            <th className="tabla-header">Categoría Padre</th>
          </tr>
        </thead>
        <tbody>
          {subcategorias.map((subcategoria) => (
            <tr key={subcategoria._id}>
              <td className="tabla-cell">{subcategoria.codigo}</td>
              <td className="tabla-cell">{subcategoria.nombre}</td>
              <td className="tabla-cell">
                {subcategoria.categoriaPadre || "-"}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

```
</open_file>

<open_file>
src\components\egresos\subcategorias\ListaSubcategorias.scss
```src\components\egresos\subcategorias\ListaSubcategorias.scss
@use "../../../styles/variables" as var;

.lista-subcategorias-wrapper {
  margin-top: 0;
}

.lista-subcategorias-titulo {
  color: var.$color-principal-estudio;
  font-weight: 600;
  margin-top: 10px;
  margin-bottom: 0.7rem;
  text-align: center;
  padding-bottom: 5px;
  font-size: 1.4rem;
}

.tabla-subcategorias {
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: auto !important;
  max-width: 600px !important;
  margin: 0 auto !important;
  background-color: transparent !important;
}

.tabla-header {
  background-color: var.$color-principal-estudio !important;
  color: white !important;
  font-weight: 600 !important;
  font-size: 0.9rem !important;
  white-space: nowrap !important;
  padding: 12px 16px !important;
  border: 1px solid var.$color-principal-estudio !important;
}

.tabla-cell {
  color: white !important;
  font-size: 0.8rem !important;
  padding: 4px 16px !important;
  white-space: nowrap !important;
  border-bottom: 1px solid var.$color-principal-estudio !important;
}

/* Ajustes para el ancho de las columnas */
.tabla-header:first-child,
.tabla-cell:first-child {
  width: 20% !important; /* Columna código */
}

.tabla-header:nth-child(2),
.tabla-cell:nth-child(2) {
  width: 60% !important; /* Columna nombre */
}

.tabla-header:last-child,
.tabla-cell:last-child {
  width: 20% !important; /* Columna categoría padre */
  text-align: center !important;
}

/* Centrar el contenido de la celda de categoría padre */
.tabla-cell:last-child {
  text-align: center !important;
}

/* Asegurar que la tabla se mantenga compacta */
.MuiTable-root {
  min-width: unset !important;
}

/* Hacer que el contenedor de la tabla sea responsive */
@media (max-width: 700px) {
  .tabla-subcategorias {
    margin: 0 16px !important;
  }
}

```
</open_file>

<open_file>
src\components\Footer.jsx
```src\components\Footer.jsx
import "../styles/Footer.scss";

export function Footer() {
  return (
    <>
      <div className="footer-container">
        <br />

        <div className="parrafo-footer">
          © Todos los derechos reservados - A<sup>2</sup>B Systems
        </div>
        <img
          className="img-footer"
          src="/EstudioIcono64x64.png"
          alt="estudio"
        />
        <div className="parrafo-footer">Estudio Beguier</div>
        <br />
      </div>
    </>
  );
}

```
</open_file>

<open_file>
src\components\ingresos\categorias\FormFields.jsx
```src\components\ingresos\categorias\FormFields.jsx
import PropTypes from "prop-types";
import { useState, useEffect, useCallback } from "react";
import "./FormFields.scss";

export const FormFields = ({ formData, handleChange, categorias }) => {
  const [siguienteCodigo, setSiguienteCodigo] = useState("");
  const [categoriasNivel, setCategoriasNivel] = useState([]);
  const [rutaNavegacion, setRutaNavegacion] = useState([]);

  const actualizarCodigo = useCallback(
    (nuevoCodigo) => {
      setSiguienteCodigo(nuevoCodigo);
      if (formData.codigo !== nuevoCodigo) {
        handleChange({
          target: {
            name: "codigo",
            value: nuevoCodigo,
          },
        });
      }
    },
    [formData.codigo, handleChange]
  );

  useEffect(() => {
    // Actualizar ruta de navegación
    if (formData.categoriaPadre) {
      const ruta = [];
      let categoriaActual = categorias.find(
        (c) => c.codigo === formData.categoriaPadre
      );

      while (categoriaActual) {
        ruta.unshift(categoriaActual);
        categoriaActual = categorias.find(
          (c) => c.codigo === categoriaActual.categoriaPadre
        );
      }

      setRutaNavegacion(ruta);
    } else {
      setRutaNavegacion([]);
    }

    // Generar siguiente código
    if (formData.categoriaPadre) {
      const categoriaPadre = categorias.find(
        (c) => c.codigo === formData.categoriaPadre
      );
      if (categoriaPadre) {
        const subcategorias = categorias.filter(
          (c) => c.categoriaPadre === formData.categoriaPadre
        );
        const ultimoNumero =
          subcategorias.length > 0
            ? Math.max(
                ...subcategorias.map((c) => parseInt(c.codigo.split(".").pop()))
              )
            : 0;
        const nuevoCodigo = `${categoriaPadre.codigo}.${ultimoNumero + 1}`;
        actualizarCodigo(nuevoCodigo);
      }
    } else {
      const categoriasNivel1 = categorias.filter((c) => !c.categoriaPadre);
      const ultimoNumero =
        categoriasNivel1.length > 0
          ? Math.max(...categoriasNivel1.map((c) => parseInt(c.codigo)))
          : 0;
      const nuevoCodigo = `${ultimoNumero + 1}`;
      actualizarCodigo(nuevoCodigo);
    }

    // Actualizar lista de categorías del nivel actual
    const categoriasDelNivel = categorias.filter((c) =>
      formData.categoriaPadre
        ? c.categoriaPadre === formData.categoriaPadre
        : !c.categoriaPadre
    );
    setCategoriasNivel(categoriasDelNivel);
  }, [formData.categoriaPadre, categorias, actualizarCodigo]);

  const handleAgregarSubcategoria = (categoria) => {
    handleChange({
      target: {
        name: "categoriaPadre",
        value: categoria.codigo,
      },
    });
  };

  const handleNavegar = (categoria) => {
    handleChange({
      target: {
        name: "categoriaPadre",
        value: categoria.codigo,
      },
    });
  };

  const mostrarSubcategorias = (categoria) => {
    const subcategorias = categorias.filter(
      (c) => c.categoriaPadre === categoria.codigo
    );
    return (
      subcategorias.length > 0 && (
        <ul className="lista-subcategorias">
          {subcategorias.map((subcat) => (
            <li key={subcat._id} className="subcategoria-item">
              <div className="categoria-info">
                <span className="categoria-codigo">{subcat.codigo}</span>
                <span className="categoria-nombre">{subcat.nombre}</span>
              </div>
              <div className="categoria-acciones">
                <button
                  type="button"
                  onClick={() => handleNavegar(subcat)}
                  className="btn-navegar"
                >
                  Ver subcategorías
                </button>
                <button
                  type="button"
                  onClick={() => handleAgregarSubcategoria(subcat)}
                  className="btn-agregar-subcategoria"
                >
                  + Agregar Subcategoría
                </button>
              </div>
            </li>
          ))}
        </ul>
      )
    );
  };

  return (
    <div className="form-fields-container">
      {rutaNavegacion.length > 0 && (
        <div className="ruta-navegacion">
          <button
            type="button"
            onClick={() =>
              handleChange({
                target: { name: "categoriaPadre", value: "" },
              })
            }
            className="btn-navegacion"
          >
            Inicio
          </button>
          {rutaNavegacion.map((cat) => (
            <span key={cat._id}>
              <span className="separador-ruta">›</span>
              <button
                type="button"
                onClick={() => handleNavegar(cat)}
                className="btn-navegacion"
              >
                {cat.nombre}
              </button>
            </span>
          ))}
        </div>
      )}

      <div className="form-group">
        <input
          type="text"
          name="nombre"
          value={formData.nombre}
          onChange={handleChange}
          className="form-input"
          placeholder="Nombre de la categoría"
          required
        />
        <div className="codigo-sugerido">Código: {siguienteCodigo}</div>
      </div>

      {categoriasNivel.length > 0 && (
        <div className="categorias-nivel">
          <ul className="lista-categorias">
            {categoriasNivel.map((categoria) => (
              <li key={categoria._id} className="categoria-item">
                <div className="categoria-info">
                  <span className="categoria-codigo">{categoria.codigo}</span>
                  <span className="categoria-nombre">{categoria.nombre}</span>
                </div>
                <div className="categoria-acciones">
                  <button
                    type="button"
                    onClick={() => handleAgregarSubcategoria(categoria)}
                    className="btn-agregar-subcategoria"
                  >
                    + Agregar Subcategoría
                  </button>
                </div>
                {mostrarSubcategorias(categoria)}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

FormFields.propTypes = {
  formData: PropTypes.shape({
    codigo: PropTypes.string,
    nombre: PropTypes.string.isRequired,
    nivel: PropTypes.number,
    categoriaPadre: PropTypes.string,
  }).isRequired,
  handleChange: PropTypes.func.isRequired,
  categorias: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired,
      categoriaPadre: PropTypes.string,
    })
  ).isRequired,
};

```
</open_file>

<open_file>
src\components\ingresos\categorias\FormFields.scss
```src\components\ingresos\categorias\FormFields.scss
@use "../../../styles/variables" as var;

.form-fields-container {
  display: flex;
  flex-direction: column;
  gap: 20px;
  width: 100%;
}

.ruta-navegacion {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px;

  border-radius: 8px;
  overflow-x: auto;
}

.btn-navegacion {
  background: none;
  border: none;
  color: var.$color-principal-estudio;
  cursor: pointer;
  font-size: 0.9rem;
  padding: 4px 8px;
  border-radius: 4px;
}

.btn-navegacion:hover {
  background-color: #e8eaf6;
}

.separador-ruta {
  color: #666;
  margin: 0 4px;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.form-input {
  padding: 12px;
  border: 2px solid var.$color-principal-cliente;
  border-radius: 8px;
  font-size: 1rem;
  width: 100%;
  transition: all 0.3s ease;
  color: white;
}

.form-input:focus {
  outline: none;
  border-color: var.$color-principal-estudio;
}

.codigo-sugerido {
  color: white;
  font-size: 1rem;
  font-weight: 400;
}

.lista-categorias {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.categoria-item {
  padding: 12px;
  border-radius: 8px;
  border: 1px solid var.$color-principal-cliente;
}

.categoria-info {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 8px;
}

.categoria-codigo {
  color: var.$color-principal-cliente;
  font-weight: 600;
  margin-left: 10px;
}

.categoria-nombre {
  color: var.$color-principal-estudio;
  font-weight: 600;
}

.categoria-acciones {
  display: flex;
  gap: 8px;
  margin-top: 8px;
}

.btn-agregar-subcategoria,
.btn-navegar {
  background-color: var.$color-principal-estudio;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.3s ease;
}

.btn-navegar {
  background-color: #2b3371;
}

.btn-agregar-subcategoria:hover,
.btn-navegar:hover {
  opacity: 0.9;
}

.lista-subcategorias {
  list-style: none;
  padding: 0;
  margin: 8px 0 0 24px;
}

.subcategoria-item {
  padding: 8px;

  border-radius: 6px;
  border: 1px solid var.$color-principal-cliente;
  margin-top: 8px;
}

```
</open_file>

<open_file>
src\components\ingresos\categorias\FormularioCategoria.jsx
```src\components\ingresos\categorias\FormularioCategoria.jsx
import { useState } from "react";
import PropTypes from "prop-types";
import { Box, Alert } from "@mui/material";
import { FormFields } from "./FormFields";
import { createCategoria } from "../../../services/categoriasService";
import { INITIAL_FORM_STATE } from "../../../config/constants";
import { FaSave } from "react-icons/fa";
import "./FormularioCategoria.scss";

export const FormularioCategoria = ({ onCategoriaCreada, categorias }) => {
  const [formData, setFormData] = useState(INITIAL_FORM_STATE);
  const [error, setError] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      await createCategoria(formData);
      setFormData(INITIAL_FORM_STATE);
      onCategoriaCreada();
    } catch (err) {
      setError(err.message);
    }
  };

  const handleChange = (e) => {
    const value =
      e.target.name === "nivel" ? Number(e.target.value) : e.target.value;
    setFormData({
      ...formData,
      [e.target.name]: value,
    });
  };

  return (
    <Box
      component="form"
      onSubmit={handleSubmit}
      className="formulario-categoria"
    >
      {error && (
        <Alert severity="error" className="alerta-error">
          {error}
        </Alert>
      )}

      {/* Botón centrado arriba */}
      <div className="icono-centrado">
        <FaSave
          className="icono-agregar"
          onClick={handleSubmit}
          title="Guardar categoría"
        />
      </div>

      <div className="input-container">
        <FormFields
          formData={formData}
          handleChange={handleChange}
          categorias={categorias || []}
        />
      </div>
    </Box>
  );
};

FormularioCategoria.propTypes = {
  onCategoriaCreada: PropTypes.func.isRequired,
  categorias: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired,
      categoriaPadre: PropTypes.string,
    })
  ),
};

```
</open_file>

<open_file>
src\components\ingresos\categorias\FormularioCategoria.scss
```src\components\ingresos\categorias\FormularioCategoria.scss
@use "../../../styles/variables" as var;

.formulario-categoria {
  padding: 20px;
  background-color: transparent !important;
  box-shadow: none !important;
  text-align: center !important;
}

.icono-centrado {
  display: flex;
  justify-content: center;
  margin-bottom: 20px; /* Espacio entre el icono y el input */
}

.icono-agregar {
  font-size: 30px; /* Tamaño del icono */
  color: var.$color-principal-estudio;
  cursor: pointer;
  transition: transform 0.2s ease-in-out, color 0.2s ease-in-out;
}

.icono-agregar:hover {
  color: white; /* Cambia de color al pasar el mouse */
  transform: scale(1.3); /* Efecto de escala */
}

.icono-agregar:active {
  transform: scale(1); /* Reduce la escala al hacer clic */
}

.input-container {
  width: 100%; /* Asegura que el input ocupe todo el espacio disponible */
}

.alerta-error {
  color: #c62828 !important;
  border-radius: 8px !important;
  margin-bottom: 16px !important;
  position: relative !important;
  z-index: 2 !important;
  background-color: var.$color-fondo-estudio !important;
  border: 1px solid #c62828 !important;
}

.alerta-success {
  color: #2e7d32 !important;
  border-radius: 8px !important;
  margin-bottom: 16px !important;
  position: relative !important;
  z-index: 2 !important;
  background-color: black !important;
  border: 1px solid #2e7d32 !important;
}

```
</open_file>

<open_file>
src\components\ingresos\categorias\GestionCategorias.jsx
```src\components\ingresos\categorias\GestionCategorias.jsx
import { useState, useEffect } from "react";
import { Box, Paper, Alert, Snackbar } from "@mui/material";
import { FormularioCategoria } from "./FormularioCategoria";
import { ListaCategorias } from "./ListaCategorias";
import logo from "../../../assets/odontomed512_512.png";
import logo1 from "../../../assets/odontomedBigLogo.png";
import "./GestionCategorias.scss";
import { API_BASE_URL } from "../../../config/constants";

export const GestionCategorias = () => {
  const [categorias, setCategorias] = useState([]);
  const [notification, setNotification] = useState({
    open: false,
    message: "",
    severity: "success",
  });

  const fetchCategorias = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/categorias-ingresos`);
      const data = await response.json();
      setCategorias(data);
    } catch (error) {
      console.error("Error al cargar categorías:", error);
      setNotification({
        open: true,
        message: "Error al cargar las categorías",
        severity: "error",
      });
    }
  };

  useEffect(() => {
    fetchCategorias();
  }, []);

  const handleCategoriaCreada = async () => {
    await fetchCategorias();
    setNotification({
      open: true,
      message: "Categoría creada exitosamente",
      severity: "success",
    });
  };

  const handleCloseNotification = () => {
    setNotification({ ...notification, open: false });
  };

  return (
    <>
      <div className="pagina-ingresos-container-1">
        <img src={logo} alt="Logo" className="ingresos-logo" />
        <img src={logo1} alt="Logo1" className="ingresos-logo-1" />
        <p className="ingresos-titulo">Registro de categorías de ingresos</p>
      </div>
      <Box className="categorias-container">
        <Paper className="formulario-categoria">
          <FormularioCategoria
            onCategoriaCreada={handleCategoriaCreada}
            categorias={categorias}
          />
        </Paper>

        <Paper className="tabla-categorias">
          <ListaCategorias categorias={categorias} />
        </Paper>

        <Snackbar
          open={notification.open}
          autoHideDuration={6000}
          onClose={handleCloseNotification}
          anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
          className="notification"
        >
          <Alert
            onClose={handleCloseNotification}
            severity={notification.severity}
            className={`alerta-${notification.severity}`}
          >
            {notification.message}
          </Alert>
        </Snackbar>
      </Box>
    </>
  );
};

```
</open_file>

<open_file>
src\components\ingresos\categorias\GestionCategorias.scss
```src\components\ingresos\categorias\GestionCategorias.scss
@use "../../../styles/variables" as var;

.pagina-ingresos-container-1 {
  display: flex; /* Flexbox para alinear elementos */
  align-items: center; /* Alinea verticalmente */
  justify-content: center; /* Centra horizontalmente */
  flex-wrap: wrap; /* Permite que los elementos se ajusten en caso de falta de espacio */
  text-align: center;
  margin-top: 20px;
}

.notification {
  position: fixed;
  bottom: 24px;
  right: 24px;
  z-index: 1000;
}

```
</open_file>

<open_file>
src\components\ingresos\categorias\ListaCategorias.jsx
```src\components\ingresos\categorias\ListaCategorias.jsx
import PropTypes from "prop-types";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  Paper,
} from "@mui/material";
import "./ListaCategorias.scss";

export const ListaCategorias = ({ categorias }) => {
  const ordenarCategorias = (cats) => {
    const compararCodigos = (a, b) => {
      const partsA = a.codigo.split(".").map(Number);
      const partsB = b.codigo.split(".").map(Number);

      for (let i = 0; i < Math.max(partsA.length, partsB.length); i++) {
        const numA = partsA[i] || 0;
        const numB = partsB[i] || 0;
        if (numA !== numB) return numA - numB;
      }
      return 0;
    };

    return [...cats].sort(compararCodigos);
  };

  const categoriasOrdenadas = ordenarCategorias(categorias);

  return (
    <>
      <Typography variant="h6" gutterBottom className="lista-categorias-titulo">
        Categorías Existentes
      </Typography>

      <TableContainer component={Paper} className="tabla-categorias">
        <Table>
          <TableHead>
            <TableRow>
              <TableCell className="tabla-header">Código</TableCell>
              <TableCell className="tabla-header">Nombre</TableCell>
              <TableCell className="tabla-header">Categoría Padre</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {categoriasOrdenadas.map((categoria) => (
              <TableRow key={categoria._id} className="tabla-row">
                <TableCell className="tabla-cell">{categoria.codigo}</TableCell>
                <TableCell className="tabla-cell">{categoria.nombre}</TableCell>
                <TableCell className="tabla-cell">
                  {categoria.categoriaPadre || "-"}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </>
  );
};

ListaCategorias.propTypes = {
  categorias: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired, // Mantenemos esto porque se usa en otras partes
      categoriaPadre: PropTypes.string,
    })
  ).isRequired,
};

```
</open_file>

<open_file>
src\components\ingresos\categorias\ListaCategorias.scss
```src\components\ingresos\categorias\ListaCategorias.scss
@use "../../../styles/variables" as var;

.lista-categorias-titulo {
  color: var.$color-principal-estudio;
  font-weight: 600;
  margin-bottom: 0.8rem;
  text-align: center;
  padding-bottom: 10px;
}

.tabla-categorias {
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: auto !important;
  max-width: 600px !important;
  margin: 0 auto !important;
  background-color: transparent !important;
}

.tabla-header {
  background-color: var.$color-principal-estudio !important;
  color: white !important;
  font-weight: 600 !important;
  font-size: 0.9rem !important;
  white-space: nowrap !important;
  padding: 12px 16px !important;
  border: 1px solid var.$color-principal-estudio !important;
}

.tabla-cell {
  color: white !important;
  font-size: 0.8rem !important;
  padding: 4px 16px !important;
  white-space: nowrap !important;
  border-bottom: 1px solid var.$color-principal-estudio !important;
}

/* Ajustes para el ancho de las columnas */
.tabla-header:first-child,
.tabla-cell:first-child {
  width: 20% !important; /* Columna código */
}

.tabla-header:nth-child(2),
.tabla-cell:nth-child(2) {
  width: 60% !important; /* Columna nombre */
}

.tabla-header:last-child,
.tabla-cell:last-child {
  width: 20% !important; /* Columna categoría padre - más pequeña */
  text-align: center !important; /* Centrar contenido */
}

/* Centrar el contenido de la celda de categoría padre */
.tabla-cell:last-child {
  text-align: center !important;
}

/* Asegurar que la tabla se mantenga compacta */
.MuiTable-root {
  min-width: unset !important;
}

/* Hacer que el contenedor de la tabla sea responsive */
@media (max-width: 700px) {
  .tabla-categorias {
    margin: 0 16px !important;
  }
}

```
</open_file>

<open_file>
src\components\ingresos\Ingresos.jsx
```src\components\ingresos\Ingresos.jsx
import { useState, useEffect } from "react";
import logo from "../../assets/odontomed512_512.png";
import logo1 from "../../assets/odontomedBigLogo.png";
import "./Ingresos.scss";
import { FaPlusCircle, FaCashRegister, FaSitemap } from "react-icons/fa";
import { Link } from "react-router-dom";
import { ListaCategorias } from "./categorias/ListaCategorias";
import { API_BASE_URL } from "../../config/constants";
import { ListadoIngresos } from "./registro/ListadoIngresos";

export const Ingresos = () => {
  const [categorias, setCategorias] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCategorias = async () => {
      try {
        const response = await fetch(`${API_BASE_URL}/api/categorias-ingresos`);

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(
            `Error al cargar las categorías: ${
              errorData.mensaje || response.statusText
            }`
          );
        }
        const data = await response.json();
        setCategorias(data);
      } catch (err) {
        setError(err.message);
      }
    };

    fetchCategorias();
  }, []);

  return (
    <>
      <div className="pagina-ingresos-container">
        <img src={logo} alt="Logo" className="ingresos-logo" />
        <img src={logo1} alt="Logo1" className="ingresos-logo-1" />
        <p className="ingresos-titulo">Gestión de Ingresos</p>
      </div>

      <div className="pagina-ingresos-container">
        <Link to="/registar-ingresos">
          <button className="btn-reg-ingresos">
            <FaCashRegister className="btn-ingresos-icon" />
            Registrar Ingresos
          </button>
        </Link>
        <Link to="/agregar-ingresos">
          <button className="btn-agregar-ingresos">
            <FaPlusCircle className="btn-ingresos-icon" />
            Agregar Categorías
          </button>
        </Link>
        <Link to="/agregar-subcategorias-ingresos">
          <button className="btn-subcategorias-ingresos">
            <FaSitemap className="btn-ingresos-icon" />
            Agregar Subcategorías
          </button>
        </Link>
      </div>

      <ListadoIngresos />

      <div className="tabla-container">
        {error ? (
          <div className="error-message">{error}</div>
        ) : (
          <ListaCategorias categorias={categorias} />
        )}
      </div>
    </>
  );
};

```
</open_file>

<open_file>
src\components\ingresos\Ingresos.scss
```src\components\ingresos\Ingresos.scss
@use "../../styles/variables" as var;

/* Elimina el subrayado de todos los enlaces */
a {
  text-decoration: none; /* Elimina el subrayado */
}

.pagina-ingresos-container {
  display: flex; /* Flexbox para alinear elementos */
  align-items: center; /* Alinea verticalmente */
  justify-content: center; /* Centra horizontalmente */
  flex-wrap: wrap; /* Permite que los elementos se ajusten en caso de falta de espacio */
  text-align: center;
  margin: 20px 0; /* Espaciado vertical */
}

.ingresos-logo {
  width: 55px; /* Tamaño del primer logo */
  margin-right: 10px; /* Espacio entre los logos */
}

.ingresos-logo-1 {
  width: 180px; /* Tamaño del segundo logo */
  margin-left: 10px; /* Espacio entre los logos */
  margin-top: 10px;
}

.ingresos-titulo {
  font-size: 2.3rem;
  color: var.$color-principal-estudio; /* O cualquier color que desees */
  margin-top: 10px; /* Espaciado superior */
  margin-left: 25px;
  font-weight: 600;
}

.btn-reg-ingresos,
.btn-agregar-ingresos,
.btn-mostar-ingresos {
  display: flex; /* Flexbox para alinear icono y texto */
  align-items: center; /* Alinea icono y texto verticalmente */
  justify-content: flex-start; /* Icono y texto alineados al inicio */
  background-color: transparent; /* Fondo transparente */
  color: white;
  border: 2px solid; /* Borde visible */
  border-radius: 30px; /* Bordes redondeados */
  padding: 10px 15px;
  margin: 10px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-agregar-ingresos {
  border-color: white;
  background-color: black; /* Fondo suave */
  color: white; /* Color del texto */
  font-weight: 700;
}

.btn-agregar-ingresos:hover {
  background-color: white; /* Fondo más oscuro al pasar el cursor */
  color: black; /* Color del texto al pasar el cursor */
  border-color: rgb(167, 160, 160);
}

.btn-reg-ingresos {
  border-color: var.$color-principal-estudio; /* Verde para ingresos */
  background-color: black; /* Fondo suave */
  color: var.$color-principal-estudio; /* Color del texto */
  font-weight: 700;
}

.btn-reg-ingresos:hover {
  background-color: var.$color-principal-estudio; /* Fondo más oscuro al pasar el cursor */
  color: white; /* Color del texto al pasar el cursor */
  border-color: rgb(167, 160, 160);
}

.btn-mostar-ingresos {
  border-color: var.$color-principal-cliente; /* Rojo para gastos */
  background-color: black; /* Fondo suave */
  color: var.$color-principal-cliente; /* Color del texto */
  font-weight: 700;
}

.btn-mostar-ingresos:hover {
  background-color: var.$color-principal-cliente; /* Fondo más oscuro al pasar el cursor */
  color: white; /* Color del texto al pasar el cursor */
  border-color: rgb(167, 160, 160);
}

.btn-ingresos-icon {
  margin-right: 10px; /* Espacio entre el icono y el texto */
  font-size: 1.5rem; /* Tamaño del icono */
  background-color: transparent; /* Fondo transparente */
}

.niveles-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 20px;
}

.niveles-columnas-wrapper {
  display: flex;
  gap: 20px; /* Espacio entre columnas */
  width: 100%;
  justify-content: flex-start; /* Alineación horizontal de columnas */
}

.columna-niveles {
  display: flex;
  flex-direction: column;
  gap: 10px; /* Espacio entre niveles dentro de una columna */
}

.nivel {
  background-color: #1c1c1c; /* Fondo de cada nivel */
  color: white;
  padding: 10px;
  border-radius: 5px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.subniveles {
  margin-left: 20px; /* Desplazamiento de los subniveles */
  margin-top: 10px;
}

.btn-agregar-subnivel {
  background-color: transparent;
  color: white;
  border: 2px solid white;
  border-radius: 30px;
  padding: 5px 10px;
  cursor: pointer;
  font-size: 0.9rem;
}

.btn-agregar-subnivel:hover {
  background-color: white;
  color: black;
}

/* NIVELES  componente AgregarIngresos*/

.niveles-container {
  display: flex; /* Renderiza los niveles en columnas horizontales */
  flex-direction: row; /* Asegura que las columnas estén en fila */
  gap: 20px; /* Espacio entre columnas */
  align-items: flex-start; /* Alinea verticalmente al inicio */
  margin-top: 20px;
  width: 100%; /* Asegura que ocupe todo el ancho */
  margin-left: 20px;
}

.nivel-titulo {
  color: var.$color-principal-estudio; /* Borde visible */
  font-size: 1.2em;
  margin-left: 5px;
  margin-top: 0px;
}

.nivel-column {
  border: 1px solid var.$color-principal-estudio; /* Borde visible */
  padding: 2px;
  border-radius: 5px;
  width: auto; /* Ajusta el ancho de cada columna */
}

.nivel {
  display: flex; /* Coloca los elementos en línea */
  justify-content: space-between; /* Espacio entre nombre y botón */
  align-items: center;
  background-color: black; /* Fondo para cada nivel */
  color: white;
  padding: 10px;
  border-radius: 5px;
  transition: all 0.3s ease-in-out;
}

.nivel:hover {
  border: 1px solid var.$color-principal-estudio; /* Borde visible al pasar el cursor */
}

.nivel-opcion {
  cursor: pointer;
  padding: 5px;
  font-size: 1rem;
  display: inline-block;
  border-radius: 3px;
  transition: background-color 0.3s;
}

.nivel-opcion:hover {
  background-color: var.$color-principal-estudio;
  color: white;
}

.nivel-opcion.seleccionado {
  background-color: var.$color-principal-cliente;
  border-color: white;
  color: white;
}

.btn-agregar-subnivel {
  margin-left: 10px;
  background-color: var.$color-principal-estudio;
  color: white;
  border: none;
  border-radius: 5px;
  padding: 5px 15px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.3s ease-in-out;
}

.btn-agregar-subnivel:hover {
  background-color: #2b8f7d;
  color: white;
}

.ingreso-seleccionado {
  margin-top: 10px;
  color: #2b8f7d;
  margin-left: 40px;
  font-size: 1.1em;
  font-weight: 500;
}

.btn-subcategorias-ingresos {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: black;
  color: #a0a0a0;
  border: 2px solid #a0a0a0;
  border-radius: 25px;
  padding: 10px 20px;
  font-size: 1rem;
  cursor: pointer;
  gap: 8px;
  font-weight: 700;
  min-width: 200px;
  transition: all 0.3s ease;

  .btn-ingresos-icon {
    color: #a0a0a0;
    transition: all 0.3s ease;
  }

  &:hover {
    background-color: #403f3f;
    color: white;
    border-color: rgb(167, 160, 160);

    .btn-ingresos-icon {
      color: white;
      background-color: transparent !important;
    }
  }
}

.btn-datos-ingresos {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: black;
  color: #4a90e2; // Un azul suave
  border: 2px solid #4a90e2;
  border-radius: 25px;
  padding: 10px 20px;
  font-size: 1rem;
  cursor: pointer;
  gap: 8px;
  font-weight: 700;
  min-width: 200px;
  transition: all 0.3s ease;
  margin-left: 10px;

  .btn-ingresos-icon {
    color: #4a90e2;
    transition: all 0.3s ease;
  }

  &:hover {
    background-color: #4a90e2;
    color: white;
    border-color: rgb(167, 160, 160);

    .btn-ingresos-icon {
      color: white;
      background-color: transparent !important;
    }
  }
}

```
</open_file>

<open_file>
src\components\ingresos\registro\BotonesFormulario.jsx
```src\components\ingresos\registro\BotonesFormulario.jsx
import PropTypes from "prop-types";

export const BotonesFormulario = ({ onCancelar }) => {
  return (
    <div className="botones-formulario">
      <button type="button" className="boton-cancelar" onClick={onCancelar}>
        Cancelar
      </button>
      <button type="submit" className="boton-guardar">
        Guardar
      </button>
    </div>
  );
};

BotonesFormulario.propTypes = {
  onCancelar: PropTypes.func.isRequired,
};

```
</open_file>

<open_file>
src\components\ingresos\registro\FormularioIngreso.jsx
```src\components\ingresos\registro\FormularioIngreso.jsx
import { useState } from "react";
import PropTypes from "prop-types";
import { EntradaMonetaria } from "../../comunes/EntradaMonetaria";
import { EntradaFecha } from "../../comunes/EntradaFecha";
import { RutaCategoria } from "./RutaCategoria";
import { BotonesFormulario } from "./BotonesFormulario";
import { ListadoIngresos } from "./ListadoIngresos";
import "./FormularioIngreso.scss";

export const FormularioIngreso = ({
  categoriaSeleccionada,
  rutaCompleta,
  onGuardar,
  onCancelar,
}) => {
  const [fecha, setFecha] = useState(() => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, "0");
    const day = String(today.getDate()).padStart(2, "0");
    return `${year}-${month}-${day}`;
  });
  const [importe, setImporte] = useState("");
  const [error, setError] = useState("");
  const [actualizarListado, setActualizarListado] = useState(false);
  const [ultimoIngresoId, setUltimoIngresoId] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    if (!importe || parseFloat(importe) <= 0) {
      setError("El importe debe ser mayor a 0");
      return;
    }

    const ingresoData = {
      fecha,
      importe: parseFloat(importe),
      categoria: {
        codigo: categoriaSeleccionada.codigo,
        nombre: categoriaSeleccionada.nombre,
        rutaCategoria: rutaCompleta,
      },
    };

    try {
      const nuevoIngreso = await onGuardar(ingresoData);
      setUltimoIngresoId(nuevoIngreso._id);
      setActualizarListado((prev) => !prev);
      setImporte("");

      setTimeout(() => {
        setUltimoIngresoId(null);
      }, 3000);
    } catch (error) {
      console.error("Error en el formulario:", error);
      setError(error.message || "Error al guardar el ingreso");
    }
  };

  return (
    <div className="container-general">
      <div className="formulario-ingreso-container">
        <h2 className="formulario-titulo">Registrar Ingreso</h2>
        <RutaCategoria rutaCompleta={rutaCompleta} />
        {error && <div className="error-mensaje">{error}</div>}
        <form onSubmit={handleSubmit} className="formulario-ingreso">
          <div className="campos-inline">
            <div className="campo-formulario">
              <label htmlFor="fecha">Fecha:</label>
              <EntradaFecha
                id="fecha"
                valor={fecha}
                alCambiar={setFecha}
                requerido
              />
            </div>
            <div className="campo-formulario">
              <label htmlFor="importe">Importe:</label>
              <EntradaMonetaria
                valor={importe}
                alCambiar={setImporte}
                placeholder="0,00"
              />
            </div>
          </div>
          <BotonesFormulario onCancelar={onCancelar} />
        </form>
      </div>
      <ListadoIngresos
        key={actualizarListado}
        ultimoIngresoId={ultimoIngresoId}
      />
    </div>
  );
};

FormularioIngreso.propTypes = {
  categoriaSeleccionada: PropTypes.shape({
    codigo: PropTypes.string.isRequired,
    nombre: PropTypes.string.isRequired,
  }).isRequired,
  rutaCompleta: PropTypes.arrayOf(
    PropTypes.shape({
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
    })
  ).isRequired,
  onGuardar: PropTypes.func.isRequired,
  onCancelar: PropTypes.func.isRequired,
};

```
</open_file>

<open_file>
src\components\ingresos\registro\FormularioIngreso.scss
```src\components\ingresos\registro\FormularioIngreso.scss
@use "../../../styles/variables" as var;

.container-general {
  margin-top: 110px;
}

.formulario-ingreso-container {
  max-width: 600px;
  margin: 5px auto;
  padding: 20px;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 8px;
  box-shadow: 0 1px 10px rgba(175, 173, 173, 0.561);
}

.formulario-titulo {
  color: var.$color-principal-estudio;
  font-size: 1.8rem;
  margin-bottom: 20px;
  text-align: center;
}

.ruta-categoria {
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 10px;
  color: var.$color-principal-estudio;
  font-weight: 500;
  text-align: center;
}

.formulario-ingreso {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.campos-inline {
  display: flex;
  gap: 30px;
  justify-content: space-between;
}

.campo-formulario {
  flex: 1;
}

.campo-formulario label {
  display: block;
  color: var.$color-principal-cliente;
  font-size: 1rem;
  margin-bottom: 4px;
}

.campo-formulario input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
  background-color: #fff;
}

.input-fecha {
  cursor: pointer;
  padding-right: 30px;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23666' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='4' width='18' height='18' rx='2' ry='2'%3E%3C/rect%3E%3Cline x1='16' y1='2' x2='16' y2='6'%3E%3C/line%3E%3Cline x1='8' y1='2' x2='8' y2='6'%3E%3C/line%3E%3Cline x1='3' y1='10' x2='21' y2='10'%3E%3C/line%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 8px center;
  background-size: 16px;
}

.input-importe {
  text-align: right;
}

.campo-formulario input:focus {
  border-color: var.$color-principal-cliente;
  outline: none;
  box-shadow: 0 0 0 2px rgba(64, 181, 166, 0.2);
}

.botones-formulario {
  display: flex;
  gap: 20px;
  justify-content: flex-end;
  margin-top: 10px;
}

.boton-cancelar,
.boton-guardar {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.boton-cancelar {
  background-color: #f5f5f5;
  color: #666;
}

.boton-guardar {
  background-color: var.$color-principal-cliente;
  color: white;
}

.boton-cancelar:hover {
  background-color: #5f5b5b;
  color: white;
}

.boton-guardar:hover {
  background-color: var.$color-principal-estudio;
}

/* Estilos para el calendario nativo */
input[type="date"]::-webkit-calendar-picker-indicator {
  opacity: 0;
  cursor: pointer;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

input[type="date"] {
  position: relative;
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal-content {
  background: white;
  padding: 20px;
  border-radius: 8px;
  text-align: center;
  max-width: 400px;
  width: 90%;

  h2 {
    color: var.$color-principal-estudio;
    margin-bottom: 15px;
  }

  p {
    margin-bottom: 20px;
  }
}

.modal-buttons {
  display: flex;
  justify-content: center;
  gap: 10px;

  button {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .btn-confirmar {
    background-color: var.$color-principal-estudio;
    color: white;
  }

  .btn-cancelar {
    background-color: var.$color-principal-cliente;
    color: white;
  }
}

```
</open_file>

<open_file>
src\components\ingresos\registro\IngresosDatosAdicionales.jsx
```src\components\ingresos\registro\IngresosDatosAdicionales.jsx
import PropTypes from "prop-types";
import { useState } from "react";
import { updateIngreso } from "../../../services/ingresosService";
import { useSubcategoriasIngresos } from "../../../hooks/useSubcategoriasIngresos";
import { FaChevronRight, FaUndo } from "react-icons/fa";
import "./IngresosDatosAdicionales.scss";

export const IngresosDatosAdicionales = ({ ingreso, onClose, onUpdate }) => {
  const [observaciones, setObservaciones] = useState(
    ingreso.observaciones || ""
  );
  const [subcategoriaSeleccionada, setSubcategoriaSeleccionada] = useState(
    ingreso.subcategoria || null
  );
  const [isLoading, setIsLoading] = useState(false);
  const {
    subcategorias,
    cargando,
    error,
    subcategoriasVisibles,
    seleccionarSubcategoria,
    resetearSeleccion,
    rutaSeleccion,
  } = useSubcategoriasIngresos();

  const formatearFecha = (fecha) => {
    const date = new Date(fecha);
    const options = {
      timeZone: "America/Argentina/Buenos_Aires",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
    };
    return date.toLocaleDateString("es-AR", options);
  };

  const formatearImporte = (importe) => {
    return new Intl.NumberFormat("es-AR", {
      style: "currency",
      currency: "ARS",
    }).format(importe);
  };

  const adjustTextareaHeight = (e) => {
    const textarea = e.target;
    textarea.style.height = "auto";
    textarea.style.height = `${textarea.scrollHeight}px`;
  };

  const handleSeleccionarSubcategoria = (subcategoria) => {
    const tieneHijos = subcategorias.some(
      (sub) => sub.categoriaPadre === subcategoria.codigo
    );

    if (tieneHijos) {
      seleccionarSubcategoria(subcategoria);
    } else {
      setSubcategoriaSeleccionada({
        ...subcategoria,
        rutaSubcategoria: [...rutaSeleccion, subcategoria],
      });
      seleccionarSubcategoria(subcategoria);
    }
  };

  const handleResetear = () => {
    resetearSeleccion();
    setSubcategoriaSeleccionada(null);
  };

  const handleGuardar = async () => {
    try {
      setIsLoading(true);
      const ingresoActualizado = {
        ...ingreso,
        observaciones,
        subcategoria: subcategoriaSeleccionada,
      };
      await updateIngreso(ingreso._id, ingresoActualizado);
      onUpdate();
      onClose();
    } catch (error) {
      console.error("Error al guardar:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="datos-adicionales-overlay">
      <div className="datos-adicionales-container">
        <p>Ingresos - Datos Adicionales</p>
        <div className="datos-content">
          <div className="dato-grupo">
            <label>Fecha:</label>
            <span>{formatearFecha(ingreso.fecha)}</span>
          </div>
          <div className="dato-grupo">
            <label>Ruta Completa:</label>
            <span>
              {ingreso.categoria.rutaCategoria
                .map((cat) => cat.nombre)
                .join(" > ")}
            </span>
          </div>
          <div className="dato-grupo">
            <label>Importe:</label>
            <span>{formatearImporte(ingreso.importe)}</span>
          </div>
          <div className="dato-grupo">
            <label>Subcategoría:</label>
            {cargando ? (
              <span>Cargando subcategorías...</span>
            ) : error ? (
              <span className="error">{error}</span>
            ) : (
              <div className="subcategorias-navegacion">
                {subcategoriaSeleccionada && (
                  <div className="ruta-actual">
                    {subcategoriaSeleccionada.rutaSubcategoria.length > 1 && (
                      <button
                        className="btn-reset"
                        onClick={handleResetear}
                        title="Volver al inicio"
                      >
                        <FaUndo />
                      </button>
                    )}
                    {subcategoriaSeleccionada.rutaSubcategoria.map(
                      (sub, index) => (
                        <span key={sub.codigo}>
                          {sub.nombre}
                          {index <
                            subcategoriaSeleccionada.rutaSubcategoria.length -
                              1 && <FaChevronRight />}
                        </span>
                      )
                    )}
                  </div>
                )}

                <div className="subcategorias-grid">
                  {subcategoriasVisibles.map((sub) => (
                    <button
                      key={sub.codigo}
                      className={`btn-subcategoria ${
                        subcategoriaSeleccionada?.codigo === sub.codigo
                          ? "seleccionada"
                          : ""
                      }`}
                      onClick={() => handleSeleccionarSubcategoria(sub)}
                    >
                      {sub.nombre}
                    </button>
                  ))}
                </div>

                {subcategoriaSeleccionada &&
                  subcategoriaSeleccionada.rutaSubcategoria.length > 1 && (
                    <div className="subcategoria-seleccionada">
                      <span>✓ {subcategoriaSeleccionada.nombre}</span>
                      <small>
                        Subcategoría seleccionada - Puede guardar los cambios
                      </small>
                    </div>
                  )}
              </div>
            )}
          </div>
          <div className="dato-grupo">
            <label>Observaciones:</label>
            <textarea
              value={observaciones}
              onChange={(e) => {
                setObservaciones(e.target.value);
                adjustTextareaHeight(e);
              }}
              onInput={adjustTextareaHeight}
              className="observaciones-input"
              placeholder="Ingrese sus observaciones aquí..."
            />
          </div>
        </div>
        <div className="botones-container">
          <button
            className="btn-cancelar"
            onClick={onClose}
            disabled={isLoading}
          >
            Cancelar
          </button>
          <button
            className="btn-guardar"
            onClick={handleGuardar}
            disabled={isLoading}
          >
            {isLoading ? "Guardando..." : "Guardar"}
          </button>
        </div>
      </div>
    </div>
  );
};

IngresosDatosAdicionales.propTypes = {
  ingreso: PropTypes.shape({
    _id: PropTypes.string.isRequired,
    fecha: PropTypes.string.isRequired,
    importe: PropTypes.number.isRequired,
    observaciones: PropTypes.string,
    categoria: PropTypes.shape({
      rutaCategoria: PropTypes.arrayOf(
        PropTypes.shape({
          nombre: PropTypes.string.isRequired,
        })
      ).isRequired,
    }).isRequired,
    subcategoria: PropTypes.shape({
      codigo: PropTypes.string,
      nombre: PropTypes.string,
      rutaSubcategoria: PropTypes.arrayOf(
        PropTypes.shape({
          codigo: PropTypes.string,
          nombre: PropTypes.string,
        })
      ),
    }),
  }).isRequired,
  onClose: PropTypes.func.isRequired,
  onUpdate: PropTypes.func.isRequired,
};

```
</open_file>

<open_file>
src\components\ingresos\registro\IngresosDatosAdicionales.scss
```src\components\ingresos\registro\IngresosDatosAdicionales.scss
@use "../../../styles/variables" as var;

.datos-adicionales-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.datos-adicionales-container {
  background: white;
  padding: 20px;
  border-radius: 5px;
  width: 90%;
  max-width: 500px;
  max-height: 90vh;
  overflow-y: auto;
}

.datos-content {
  margin-bottom: 20px;
}

.dato-grupo {
  margin-bottom: 15px;

  label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
  }

  span {
    display: block;
  }
}

.observaciones-input {
  width: 100%;
  min-height: 100px;
  padding: 8px;
  margin-top: 5px;
  border: 1px solid #ddd;
  border-radius: 4px;
  resize: vertical;
}

.botones-container {
  display: flex;
  justify-content: flex-end;
  gap: 10px;

  button {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;

    &:disabled {
      opacity: 0.7;
      cursor: not-allowed;
    }
  }

  .btn-cancelar {
    background-color: #f0f0f0;
  }

  .btn-guardar {
    background-color: #4caf50;
    color: white;
  }
}

.subcategorias-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin: 10px 0;

  .btn-subcategoria {
    background: none;
    border: 1px solid var.$color-principal-cliente;
    color: white;
    cursor: pointer;
    padding: 4px 12px;
    font-size: 0.85rem;
    border-radius: 15px;
    transition: all 0.3s ease;

    &:hover {
      background-color: rgba(var.$color-principal-cliente, 0.2);
    }

    &.seleccionada {
      background-color: var.$color-principal-cliente;
      color: white;
    }
  }
}

.ruta-actual {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 10px;

  .btn-reset {
    background: none;
    border: none;
    cursor: pointer;
    color: var.$color-principal-cliente;
    padding: 4px;
    margin-right: 4px;
    transition: all 0.3s ease;

    &:hover {
      color: var.$color-principal-estudio;
      transform: scale(1.1);
    }
  }

  span {
    display: flex;
    align-items: center;
    gap: 8px;
    color: white;
    font-size: 0.9rem;
  }
}

.subcategoria-seleccionada {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 2px;
  gap: 8px;

  span {
    color: white;
    display: flex;
    align-items: center;
    gap: 4px;
  }

  small {
    color: var.$color-principal-estudio;
    font-size: 0.85rem;
  }
}

.error {
  color: red;
  margin-top: 5px;
}

```
</open_file>

<open_file>
src\components\ingresos\registro\ListadoIngresos.jsx
```src\components\ingresos\registro\ListadoIngresos.jsx
import { useState, useEffect } from "react";
import PropTypes from "prop-types";
import { getIngresos } from "../../../services/ingresosService";
import { FaPencilAlt } from "react-icons/fa";
import "./ListadoIngresos.scss";
import { IngresosDatosAdicionales } from "./IngresosDatosAdicionales";
import { useSubcategoriasIngresos } from "../../../hooks/useSubcategoriasIngresos";

export const ListadoIngresos = ({ ultimoIngresoId }) => {
  const [ingresos, setIngresos] = useState([]);
  const [error, setError] = useState("");
  const [ingresoSeleccionado, setIngresoSeleccionado] = useState(null);
  const { subcategorias } = useSubcategoriasIngresos();

  useEffect(() => {
    cargarIngresos();
  }, []);

  const cargarIngresos = async () => {
    try {
      const data = await getIngresos();
      const ingresosOrdenados = data.sort(
        (a, b) => new Date(b.fecha).getTime() - new Date(a.fecha).getTime()
      );
      setIngresos(ingresosOrdenados);
    } catch (error) {
      setError(error.message);
    }
  };

  const formatearFecha = (fecha) => {
    const date = new Date(fecha);
    const options = {
      timeZone: "America/Argentina/Buenos_Aires",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
    };
    return date.toLocaleDateString("es-AR", options);
  };

  const formatearImporte = (importe) => {
    return new Intl.NumberFormat("es-AR", {
      style: "currency",
      currency: "ARS",
    }).format(importe);
  };

  const handleClickLapiz = (ingreso) => {
    setIngresoSeleccionado(ingreso);
  };

  if (error) {
    return <div className="error-mensaje">{error}</div>;
  }

  return (
    <div className="listado-ingresos-container">
      <h3 className="listado-titulo">Últimos Ingresos Registrados</h3>
      <div className="tabla-responsive">
        <table className="tabla-ingresos">
          <thead>
            <tr>
              <th>FECHA</th>
              <th>CATEGORÍA</th>
              <th>SUBCATEGORÍA</th>
              <th>IMPORTE</th>
              <th>ACCIONES</th>
              <th>OBS</th>
            </tr>
          </thead>
          <tbody>
            {ingresos.map((ingreso) => (
              <tr
                key={ingreso._id}
                className={
                  ingreso._id === ultimoIngresoId ? "nuevo-ingreso" : ""
                }
              >
                <td>{formatearFecha(ingreso.fecha)}</td>
                <td>
                  <div className="categoria-container">
                    <span className="categoria-cell">
                      {ingreso.categoria.nombre}
                    </span>
                    <div className="categoria-tooltip">
                      <div className="tooltip-content">
                        {ingreso.categoria.rutaCategoria
                          .map((cat) => cat.nombre)
                          .join(" → ")}
                      </div>
                    </div>
                  </div>
                </td>
                <td>
                  {ingreso.subcategoria ? (
                    <div className="subcategoria-container">
                      <span className="subcategoria-cell">
                        {ingreso.subcategoria.nombre}
                      </span>
                      <div className="subcategoria-tooltip">
                        <div className="tooltip-content">
                          {(() => {
                            const rutaSubcategoria = [];
                            let actual = subcategorias.find(
                              (s) => s.codigo === ingreso.subcategoria.codigo
                            );

                            while (
                              actual &&
                              !ingreso.categoria.rutaCategoria.find(
                                (cat) => cat.nombre === actual.nombre
                              )
                            ) {
                              rutaSubcategoria.unshift(actual.nombre);
                              actual = subcategorias.find(
                                (s) => s.codigo === actual.categoriaPadre
                              );
                            }

                            return rutaSubcategoria.join(" → ");
                          })()}
                        </div>
                      </div>
                    </div>
                  ) : (
                    "-"
                  )}
                </td>
                <td className="importe">{formatearImporte(ingreso.importe)}</td>
                <td className="acciones">
                  <button
                    className="btn-accion"
                    onClick={() => handleClickLapiz(ingreso)}
                  >
                    <FaPencilAlt />
                  </button>
                </td>
                <td className="observaciones">
                  {ingreso.observaciones?.trim() ? (
                    <span
                      className="tiene-obs"
                      title={ingreso.observaciones}
                      onClick={() => handleClickLapiz(ingreso)}
                    >
                      Sí
                    </span>
                  ) : (
                    "No"
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {ingresoSeleccionado && (
        <IngresosDatosAdicionales
          ingreso={ingresoSeleccionado}
          onClose={() => setIngresoSeleccionado(null)}
          onUpdate={cargarIngresos}
        />
      )}
    </div>
  );
};

ListadoIngresos.propTypes = {
  ultimoIngresoId: PropTypes.string,
};

```
</open_file>

<open_file>
src\components\ingresos\registro\ListadoIngresos.scss
```src\components\ingresos\registro\ListadoIngresos.scss
@use "../../../styles/variables" as var;

.listado-ingresos-container {
  margin: auto;
  padding: 10px;
  max-width: 70%;
}

.listado-titulo {
  color: var.$color-principal-estudio;
  font-size: 1.5rem;
  margin: 20px 0 20px 0;
  text-align: center;
}

.tabla-responsive {
  overflow-x: auto;
}

.tabla-ingresos {
  width: 100%;
  border-collapse: collapse;
  margin: 0 auto;

  th,
  td {
    padding: 4px 15px;
    vertical-align: middle;
  }

  tr {
    background-color: transparent;
    transition: background-color 0.3s ease;

    &:hover {
      background-color: rgba(0, 0, 0, 0.4);

      td {
        background-color: rgba(0, 0, 0, 0.4);

        .subcategoria-container,
        .subcategoria-cell,
        .btn-accion {
          background-color: rgba(0, 0, 0, 0.4);
        }
      }
    }
  }

  th {
    color: var.$color-principal-estudio;
    font-weight: 700;
    border-bottom: 2px solid var.$color-principal-cliente;

    &:first-child,
    &:nth-child(2) {
      text-align: left;
    }
    &:last-child {
      text-align: center;
    }
  }

  td {
    color: white;
    font-size: 0.9rem;

    &:first-child,
    &:nth-child(2) {
      text-align: left;
    }
  }

  td.importe {
    text-align: right;
    font-weight: 500;
    color: white;
  }

  th,
  td {
    &:first-child {
      width: 15%;
    }
    &:nth-child(2) {
      width: 25%;
    }
    &:nth-child(3) {
      width: 25%;
      text-align: center;
    }
    &:nth-child(4) {
      width: 15%;
      text-align: right;
    }
    &:nth-child(5) {
      width: 10%;
      text-align: center;
    }
    &:last-child {
      width: 10%;
      text-align: left;
    }
  }

  tbody {
    tr {
      background-color: var.$color-fondo-estudio;
      border-bottom: 1px solid var.$color-principal-cliente;
      transition: background-color 0.2s ease;
      height: 32px;

      &:last-child {
        border-bottom: 1px solid var.$color-principal-cliente;
      }

      &:hover {
        background-color: rgba(0, 0, 0, 0.4);

        .subcategoria-container,
        .subcategoria-cell,
        .btn-accion,
        .btn-accion svg {
          background-color: inherit;
        }
      }

      td {
        background-color: inherit;
        padding: 0.25rem 0.75rem;
        color: white;
      }
    }
  }

  .acciones {
    text-align: center;

    .btn-accion {
      background: none;
      border: none;
      color: var.$color-principal-cliente;
      cursor: pointer;
      transition: color 0.3s ease;
      text-align: center;

      &:hover {
        color: rgb(193, 186, 186);
        transform: scale(1.3);
      }
    }
  }
}

@media (max-width: 768px) {
  .tabla-ingresos {
    th,
    td {
      padding: 8px;
      font-size: 0.9rem;
    }
  }
}

.nuevo-ingreso {
  animation: resaltarNuevo 3s ease;
}

@keyframes resaltarNuevo {
  0% {
    color: #ff0000;
  }
  70% {
    color: #ff0000;
  }
  100% {
    color: white;
  }
}

.nuevo-ingreso td {
  animation: resaltarNuevo 3s ease;
}

.observaciones {
  text-align: left;
  padding-left: 20px !important;

  .tiene-obs {
    color: var.$color-principal-cliente;
    cursor: pointer;
    font-weight: 500;
    font-size: 1.1rem;
    transition: all 0.3s ease;

    &:hover {
      text-decoration: none;
      color: rgb(193, 186, 186);
      font-weight: 700;
    }
  }

  & > span,
  & {
    font-size: 1.1rem;
    font-weight: 500;
  }
}

[title] {
  transition: none;
}

.importe {
  text-align: right;
}

// Estilos base para tooltips
%tooltip-base {
  visibility: hidden;
  position: absolute;
  z-index: 1000;
  left: 50%;
  transform: translateX(-50%);
  background-color: var.$color-principal-estudio;
  color: white;
  padding: 6px 8px;
  border-radius: 4px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  animation: fadeIn 0.2s ease-in-out;
  max-width: min(400px, 90vw);
  width: max-content;
  margin: 0;
}

// Estilos compartidos para el contenido del tooltip
%tooltip-content {
  font-size: 0.75rem !important;
  line-height: 1.4;
  text-align: left;
  white-space: nowrap;
  display: inline-block;
  padding: 4px 8px;
  margin: 0;
  background-color: var.$color-principal-estudio;
}

.categoria-tooltip,
.subcategoria-tooltip {
  @extend %tooltip-base;

  .tooltip-content {
    @extend %tooltip-content;
  }
}

.categoria-container {
  position: relative;
  display: inline-block;
  width: 100%;
  text-align: left;
  margin: 0;
  padding: 0;

  &:hover .categoria-tooltip {
    visibility: visible;
  }
}

.categoria-cell {
  color: white;
  cursor: help;
  margin: 0;
  padding: 0;
}

.subcategoria-container {
  position: relative;
  display: inline-block;
  width: 100%;
  text-align: center;
  margin: 0;
  padding: 0;

  &:hover .subcategoria-tooltip {
    visibility: visible;
  }
}

.subcategoria-cell {
  color: var.$color-principal-estudio;
  font-weight: 500;
  cursor: help;
  text-align: center;
  display: inline-block;
  margin: 0;
  padding: 0;
}

// Dirección del tooltip según la posición
tr:first-child {
  .categoria-tooltip,
  .subcategoria-tooltip {
    top: 150%;

    &::after {
      bottom: 100%;
      top: auto;
      border-color: transparent transparent var.$color-principal-estudio
        transparent;
    }
  }
}

tr:not(:first-child) {
  .categoria-tooltip,
  .subcategoria-tooltip {
    bottom: 150%;

    &::after {
      top: 100%;
      border-color: var.$color-principal-estudio transparent transparent
        transparent;
    }
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translate(-50%, 5px);
  }
  to {
    opacity: 1;
    transform: translate(-50%, 0);
  }
}

```
</open_file>

<open_file>
src\components\ingresos\registro\RegistroIngresos.jsx
```src\components\ingresos\registro\RegistroIngresos.jsx
import { useState } from "react";
import logo from "../../../assets/odontomed512_512.png";
import logo1 from "../../../assets/odontomedBigLogo.png";
import { createIngreso } from "../../../services/ingresosService";
import { FormularioIngreso } from "./FormularioIngreso";
import { useCategorias } from "../../../hooks/useCategorias";
import "./RegistroIngresos.scss";
import { ListadoIngresos } from "./ListadoIngresos";

export const RegistroIngresos = () => {
  const {
    rutaSeleccion,
    categoriasVisibles,
    cargando,
    error,
    esCategoriaNivelFinal,
    seleccionarCategoria,
    volverAtras,
  } = useCategorias();

  const [mostrarFormulario, setMostrarFormulario] = useState(false);

  const handleSeleccionar = () => {
    if (rutaSeleccion.length > 0) {
      setMostrarFormulario(true);
    }
  };

  const handleGuardarIngreso = async (ingresoData) => {
    try {
      const nuevoIngreso = await createIngreso(ingresoData);
      return nuevoIngreso;
    } catch (error) {
      console.error("Error al guardar el ingreso:", error);
      throw error;
    }
  };

  const handleCancelarIngreso = () => {
    setMostrarFormulario(false);
  };

  if (cargando) {
    return <div className="mensaje-carga">Cargando categorías...</div>;
  }

  if (error) {
    return <div className="mensaje-error">Error: {error}</div>;
  }

  if (mostrarFormulario) {
    return (
      <FormularioIngreso
        categoriaSeleccionada={rutaSeleccion[rutaSeleccion.length - 1]}
        rutaCompleta={rutaSeleccion}
        onGuardar={handleGuardarIngreso}
        onCancelar={handleCancelarIngreso}
      />
    );
  }

  const categoriaActual = rutaSeleccion[rutaSeleccion.length - 1];
  const mostrarBotonRegistrar =
    categoriaActual && esCategoriaNivelFinal(categoriaActual);

  return (
    <>
      <div className="pagina-ingresos-container-2">
        <img src={logo} alt="Logo" className="ingresos-logo" />
        <img src={logo1} alt="Logo1" className="ingresos-logo-1" />
        <p className="ingresos-registro-titulo">Registro de Ingresos</p>
      </div>
      <div className="seleccion-categorias-container">
        {rutaSeleccion.length > 0 && (
          <div className="ruta-navegacion">
            <button className="boton-volver" onClick={volverAtras}>
              ← Volver
            </button>
            <div className="ruta-seleccion">
              {rutaSeleccion.map((cat, index) => (
                <span key={cat.codigo} className="categoria-seleccionada">
                  {index > 0 ? " → " : ""}
                  {cat.nombre}
                </span>
              ))}
            </div>
            {mostrarBotonRegistrar && (
              <button className="boton-registrar" onClick={handleSeleccionar}>
                Registrar →
              </button>
            )}
          </div>
        )}
        <div className="grid-categorias">
          {categoriasVisibles.map((categoria) => (
            <button
              key={categoria.codigo}
              className="boton-categoria"
              onClick={() => seleccionarCategoria(categoria)}
            >
              {categoria.nombre}
            </button>
          ))}
        </div>
      </div>
      <ListadoIngresos />
    </>
  );
};

```
</open_file>

<open_file>
src\components\ingresos\registro\RegistroIngresos.scss
```src\components\ingresos\registro\RegistroIngresos.scss
@use "../../../styles/variables" as var;

.pagina-ingresos-container-2 {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  text-align: center;
  margin-top: 20px;
}

.ingresos-registro-titulo {
  font-size: 2.2rem;
  color: var.$color-principal-estudio;
  margin-top: 10px;
  margin-left: 25px;
  font-weight: 600;
}

/* este no esta asignado pero esta bueno 

.registro-ingresos-parrafo-1 {
  text-align: center;
  font-size: 1.3rem;
  color: #40b5a6;
  margin-top: 10px;
} */

.seleccion-categorias-container {
  width: 90%;
  max-width: 1200px;
  margin: 20px auto;
  text-align: center;
}

.ruta-navegacion {
  display: flex;
  align-items: center;
  gap: 20px;
  margin: 20px 0;
  padding: 10px;
  border-radius: 5px;
}

.boton-volver {
  padding: 8px 16px;
  background-color: var.$color-principal-cliente;
  color: var.$color-fondo-estudio;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.3s ease;
}

.boton-volver:hover {
  background-color: var.$color-principal-estudio;
  color: white;
}

.boton-registrar {
  padding: 8px 16px;
  background-color: var.$color-principal-estudio;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.3s ease;
}

.boton-registrar:hover {
  background-color: var.$color-principal-cliente;
  color: var.$color-fondo-estudio;
}

.ruta-seleccion {
  flex-grow: 1;
  font-size: 1.2rem;
}

.categoria-seleccionada {
  color: var.$color-principal-estudio;
  font-weight: 700;
}

.grid-categorias {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
  margin-top: 20px;
}

.boton-categoria {
  padding: 5px;
  background-color: var.$color-principal-cliente;
  color: var.$color-fondo-estudio;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 500;
  text-transform: uppercase;
  transition: all 0.3s ease;
  width: 100%;
}

.boton-categoria:hover {
  background-color: var.$color-principal-estudio;
  transform: translateY(-2px);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  color: white;
}

.boton-categoria:active {
  transform: translateY(0);
}

```
</open_file>

<open_file>
src\components\ingresos\registro\RutaCategoria.jsx
```src\components\ingresos\registro\RutaCategoria.jsx
import PropTypes from "prop-types";

export const RutaCategoria = ({ rutaCompleta }) => {
  return (
    <div className="ruta-categoria">
      {rutaCompleta.map((cat, index) => (
        <span key={cat.codigo}>
          {index > 0 ? " → " : ""}
          {cat.nombre}
        </span>
      ))}
    </div>
  );
};

RutaCategoria.propTypes = {
  rutaCompleta: PropTypes.arrayOf(
    PropTypes.shape({
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
    })
  ).isRequired,
};

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\FormFields.jsx
```src\components\ingresos\subcategorias\FormFields.jsx
import { useEffect, useCallback, useRef } from "react";
import PropTypes from "prop-types";
import "./FormFields.scss";

export const FormFields = ({
  formData,
  handleChange,
  subcategoriasIngresos,
  clearError,
  autoFocus,
}) => {
  const inputRef = useRef(null);

  useEffect(() => {
    clearError();
  }, [formData, clearError]);

  const generarNuevoCodigo = useCallback(
    (codigoPadre) => {
      // Verificación de seguridad
      if (!Array.isArray(subcategoriasIngresos)) {
        console.error(
          "subcategoriasIngresos no es un array:",
          subcategoriasIngresos
        );
        return "1";
      }

      if (!codigoPadre) {
        const codigosNivel1 = subcategoriasIngresos
          .filter((sub) => !sub.categoriaPadre)
          .map((sub) => parseInt(sub.codigo))
          .filter((codigo) => !isNaN(codigo));

        if (codigosNivel1.length === 0) {
          return "1";
        }

        const maxCodigo = Math.max(...codigosNivel1);
        return (maxCodigo + 1).toString();
      }

      const codigosHijos = subcategoriasIngresos
        .filter((sub) => sub.categoriaPadre === codigoPadre)
        .map((sub) => parseInt(sub.codigo.split(".").pop()))
        .filter((codigo) => !isNaN(codigo));

      if (codigosHijos.length === 0) {
        return `${codigoPadre}.1`;
      }

      const maxCodigoHijo = Math.max(...codigosHijos);
      return `${codigoPadre}.${maxCodigoHijo + 1}`;
    },
    [subcategoriasIngresos]
  );

  // Efecto para generar código inicial
  useEffect(() => {
    if (formData.categoriaPadre && !formData.codigo) {
      const nuevoCodigo = generarNuevoCodigo(formData.categoriaPadre);
      handleChange({
        target: {
          name: "codigo",
          value: nuevoCodigo,
        },
      });
    }
  }, [
    formData.categoriaPadre,
    formData.codigo,
    generarNuevoCodigo,
    handleChange,
  ]);

  // Efecto para el autofocus
  useEffect(() => {
    if (autoFocus && inputRef.current) {
      inputRef.current.focus();
    }
  }, [autoFocus]);

  return (
    <div className="form-fields-container">
      <div className="form-group">
        <div className="codigo-preview">
          <label>Código a asignar:</label>
          <span className="codigo-valor">{formData.codigo}</span>
        </div>
      </div>
      <div className="form-group">
        <input
          ref={inputRef}
          type="text"
          name="nombre"
          value={formData.nombre}
          onChange={handleChange}
          placeholder="Nombre"
          className="form-input"
        />
      </div>
    </div>
  );
};

FormFields.propTypes = {
  formData: PropTypes.shape({
    codigo: PropTypes.string.isRequired,
    nombre: PropTypes.string.isRequired,
    nivel: PropTypes.number.isRequired,
    categoriaPadre: PropTypes.string,
  }).isRequired,
  handleChange: PropTypes.func.isRequired,
  subcategoriasIngresos: PropTypes.array.isRequired,
  clearError: PropTypes.func.isRequired,
  autoFocus: PropTypes.bool,
};

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\FormFields.scss
```src\components\ingresos\subcategorias\FormFields.scss
@use "../../../styles/variables" as var;

.form-fields-container {
  width: 100%;
}

.form-group {
  margin-bottom: 1rem;
}

.form-input {
  width: 100%;
  padding: 8px;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 4px;
  background-color: white;
  color: black;

  &.input-focused {
    outline: none;
    border-color: #4a90e2;
    background-color: #f0f7ff;
    box-shadow: 0 0 5px rgba(74, 144, 226, 0.3);
    caret-color: #4a90e2;
  }

  &.input-active {
    border-color: #4a90e2;
    background-color: #f0f7ff;
    box-shadow: 0 0 5px rgba(74, 144, 226, 0.3);
  }

  &:focus {
    outline: none;
    border-color: #4a90e2;
    background-color: #f0f7ff;
    box-shadow: 0 0 5px rgba(74, 144, 226, 0.3);
    caret-color: #4a90e2;
  }
}

.ruta-navegacion {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-bottom: 1rem;
}

.btn-navegacion {
  background-color: var.$color-fondo-estudio;
  color: var.$color-principal-cliente;
  border: 1px solid var.$color-principal-cliente;
  padding: 4px 8px;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background-color: var.$color-principal-cliente;
    color: white;
  }
}

.subcategorias-container {
  margin-top: 1rem;
  padding: 1rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 4px;

  h4 {
    color: var.$color-principal-estudio;
    margin-bottom: 0.5rem;
  }
}

.lista-subcategorias {
  list-style: none;
  padding: 0;
  margin: 0;
}

.subcategoria-item {
  margin-bottom: 0.5rem;
  padding: 0.5rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 4px;
  color: var.$color-principal-cliente;
}

.lista-badge {
  margin-left: 20px;
  padding: 2px 6px;
  font-size: 0.8em;
  color: #dd6b20;
  border-radius: 4px;
  display: inline-flex;
  align-items: center;
  gap: 4px;
  border: 1px solid #dd6b20;
  cursor: pointer;
}

.categoria-acciones {
  display: flex;
  align-items: center;
  gap: 10px;

  .btn-convertir-lista {
    background: none;
    border: none;
    color: #666;
    cursor: pointer;
    padding: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;

    &:hover {
      color: #333;
      transform: scale(1.1);
    }

    svg {
      font-size: 1.2rem;
    }
  }
}

.subcategoria-row {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 5px 0;
}

.categoria-nombre {
  display: flex;
  align-items: center;
  gap: 8px;

  .btn-convertir-lista {
    background: none;
    border: none;
    color: #666;
    cursor: pointer;
    padding: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;

    &:hover {
      color: #333;
      transform: scale(1.1);
    }

    svg {
      font-size: 1rem;
    }
  }
}

.acciones-container {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;

  .btn-lista {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: none;
    border: none;
    color: var.$color-principal-cliente;
    cursor: pointer;
    padding: 0.5rem;
    transition: all 0.2s ease;

    &:hover:not(.disabled) {
      transform: scale(1.1);
    }

    &.disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
  }
}

.listas-disponibles {
  margin: 1rem 0;
  padding: 1rem;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 4px;
  background-color: rgba(255, 255, 255, 0.05);
  max-height: 300px;
  overflow-y: auto;

  &::-webkit-scrollbar {
    width: 8px;
  }

  &::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
  }

  &::-webkit-scrollbar-thumb {
    background: var.$color-principal-cliente;
    border-radius: 4px;
  }

  h4 {
    margin: 0 0 0.5rem;
    color: var.$color-principal-estudio;
    font-size: 1rem;
  }

  .lista-opciones {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .lista-opcion {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    border-radius: 4px;
    background-color: rgba(255, 255, 255, 0.02);

    span {
      color: var.$color-principal-cliente;
    }

    .btn-asignar {
      background: none;
      border: 1px solid var.$color-principal-cliente;
      color: var.$color-principal-cliente;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      cursor: pointer;
      font-size: 0.8rem;
      transition: all 0.2s ease;

      &:hover {
        background-color: var.$color-principal-cliente;
        color: white;
      }
    }
  }
}

.codigo-preview {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1rem;

  label {
    color: var.$color-principal-cliente;
    font-weight: bold;
  }

  .codigo-valor {
    background-color: var.$color-fondo-estudio;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    border: 1px solid var.$color-principal-cliente;
    color: var.$color-principal-cliente;
  }
}

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\FormularioSubcategoriaIngresos.jsx
```src\components\ingresos\subcategorias\FormularioSubcategoriaIngresos.jsx
import { forwardRef, useImperativeHandle, useState, useCallback } from "react";
import PropTypes from "prop-types";
import { Box, Alert } from "@mui/material";
import { FormFields } from "./FormFields";
import { INITIAL_SUBCATEGORIA_FORM_STATE } from "../../../config/constants";
import { FaSave } from "react-icons/fa";
import "./FormularioSubcategoriaIngresos.scss";
import { createSubcategoriaIngreso } from "../../../services/subcategoriaIngresosService";

const FormularioSubcategoriaIngresosComponent = forwardRef(
  (
    {
      onSubcategoriaCreada,
      subcategorias,
      rutaActual,
      onRutaChange,
      autoFocus,
    },
    ref
  ) => {
    const [formData, setFormData] = useState(INITIAL_SUBCATEGORIA_FORM_STATE);
    const [error, setError] = useState("");

    const clearError = useCallback(() => setError(""), []);

    const handleChange = useCallback((e) => {
      const value =
        e.target.name === "nivel" ? Number(e.target.value) : e.target.value;
      setFormData((prev) => ({
        ...prev,
        [e.target.name]: value,
      }));
    }, []);

    const handleSubmit = async (e) => {
      e.preventDefault();
      if (!formData.codigo || !formData.nombre) {
        setError("El código y nombre son requeridos");
        return;
      }

      try {
        const dataToSend = {
          ...formData,
          nivel: Number(formData.nivel),
          categoriaPadre: formData.categoriaPadre || "",
        };

        const nuevaSubcategoria = await createSubcategoriaIngreso(dataToSend);
        if (nuevaSubcategoria) {
          setFormData(INITIAL_SUBCATEGORIA_FORM_STATE);
          onSubcategoriaCreada();
          onRutaChange(rutaActual);
        }
      } catch (error) {
        console.error("Error al crear subcategoría:", error);
        setError(error.message);
      }
    };

    useImperativeHandle(ref, () => ({
      actualizarFormulario: (datos) => {
        setFormData((prevData) => ({
          ...prevData,
          categoriaPadre: datos.categoriaPadre,
          nivel: datos.nivel,
          codigo: "",
          nombre: "",
        }));
      },
    }));

    return (
      <Box
        component="form"
        onSubmit={handleSubmit}
        className="formulario-subcategoria"
        noValidate
      >
        {error && (
          <Alert severity="error" className="alerta-error">
            {error}
          </Alert>
        )}

        <div className="icono-centrado">
          <div className="boton-con-texto">
            <FaSave
              className="icono-agregar"
              onClick={handleSubmit}
              title="Guardar subcategoría"
            />
            <span className="texto-grabar">Grabar subcategoría</span>
          </div>
        </div>

        <div className="input-container">
          <FormFields
            formData={formData}
            handleChange={handleChange}
            subcategoriasIngresos={subcategorias}
            clearError={clearError}
            autoFocus={autoFocus}
          />
        </div>
      </Box>
    );
  }
);

FormularioSubcategoriaIngresosComponent.displayName =
  "FormularioSubcategoriaIngresos";

FormularioSubcategoriaIngresosComponent.propTypes = {
  onSubcategoriaCreada: PropTypes.func.isRequired,
  subcategorias: PropTypes.array.isRequired,
  rutaActual: PropTypes.array.isRequired,
  onRutaChange: PropTypes.func.isRequired,
  autoFocus: PropTypes.bool,
};

export const FormularioSubcategoriaIngresos =
  FormularioSubcategoriaIngresosComponent;

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\FormularioSubcategoriaIngresos.scss
```src\components\ingresos\subcategorias\FormularioSubcategoriaIngresos.scss
@use "../../../styles/variables" as var;

.formulario-subcategoria-container {
  max-width: 600px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 8px;
  background-color: var.$color-fondo-estudio;
}

.formulario-subcategoria {
  padding: 20px;
  background-color: transparent !important;
  box-shadow: none !important;
  text-align: center !important;
}

.icono-centrado {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 2rem;
  margin-bottom: 20px;

  .boton-con-texto {
    display: flex;
    align-items: center;
    gap: 0.5rem;

    .texto-grabar {
      color: var.$color-principal-estudio;
      font-size: 1rem;
    }

    .texto-lista {
      color: var.$color-principal-cliente;
      font-size: 1rem;
    }
  }

  .icono-agregar {
    font-size: 30px;
    color: var.$color-principal-estudio;
    cursor: pointer;
    transition: transform 0.2s ease-in-out;

    &:hover {
      transform: scale(1.3);
    }
  }
}

.input-container {
  width: 100%;

  .form-input {
    width: 100%;
    padding: 8px;
    margin-bottom: 16px;
    border: 1px solid var.$color-principal-cliente;
    border-radius: 4px;
    background-color: white;
    color: black;

    &:focus {
      outline: none;
      border-color: var.$color-principal-estudio;
    }
  }
}

.alerta-error {
  color: #c62828 !important;
  border-radius: 8px !important;
  margin-bottom: 16px !important;
  position: relative !important;
  z-index: 2 !important;
  background-color: var.$color-fondo-estudio !important;
  border: 1px solid #c62828 !important;
}

.alerta-success {
  color: #2e7d32 !important;
  border-radius: 8px !important;
  margin-bottom: 16px !important;
  position: relative !important;
  z-index: 2 !important;
  background-color: black !important;
  border: 1px solid #2e7d32 !important;
}

.boton-con-texto {
  .btn-lista {
    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;

      &:hover {
        transform: none;
      }
    }
  }

  .texto-lista {
    &.disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
  }
}

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\GestionSubcategoriasIngresos.jsx
```src\components\ingresos\subcategorias\GestionSubcategoriasIngresos.jsx
import { useState, useCallback, useEffect } from "react";
import { Box, Paper, Alert, Snackbar } from "@mui/material";
import { ListaSubcategorias } from "./ListaSubcategorias";
import { ModalSubcategoria } from "./ModalSubcategoria";
import logo from "../../../assets/odontomed512_512.png";
import logo1 from "../../../assets/odontomedBigLogo.png";
import "./GestionSubcategoriasIngresos.scss";
import {
  getSubcategoriasIngresos,
  createSubcategoriaIngreso,
  analizarEstructuraSubcategorias,
  sincronizarTodasLasSubcategorias,
  convertirListaASubcategorias,
} from "../../../services/subcategoriaIngresosService";

export const GestionSubcategoriasIngresos = () => {
  const [subcategorias, setSubcategorias] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [modalConfig, setModalConfig] = useState({
    isOpen: false,
    codigoAsignar: "",
    isPrincipal: false,
  });
  const [notification, setNotification] = useState({
    open: false,
    message: "",
    severity: "success",
  });

  const cargarSubcategorias = useCallback(async () => {
    try {
      setIsLoading(true);
      const data = await getSubcategoriasIngresos();
      setSubcategorias(data);
    } catch (error) {
      console.error("Error al cargar subcategorías:", error);
      setNotification({
        open: true,
        message: "Error al cargar subcategorías",
        severity: "error",
      });
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    cargarSubcategorias();
  }, [cargarSubcategorias]);

  const handleCloseNotification = () => {
    setNotification({ ...notification, open: false });
  };

  const handleAgregarPrincipal = () => {
    const nextCodigo = obtenerSiguienteCodigoPrincipal();
    setModalConfig({
      isOpen: true,
      codigoAsignar: nextCodigo,
      isPrincipal: true,
    });
  };

  const handleAgregarSubcategoria = (subcategoria) => {
    console.log("Agregando subcategoría a:", subcategoria);
    console.log("Nombre de la subcategoría:", subcategoria.nombre);
    const nextCodigo = obtenerSiguienteCodigoHijo(subcategoria.codigo);
    console.log("Código generado:", nextCodigo);

    setModalConfig({
      isOpen: true,
      codigoAsignar: nextCodigo,
      isPrincipal: false,
      nombreSubcategoria: subcategoria.nombre,
    });
  };

  const handleCloseModal = () => {
    setModalConfig({ ...modalConfig, isOpen: false });
  };

  const handleSubmitSubcategoria = async (subcategoriaData) => {
    try {
      if (subcategoriaData.tipo === "lista") {
        await convertirListaASubcategorias(
          subcategoriaData.datos.codigo,
          subcategoriaData.datos.listaId
        );
      } else {
        await createSubcategoriaIngreso(subcategoriaData);
      }

      await cargarSubcategorias();
      setModalConfig({ ...modalConfig, isOpen: false });
      setNotification({
        open: true,
        message: "Operación realizada exitosamente",
        severity: "success",
      });
    } catch (error) {
      console.error("Error:", error);
      setNotification({
        open: true,
        message: error.message || "Error al realizar la operación",
        severity: "error",
      });
    }
  };

  const obtenerSiguienteCodigoPrincipal = () => {
    const codigosPrincipales = subcategorias
      .filter((sub) => !sub.categoriaPadre)
      .map((sub) => parseInt(sub.codigo))
      .filter((codigo) => !isNaN(codigo));

    return codigosPrincipales.length > 0
      ? (Math.max(...codigosPrincipales) + 1).toString()
      : "1";
  };

  const obtenerSiguienteCodigoHijo = (codigoPadre) => {
    const codigosHijos = subcategorias
      .filter((sub) => sub.categoriaPadre === codigoPadre)
      .map((sub) => parseInt(sub.codigo.split(".").pop()))
      .filter((codigo) => !isNaN(codigo));

    if (codigosHijos.length === 0) {
      return `${codigoPadre}.1`;
    }

    const maxCodigoHijo = Math.max(...codigosHijos);
    return `${codigoPadre}.${maxCodigoHijo + 1}`;
  };

  const handleSincronizar = async () => {
    try {
      setIsLoading(true);
      await analizarEstructuraSubcategorias();
      await sincronizarTodasLasSubcategorias();
      await cargarSubcategorias();

      setNotification({
        open: true,
        message: "Sincronización completada correctamente",
        severity: "success",
      });
    } catch (error) {
      console.error("Error:", error);
      setNotification({
        open: true,
        message: "Error en la sincronización",
        severity: "error",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <div className="pagina-ingresos-container-1">
        <img src={logo} alt="Logo" className="ingresos-logo" />
        <img src={logo1} alt="Logo1" className="ingresos-logo-1" />
        <p className="ingresos-titulo">Registro de subcategorías de ingresos</p>
        <button
          className="btn-sincronizar"
          onClick={handleSincronizar}
          disabled={isLoading}
        >
          {isLoading ? "Sincronizando..." : "Sincronizar Todo"}
        </button>
      </div>

      <Box className="subcategorias-container">
        <Paper className="tabla-subcategorias">
          {isLoading ? (
            <p className="mensaje-carga">Cargando subcategorías...</p>
          ) : (
            <ListaSubcategorias
              subcategorias={subcategorias}
              onAgregarSubcategoria={handleAgregarSubcategoria}
              onAgregarPrincipal={handleAgregarPrincipal}
              onVerSubcategorias={() => {}}
            />
          )}
        </Paper>

        <ModalSubcategoria
          isOpen={modalConfig.isOpen}
          onClose={handleCloseModal}
          codigoAsignar={modalConfig.codigoAsignar}
          onSubmit={handleSubmitSubcategoria}
          isPrincipal={modalConfig.isPrincipal}
          nombreSubcategoria={modalConfig.nombreSubcategoria}
        />

        <Snackbar
          open={notification.open}
          autoHideDuration={6000}
          onClose={handleCloseNotification}
          anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
        >
          <Alert
            onClose={handleCloseNotification}
            severity={notification.severity}
          >
            {notification.message}
          </Alert>
        </Snackbar>
      </Box>
    </>
  );
};

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\GestionSubcategoriasIngresos.scss
```src\components\ingresos\subcategorias\GestionSubcategoriasIngresos.scss
@use "../../../styles/variables" as var;

.pagina-ingresos-container-1 {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  text-align: center;
}

.notification {
  position: fixed;
  bottom: 24px;
  right: 24px;
  z-index: 1000;
}

.mensaje-carga,
.mensaje-vacio {
  color: var.$color-principal-cliente;
  text-align: center;
  padding: 20px;
  font-size: 1.1rem;
}

.mensaje-vacio {
  color: #666;
  font-style: italic;
}

.subcategorias-header {
  margin-bottom: 0.5rem;

  .subtitulo {
    color: var.$color-principal-cliente;
    margin: 0;
    font-size: 1.2rem;
  }
}

.btn-agregar-principal-small {
  background: none;
  border: 1px solid var.$color-principal-cliente;
  color: var.$color-principal-cliente;
  padding: 0.3rem 0.8rem;
  border-radius: 4px;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.2s ease;
  margin-bottom: 1rem;

  &:hover {
    background-color: var.$color-principal-cliente;
    color: white;
  }
}

.lista-header {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  margin-bottom: 1rem;

  .titulo-lista {
    color: var.$color-principal-cliente;
    margin: 0;
    font-size: 1.2rem;
  }

  .btn-agregar-principal-small {
    align-self: flex-start;
    background: none;
    border: 1px solid var.$color-principal-cliente;
    color: var.$color-principal-cliente;
    padding: 0.3rem 0.8rem;
    border-radius: 4px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;

    &:hover {
      background-color: var.$color-principal-cliente;
      color: white;
    }
  }
}

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\ListaSubcategorias.jsx
```src\components\ingresos\subcategorias\ListaSubcategorias.jsx
import React, { useState } from "react";
import PropTypes from "prop-types";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
} from "@mui/material";
import "./ListaSubcategorias.scss";
import { useNavigate } from "react-router-dom";

export const ListaSubcategorias = ({
  subcategorias,
  onVerSubcategorias = () => {},
  onAgregarSubcategoria,
  onAgregarPrincipal,
}) => {
  const [expandidas, setExpandidas] = useState(new Set());
  const [vistaArbol, setVistaArbol] = useState(true);
  const navigate = useNavigate();

  const toggleExpansion = (codigo, e) => {
    e?.stopPropagation();
    const nuevasExpandidas = new Set(expandidas);
    if (expandidas.has(codigo)) {
      nuevasExpandidas.delete(codigo);
    } else {
      nuevasExpandidas.add(codigo);
    }
    setExpandidas(nuevasExpandidas);
  };

  const handleAgregarClick = (subcategoria, e) => {
    e?.stopPropagation();
    console.log("Subcategoría seleccionada:", subcategoria); // Para debug
    onAgregarSubcategoria(subcategoria);
  };

  const renderSubcategoria = (subcategoria) => {
    const nivel = subcategoria.codigo.split(".").length - 1;
    const tieneHijos = subcategorias.some(
      (sub) => sub.categoriaPadre === subcategoria.codigo
    );
    const estaExpandida = expandidas.has(subcategoria.codigo);

    return (
      <div key={subcategoria.codigo}>
        <div className={`categoria-nivel-${nivel}`}>
          {tieneHijos && (
            <span
              className="btn-expandir"
              onClick={(e) => {
                e.stopPropagation();
                toggleExpansion(subcategoria.codigo);
              }}
            >
              {estaExpandida ? "└" : "├"}
            </span>
          )}
          <span
            className="categoria-contenido"
            onClick={() => onVerSubcategorias(subcategoria)}
          >
            {subcategoria.nombre} ({subcategoria.codigo})
          </span>
          <span
            className="btn-agregar"
            onClick={(e) => {
              e.stopPropagation();
              handleAgregarClick(subcategoria);
            }}
          >
            [+]
          </span>
        </div>
        {estaExpandida && tieneHijos && (
          <div>
            {subcategorias
              .filter((sub) => sub.categoriaPadre === subcategoria.codigo)
              .map((subcat) => renderSubcategoria(subcat))}
          </div>
        )}
      </div>
    );
  };

  const renderTabla = () => {
    const renderFilaTabla = (subcategoria) => {
      const tieneHijos = subcategorias.some(
        (sub) => sub.categoriaPadre === subcategoria.codigo
      );
      const estaExpandida = expandidas.has(subcategoria.codigo);
      const nivel = subcategoria.codigo.split(".").length - 1;

      return (
        <React.Fragment key={subcategoria.codigo}>
          <TableRow>
            <TableCell>
              {nivel > 0 && "----"}
              {tieneHijos && (
                <span
                  className="btn-expandir"
                  onClick={() => toggleExpansion(subcategoria.codigo)}
                >
                  {estaExpandida ? "└" : "├"}
                </span>
              )}
              <span
                className="categoria-contenido"
                onClick={() => onVerSubcategorias(subcategoria)}
              >
                {subcategoria.nombre} ({subcategoria.codigo})
              </span>
            </TableCell>
            <TableCell>{subcategoria.nombre}</TableCell>
            <TableCell>{nivel}</TableCell>
            <TableCell>
              <button
                className="btn-agregar"
                onClick={() => handleAgregarClick(subcategoria)}
              >
                [+]
              </button>
            </TableCell>
          </TableRow>
          {estaExpandida &&
            tieneHijos &&
            subcategorias
              .filter((sub) => sub.categoriaPadre === subcategoria.codigo)
              .map((subcat) => renderFilaTabla(subcat))}
        </React.Fragment>
      );
    };

    return (
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>Código</TableCell>
            <TableCell>Nombre</TableCell>
            <TableCell>Nivel</TableCell>
            <TableCell>Acciones</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {subcategorias
            .filter((sub) => !sub.categoriaPadre)
            .map((subcategoria) => renderFilaTabla(subcategoria))}
        </TableBody>
      </Table>
    );
  };

  return (
    <div className="lista-subcategorias-container">
      <div className="header-container">
        <h2 className="titulo-lista">Subcategorías de Ingresos</h2>
        <button
          className="btn-toggle-view"
          onClick={() => setVistaArbol(!vistaArbol)}
        >
          {vistaArbol ? "Ver Lista" : "Ver Árbol"}
        </button>
      </div>

      <div className="botones-container">
        <button
          className="btn-agregar-principal-small"
          onClick={onAgregarPrincipal}
        >
          + Nueva Categoría Principal
        </button>
        <button
          className="btn-agregar-principal-small"
          onClick={() => navigate("/listas-maestras")}
        >
          + Gestión de Listas Maestras
        </button>
      </div>

      {vistaArbol ? (
        <div className="arbol-estructura-completo">
          {subcategorias
            .filter((sub) => !sub.categoriaPadre)
            .map((subcategoria) => renderSubcategoria(subcategoria))}
        </div>
      ) : (
        <div className="tabla-subcategorias">{renderTabla()}</div>
      )}
    </div>
  );
};

ListaSubcategorias.propTypes = {
  subcategorias: PropTypes.arrayOf(
    PropTypes.shape({
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired,
      categoriaPadre: PropTypes.string,
    })
  ).isRequired,
  onVerSubcategorias: PropTypes.func,
  onAgregarSubcategoria: PropTypes.func.isRequired,
  onAgregarPrincipal: PropTypes.func.isRequired,
};

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\ListaSubcategorias.scss
```src\components\ingresos\subcategorias\ListaSubcategorias.scss
@use "../../../styles/variables" as var;

.lista-subcategorias-titulo {
  color: var.$color-principal-estudio;
  font-weight: 600;
  margin-bottom: 0.8rem;
  text-align: center;
  padding-bottom: 10px;
}

.titulo-lista {
  color: var.$color-principal-cliente;
  font-weight: 600;
  margin-bottom: 0.8rem;
  text-align: center;
  font-size: 1.2rem;
}

.tabla-subcategorias {
  margin: 20px;
  background-color: transparent !important;

  .MuiTableCell-root {
    color: var.$color-principal-cliente;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    padding: 6px;

    .btn-lista {
      background: none;
      border: none;
      cursor: pointer;
      color: var.$color-principal-estudio;
      padding: 0.5rem;

      &:hover {
        opacity: 0.8;
      }
    }
  }

  .MuiTableHead-root {
    .MuiTableCell-root {
      background-color: var.$color-fondo-estudio;
      color: var.$color-principal-estudio;
      font-weight: 600;
    }
  }

  .MuiTableBody-root {
    .MuiTableRow-root {
      &:hover {
        background-color: rgba(255, 255, 255, 0.05);
      }
    }
  }
}

.MuiPaper-root {
  background-color: transparent !important;
  box-shadow: none !important;
}

.MuiTable-root {
  min-width: unset !important;
}

@media (max-width: 700px) {
  .tabla-subcategorias {
    margin: 0 16px !important;
  }
}

.item-lista {
  background-color: #f5f5f5;
  td {
    padding-left: 2rem;
  }
}

.lista-subcategorias-container {
  .header-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    margin-bottom: 0.5rem;

    .titulo-lista {
      margin: 0;
      font-size: 1.2rem;
      color: var.$color-principal-cliente;
      font-weight: 600;
    }

    .btn-toggle-view {
      padding: 6px 12px;
      background-color: var.$color-principal-cliente;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 0.9rem;

      &:hover {
        opacity: 0.9;
      }
    }
  }

  .arbol-estructura-completo {
    padding-left: 5.5rem;
    padding-top: 1rem;
    font-family: "Courier New", monospace;
    white-space: pre;
    font-size: 0.95rem;
    line-height: 1.4;
    width: 100%;
    border-radius: 8px;
    overflow-x: auto;

    .indentacion {
      color: #4a57b3;
      opacity: 0.7;
    }

    @media (max-width: 1200px) {
      font-size: 0.85rem;
      padding-right: 1.5rem;
    }

    @media (max-width: 768px) {
      font-size: 0.75rem;
      padding-left: 2rem;
      padding-right: 1rem;
    }

    .btn-expandir,
    .btn-agregar {
      display: inline-block;
      color: inherit !important;
      cursor: pointer;
      user-select: none;
      padding: 0 4px;

      &:hover {
        opacity: 0.8;
      }
    }

    .categoria-contenido {
      display: inline-block;
      padding: 0 1rem;
      margin-right: 0.1rem;
    }

    .btn-expandir {
      display: inline-block;
      width: 0.7rem;
      margin-right: 0.1rem;
    }

    .btn-agregar {
      display: inline-block;
      margin-left: 0.1rem;
    }

    @for $i from 0 through 20 {
      .categoria-nivel-#{$i} {
        margin-left: $i * 0.7rem;
        $ciclo: $i % 3;
        @if $ciclo == 0 {
          color: #8290e6 !important;
          font-weight: 400;
        } @else if $ciclo == 1 {
          color: #6674d2 !important;
          font-weight: 500;
        } @else {
          color: #4a57b3 !important;
          font-weight: 600;
        }
        background: transparent;
        border-radius: 3px;
        padding: 0 2px;
        white-space: nowrap;
      }
    }
  }

  .btn-agregar-principal-small {
    display: block;
    margin: 1rem auto;
    background: none;
    border: 1px solid var.$color-principal-cliente;
    color: var.$color-principal-cliente;
    padding: 0.3rem 0.8rem;
    border-radius: 4px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;

    &:hover {
      background-color: var.$color-principal-cliente;
      color: white;
    }
  }
}

.lista-subcategorias {
  padding: 1rem;

  .subcategoria-item {
    margin-bottom: 0.5rem;
  }

  .subcategoria-row {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    border-radius: 4px;
    transition: background-color 0.2s;

    &:hover {
      background-color: rgba(255, 255, 255, 0.05);
    }
  }

  .btn-expandir {
    background: none;
    border: none;
    color: var.$color-principal-cliente;
    cursor: pointer;
    padding: 0.25rem;
    display: flex;
    align-items: center;
    justify-content: center;

    &:hover {
      transform: scale(1.1);
    }
  }

  .subcategoria-nombre {
    flex: 1;
    cursor: pointer;
    padding: 0.25rem 0;
    color: var.$color-principal-cliente;

    &:hover {
      color: var.$color-principal-estudio;
    }
  }

  .btn-agregar {
    background: none;
    border: 1px solid var.$color-principal-cliente;
    color: var.$color-principal-cliente;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.25rem;

    &:hover {
      background-color: var.$color-principal-cliente;
      color: white;
    }
  }

  .subcategorias-hijas {
    margin-left: 1rem;
    border-left: 1px dashed var.$color-principal-cliente;
    padding-left: 0.5rem;
  }
}

.botones-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 75%;
  margin-bottom: 0.1rem;
  gap: 10px;
  margin-left: 10%;

  .btn-agregar-principal-small {
    background: none;
    padding: 0.3rem 0.8rem;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
    border-radius: 4px;

    &:first-child {
      border: 1px solid var.$color-principal-cliente;
      color: var.$color-principal-cliente;

      &:hover {
        background-color: var.$color-principal-cliente;
        color: white;
      }
    }

    &:nth-child(2) {
      border: 1px solid var.$color-principal-estudio;
      color: var.$color-principal-estudio;

      &:hover {
        background-color: var.$color-principal-estudio;
        color: white;
      }
    }
  }
}

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\ModalItems.jsx
```src\components\ingresos\subcategorias\ModalItems.jsx
import { useState, useEffect } from "react";
import PropTypes from "prop-types";
import { FaPlus, FaPencilAlt, FaSave, FaTimes } from "react-icons/fa";
import "./ModalItems.scss";
import { actualizarItem } from "../../../services/subcategoriaIngresosService";

export const ModalItems = ({
  subcategoria,
  onGuardar,
  onCerrar,
  subcategoriasIngresos,
}) => {
  const [items, setItems] = useState([]);
  const [nuevoItem, setNuevoItem] = useState("");
  const [editandoIndex, setEditandoIndex] = useState(null);
  const [nombreEditado, setNombreEditado] = useState("");

  useEffect(() => {
    const cargarItems = () => {
      const itemsExistentes = subcategoriasIngresos
        .filter((sub) => sub.categoriaPadre === subcategoria.codigo)
        .map((sub) => ({
          nombre: sub.nombre,
          codigo: sub.codigo,
        }));
      setItems(itemsExistentes);
    };

    cargarItems();
  }, [subcategoria, subcategoriasIngresos]);

  const handleAgregarItem = () => {
    if (!nuevoItem.trim()) return;

    if (
      items.some(
        (item) => item.nombre.toLowerCase() === nuevoItem.trim().toLowerCase()
      )
    ) {
      alert("Ya existe un item con ese nombre");
      return;
    }

    setItems([...items, { nombre: nuevoItem.trim() }]);
    setNuevoItem("");
  };

  const handleEditarItem = (index, item) => {
    setEditandoIndex(index);
    setNombreEditado(item.nombre);
  };

  const handleGuardarEdicion = async (index) => {
    if (!nombreEditado.trim()) return;

    if (
      items.some(
        (item, i) =>
          i !== index &&
          item.nombre.toLowerCase() === nombreEditado.trim().toLowerCase()
      )
    ) {
      alert("Ya existe un item con ese nombre");
      return;
    }

    try {
      const itemEditado = items[index];
      if (itemEditado.codigo) {
        await actualizarItem(itemEditado.codigo, nombreEditado.trim());
        window.location.reload();
      } else {
        const nuevosItems = [...items];
        nuevosItems[index] = {
          ...nuevosItems[index],
          nombre: nombreEditado.trim(),
        };
        setItems(nuevosItems);
      }
      setEditandoIndex(null);
      setNombreEditado("");
    } catch (error) {
      console.error("Error al guardar edición:", error);
      alert("Error al guardar el cambio");
    }
  };

  return (
    <div className="modal-overlay">
      <div className="modal-container">
        <div className="modal-header">
          <h3>Items de {subcategoria.nombre}</h3>
          <button className="btn-close" onClick={onCerrar}>
            <FaTimes />
          </button>
        </div>

        <div className="items-existentes">
          <p className="agregar-nuevo-item">Items Actuales:</p>
          <div className="items-list">
            {items.map((item, index) => (
              <div key={item.codigo || index} className="item existing">
                {editandoIndex === index ? (
                  <div className="edit-container">
                    <input
                      type="text"
                      value={nombreEditado}
                      onChange={(e) => setNombreEditado(e.target.value)}
                      onKeyPress={(e) => {
                        if (e.key === "Enter") handleGuardarEdicion(index);
                      }}
                    />
                    <button
                      className="btn-save-icon"
                      onClick={() => handleGuardarEdicion(index)}
                    >
                      <FaSave />
                    </button>
                  </div>
                ) : (
                  <>
                    <span>{item.nombre}</span>
                    <button onClick={() => handleEditarItem(index, item)}>
                      <FaPencilAlt />
                    </button>
                  </>
                )}
              </div>
            ))}
          </div>
        </div>

        <div className="separador"></div>

        <p className="agregar-nuevo-item">Agregar Nuevo Item:</p>
        <div className="input-container">
          <input
            type="text"
            value={nuevoItem}
            onChange={(e) => setNuevoItem(e.target.value)}
            placeholder="Nombre del nuevo item"
          />
          <button
            className="btn-icon"
            onClick={handleAgregarItem}
            title="Agregar"
          >
            <FaPlus />
          </button>
        </div>

        <div className="buttons-container">
          <button className="btn-icon cancel" onClick={onCerrar}>
            <FaTimes />
          </button>
          <button
            className="btn-save-icon main-save"
            onClick={() => onGuardar(items.filter((item) => !item.codigo))}
          >
            <FaSave />
          </button>
        </div>
      </div>
    </div>
  );
};

ModalItems.propTypes = {
  subcategoria: PropTypes.shape({
    codigo: PropTypes.string.isRequired,
    nombre: PropTypes.string.isRequired,
    nivel: PropTypes.number.isRequired,
    categoriaPadre: PropTypes.string,
  }).isRequired,
  subcategoriasIngresos: PropTypes.array.isRequired,
  onGuardar: PropTypes.func.isRequired,
  onCerrar: PropTypes.func.isRequired,
};

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\ModalItems.scss
```src\components\ingresos\subcategorias\ModalItems.scss
@use "../../../styles/variables" as var;

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: transparent;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-container {
  position: relative;
  background-color: var.$color-fondo-estudio;
  padding: 1rem 2rem;
  border-radius: 8px;
  border: 1px solid var.$color-principal-cliente;
  width: 90%;
  max-width: 600px;
  max-height: 80vh;
  overflow-y: auto;

  &::-webkit-scrollbar {
    width: 8px;
  }

  &::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
  }

  &::-webkit-scrollbar-thumb {
    background: var.$color-principal-cliente;
    border-radius: 4px;
  }

  p {
    margin-bottom: 20px;
    margin-bottom: 20px;
    text-align: center;
    color: var.$color-principal-cliente !important;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .agregar-nuevo-item {
    margin-bottom: 20px;
    text-align: center;
    color: var.$color-principal-estudio;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .input-container {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;

    input {
      flex: 1;
      padding: 8px;
      border-radius: 4px;
      border: 1px solid var.$color-principal-cliente;
      background-color: white;
      color: black;
      margin-left: 20px;
    }

    button {
      padding: 8px 16px;
      background-color: var.$color-principal-cliente;
      border: none;
      border-radius: 4px;
      color: white;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 5px;

      &:hover {
        background-color: var.$color-principal-cliente;
      }
    }

    .btn-icon {
      padding: 8px;
      background: none;
      border: none;
      color: var.$color-principal-cliente;
      cursor: pointer;
      font-size: 1.2rem;
      transition: all 0.3s ease;

      svg {
        transition: transform 0.3s ease;
      }

      &:hover {
        background: none;
        svg {
          transform: scale(1.5);
        }
        color: var.$color-principal-cliente;
      }
    }
  }

  .items-list {
    max-height: 300px;
    overflow-y: auto;
    margin: 1rem 0;
    color: var.$color-principal-estudio;

    &::-webkit-scrollbar {
      width: 8px;
    }

    &::-webkit-scrollbar-track {
      border-radius: 4px;
    }

    &::-webkit-scrollbar-thumb {
      background: var.$color-principal-cliente;
      border-radius: 4px;
    }

    .item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      border: 1px solid var.$color-principal-cliente;
      margin-bottom: 5px;
      border-radius: 4px;
      margin-left: 10px;
      padding-left: 10px;
      padding-right: 10px;
      background-color: transparent !important;

      button {
        background: transparent;
        border: none;
        color: var.$color-principal-cliente;
        cursor: pointer;
        padding: 5px;

        &:hover {
          color: var.$color-principal-estudio !important;
          transform: scale(1.3);
        }
      }
    }
  }

  .buttons-container {
    display: flex;
    justify-content: flex-end;
    gap: 10px;

    .btn-cancelar {
      padding: 8px 16px;
      border-radius: 4px;
      border: none;
      cursor: pointer;
      background-color: #ff6b6b;
      color: white;

      &:hover {
        background-color: #ff5252;
      }
    }

    .btn-save-icon.main-save {
      font-size: 1.5rem;
      color: var.$color-principal-cliente;
      background: none;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
      padding: 8px;

      &:hover {
        transform: scale(1.2);
        color: var.$color-principal-cliente;
      }

      &:active {
        transform: scale(0.95);
      }
    }

    .btn-icon {
      font-size: 1.5rem;
      color: var.$color-principal-cliente;
      background: none;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
      padding: 8px;

      &.cancel {
        color: var.$color-principal-estudio;

        &:hover {
          transform: scale(1.2);
          color: var.$color-principal-estudio;
        }
      }

      &:hover {
        transform: scale(1.2);
      }

      &:active {
        transform: scale(0.95);
      }
    }
  }

  .items-existentes {
    margin-bottom: 20px;

    h3 {
      color: var.$color-principal-cliente;
      font-size: 1.1em;
      margin-bottom: 10px;
    }

    .item.existing {
      background-color: #2a2a4a;
      opacity: 0.8;
    }
  }

  .separador {
    height: 1px;
    background-color: var.$color-principal-cliente;
    margin: 20px 0;
    opacity: 0.3;
  }

  .item.nuevo {
    background-color: #232342;
  }

  .btn-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    color: var.$color-principal-estudio;
    cursor: pointer;
    font-size: 1.2rem;
    padding: 5px;
    transition: all 0.3s ease;
    z-index: 3;

    &:hover {
      transform: scale(1.2);
      color: var.$color-principal-estudio;
    }
  }
}

.edit-container {
  display: flex;
  gap: 10px;
  width: 100%;

  input {
    flex: 1;
    padding: 8px;
    border-radius: 4px;
    border: 1px solid var.$color-principal-cliente;
    background-color: white;
    color: black;
    margin-right: 10px;
  }

  .btn-save-icon {
    padding: 4px 8px;
    background: none;
    border: none;
    color: var.$color-principal-cliente;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1.2rem;

    &:hover {
      transform: scale(1.2);
      color: var.$color-principal-cliente;
    }

    &:active {
      transform: scale(0.95);
    }
  }
}

.item {
  button {
    color: var.$color-principal-cliente !important;

    &:hover {
      color: var.$color-principal-cliente !important;
    }
  }
}

[title] {
  position: relative;

  &:hover::after {
    content: attr(title);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    padding: 4px 8px;
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    font-size: 0.8rem;
    border-radius: 4px;
    white-space: nowrap;
    z-index: 1000;
  }
}

.modal-header {
  position: sticky;
  top: 0;
  background-color: var.$color-fondo-estudio;
  padding: 1rem 2rem;
  z-index: 1002;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 2rem;
  height: 3rem;

  h3 {
    margin: 0;
    color: var.$color-principal-cliente;
  }

  .header-buttons {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .btn-toggle-listas,
  .btn-close {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .btn-toggle-listas {
    background: none;
    border: none;
    color: var.$color-principal-cliente;
    cursor: pointer;
    padding: 0.5rem;
    transition: transform 0.2s ease;

    &:hover {
      transform: scale(1.1);
    }
  }

  .btn-close {
    background: none;
    border: none;
    color: var.$color-principal-estudio;
    cursor: pointer;
    padding: 0.5rem;
    transition: transform 0.2s ease;

    &:hover {
      transform: scale(1.1);
    }
  }
}

.btn-close {
  font-size: 1.2rem;
  padding: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.listas-disponibles {
  margin-top: 3rem !important;
  margin-bottom: 1rem;
  padding: 1rem;
  width: 100%;
  box-sizing: border-box;
  border: 1px solid var.$color-principal-cliente;
  border-radius: 4px;
  background-color: rgba(255, 255, 255, 0.05);

  h4 {
    margin: 0 0 0.5rem;
    color: var.$color-principal-estudio;
    font-size: 1rem;
  }

  .lista-opciones {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .lista-opcion {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    border-radius: 4px;
    background-color: rgba(255, 255, 255, 0.02);

    span {
      color: var.$color-principal-cliente;
    }

    .btn-asignar {
      background: none;
      border: 1px solid var.$color-principal-cliente;
      color: var.$color-principal-cliente;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      cursor: pointer;
      font-size: 0.8rem;
      transition: all 0.2s ease;

      &:hover {
        background-color: var.$color-principal-cliente;
        color: white;
      }
    }
  }
}

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\ModalSubcategoria.jsx
```src\components\ingresos\subcategorias\ModalSubcategoria.jsx
import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import { FaSave } from "react-icons/fa";
import { getListasMaestras } from "../../../services/listaMaestraService";
import "./ModalSubcategoria.scss";

export const ModalSubcategoria = ({
  isOpen,
  onClose,
  codigoAsignar,
  onSubmit,
  isPrincipal = false,
  nombreSubcategoria,
}) => {
  console.log("Modal recibió nombreSubcategoria:", nombreSubcategoria);
  const [tipoAccion, setTipoAccion] = useState("subcategoria");
  const [nombre, setNombre] = useState("");
  const [listas, setListas] = useState([]);
  const [listaSeleccionada, setListaSeleccionada] = useState("");
  const inputRef = React.useRef(null);

  // Cargar listas maestras cuando se abre el modal y se selecciona "lista"
  useEffect(() => {
    if (isOpen && tipoAccion === "lista") {
      const cargarListas = async () => {
        try {
          const listasData = await getListasMaestras();
          setListas(listasData);
        } catch (error) {
          console.error("Error al cargar listas:", error);
        }
      };
      cargarListas();
    }
  }, [isOpen, tipoAccion]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (tipoAccion === "subcategoria" && nombre.trim()) {
      onSubmit({
        tipo: "subcategoria",
        datos: {
          codigo: codigoAsignar,
          nombre: nombre.trim(),
          nivel: isPrincipal ? 1 : codigoAsignar.split(".").length,
          categoriaPadre: isPrincipal
            ? ""
            : codigoAsignar.split(".").slice(0, -1).join("."),
        },
      });
    } else if (tipoAccion === "lista" && listaSeleccionada) {
      onSubmit({
        tipo: "lista",
        datos: {
          codigo: codigoAsignar.split(".").slice(0, -1).join("."),
          listaId: listaSeleccionada,
        },
      });
    }
    setNombre("");
    setListaSeleccionada("");
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h2>
          {isPrincipal ? "Nueva Categoría Principal" : "Nueva Subcategoría"}
        </h2>

        <div className="codigo-preview">
          <label>Código a asignar:</label>
          <span className="codigo-valor">{codigoAsignar}</span>
          {!isPrincipal && nombreSubcategoria && (
            <div className="subcategoria-seleccionada">
              <label>
                {tipoAccion === "lista"
                  ? "Asignar lista a:"
                  : "Agregar subcategoría a:"}
              </label>
              <span className="nombre-subcategoria">{nombreSubcategoria}</span>
            </div>
          )}
        </div>

        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <select
              value={tipoAccion}
              onChange={(e) => setTipoAccion(e.target.value)}
              className="form-select"
            >
              <option value="subcategoria">Agregar Subcategoría</option>
              <option value="lista">Asignar Lista</option>
            </select>
          </div>

          {tipoAccion === "subcategoria" ? (
            <div className="form-group">
              <input
                ref={inputRef}
                type="text"
                value={nombre}
                onChange={(e) => setNombre(e.target.value)}
                placeholder="Nombre"
                className="form-input"
              />
            </div>
          ) : (
            <div className="form-group">
              <select
                value={listaSeleccionada}
                onChange={(e) => setListaSeleccionada(e.target.value)}
                className="form-select"
              >
                <option value="">Seleccione una lista...</option>
                {listas.map((lista) => (
                  <option key={lista._id} value={lista._id}>
                    {lista.nombre}
                  </option>
                ))}
              </select>
            </div>
          )}

          <div className="modal-actions">
            <button type="button" className="btn-cancelar" onClick={onClose}>
              Cancelar
            </button>
            <button
              type="submit"
              className="btn-grabar"
              disabled={
                (tipoAccion === "subcategoria" && !nombre.trim()) ||
                (tipoAccion === "lista" && !listaSeleccionada)
              }
            >
              <FaSave className="icono-grabar" />
              <span>Grabar</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

ModalSubcategoria.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  codigoAsignar: PropTypes.string.isRequired,
  onSubmit: PropTypes.func.isRequired,
  isPrincipal: PropTypes.bool,
  nombreSubcategoria: PropTypes.string,
};

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\ModalSubcategoria.scss
```src\components\ingresos\subcategorias\ModalSubcategoria.scss
@use "sass:color";
@use "../../../styles/variables" as var;

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: var.$color-fondo-estudio;
  padding: 2rem;
  border-radius: 8px;
  width: 90%;
  max-width: 500px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);

  h2 {
    color: var.$color-principal-cliente;
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .codigo-preview {
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;

    label {
      color: var.$color-principal-cliente;
      font-weight: bold;
    }

    .codigo-valor {
      background-color: var.$color-fondo-estudio;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      border: 1px solid var.$color-principal-cliente;
      color: var.$color-principal-cliente;
    }
  }

  .form-group {
    margin-bottom: 1.5rem;

    .form-input {
      width: 100%;
      padding: 8px;
      border: 1px solid var.$color-principal-cliente;
      border-radius: 4px;
      background-color: white;
      color: black;

      &:focus {
        outline: none;
        border-color: #4a90e2;
        background-color: #f0f7ff;
        box-shadow: 0 0 5px rgba(74, 144, 226, 0.3);
      }
    }
  }

  .form-select {
    width: 100%;
    padding: 8px;
    border: 1px solid var.$color-principal-cliente;
    border-radius: 4px;
    background-color: white;
    color: black;
    margin-bottom: 1rem;

    &:focus {
      outline: none;
      border-color: #4a90e2;
      box-shadow: 0 0 5px rgba(74, 144, 226, 0.3);
    }
  }

  .modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;

    button {
      padding: 0.5rem 1rem;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.3s ease;

      &.btn-cancelar {
        background-color: transparent;
        border: 1px solid var.$color-principal-cliente;
        color: var.$color-principal-cliente;

        &:hover {
          background-color: rgba(var.$color-principal-cliente, 0.1);
        }
      }

      &.btn-grabar {
        background-color: var.$color-principal-cliente;
        border: none;
        color: white;
        display: flex;
        align-items: center;
        gap: 0.5rem;

        &:hover {
          background-color: color.adjust(
            var.$color-principal-cliente,
            $lightness: -10%
          );
        }

        .icono-grabar {
          font-size: 1.1rem;
        }
      }
    }
  }
}

.subcategoria-seleccionada {
  margin-top: 10px;
  padding: 8px;
  background-color: #f5f5f5;
  border-radius: 4px;

  label {
    display: block;
    font-size: 0.9em;
    color: #666;
    margin-bottom: 4px;
  }

  .nombre-subcategoria {
    font-weight: bold;
    color: var.$color-principal-estudio;
  }
}

```
</open_file>

<open_file>
src\components\ingresos\subcategorias\SubcategoriasIngresos.jsx
```src\components\ingresos\subcategorias\SubcategoriasIngresos.jsx
import { useState, useCallback } from "react";
import PropTypes from "prop-types";
import { FormularioSubcategoriaIngresos } from "./FormularioSubcategoriaIngresos";
import { GestionLista } from "./GestionLista";

export const SubcategoriasIngresos = ({ subcategorias, onActualizar }) => {
  const [mostrarFormulario, setMostrarFormulario] = useState(false);
  const [mostrarModalLista, setMostrarModalLista] = useState(false);
  const [rutaActual, setRutaActual] = useState([]);

  const handleAgregarSubcategoria = useCallback(() => {
    const subcategoriaActual = rutaActual[rutaActual.length - 1];

    if (subcategoriaActual?.esLista) {
      setMostrarModalLista(true);
    } else {
      setMostrarFormulario(true);
    }
  }, [rutaActual]);

  const handleSubcategoriaCreada = () => {
    setMostrarFormulario(false);
    if (onActualizar) onActualizar();
  };

  const handleCerrarModalLista = () => {
    setMostrarModalLista(false);
    if (onActualizar) onActualizar();
  };

  const handleRutaChange = (nuevaRuta) => {
    setRutaActual(nuevaRuta);
  };

  return (
    <div>
      <button onClick={handleAgregarSubcategoria}>Agregar Subcategoría</button>

      {mostrarFormulario && (
        <FormularioSubcategoriaIngresos
          onSubcategoriaCreada={handleSubcategoriaCreada}
          subcategorias={subcategorias}
          rutaActual={rutaActual}
          onRutaChange={handleRutaChange}
        />
      )}

      {mostrarModalLista && (
        <GestionLista
          onCerrar={handleCerrarModalLista}
          subcategorias={subcategorias}
          rutaActual={rutaActual}
          onRutaChange={handleRutaChange}
        />
      )}
    </div>
  );
};

SubcategoriasIngresos.propTypes = {
  subcategorias: PropTypes.arrayOf(
    PropTypes.shape({
      _id: PropTypes.string.isRequired,
      codigo: PropTypes.string.isRequired,
      nombre: PropTypes.string.isRequired,
      nivel: PropTypes.number.isRequired,
      categoriaPadre: PropTypes.string,
      esLista: PropTypes.bool,
    })
  ).isRequired,
  onActualizar: PropTypes.func,
};

SubcategoriasIngresos.defaultProps = {
  onActualizar: () => {},
};

```
</open_file>

<open_file>
src\components\listas-maestras\GestionListasMaestras.jsx
```src\components\listas-maestras\GestionListasMaestras.jsx
import { useState, useEffect } from "react";
import { Box } from "@mui/material";
import {
  getListasMaestras,
  createListaMaestra,
} from "../../services/listaMaestraService";
import { ModalListaMaestra } from "./ModalListaMaestra";
import { ModalItems } from "./ModalItems";
import "./GestionListasMaestras.scss";

export const GestionListasMaestras = () => {
  const [listas, setListas] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [modalItemsOpen, setModalItemsOpen] = useState(false);
  const [listaSeleccionada, setListaSeleccionada] = useState(null);
  const [listasExpandidas, setListasExpandidas] = useState(new Set());

  const cargarListas = async () => {
    try {
      const data = await getListasMaestras();
      setListas(data);
    } catch (error) {
      console.error("Error al cargar listas:", error);
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    cargarListas();
  }, []);

  const handleCrearLista = async (formData) => {
    try {
      await createListaMaestra(formData);
      setModalOpen(false);
      cargarListas(); // Recargar las listas después de crear una nueva
    } catch (error) {
      console.error("Error al crear lista:", error);
      setError(error.message);
    }
  };

  const handleAgregarItems = (lista) => {
    setListaSeleccionada(lista);
    setModalItemsOpen(true);
  };

  const toggleItems = (listaId) => {
    const nuevasExpandidas = new Set(listasExpandidas);
    if (nuevasExpandidas.has(listaId)) {
      nuevasExpandidas.delete(listaId);
    } else {
      nuevasExpandidas.add(listaId);
    }
    setListasExpandidas(nuevasExpandidas);
  };

  const renderItems = (items) => {
    if (!items || items.length === 0) return null;

    return (
      <div className="items-list">
        {items.map((item, index) => (
          <div key={index} className="item">
            <div className="item-nombre">{item.nombre}</div>
            {item.items && item.items.length > 0 && (
              <div className="subitems">{renderItems(item.items)}</div>
            )}
          </div>
        ))}
      </div>
    );
  };

  return (
    <Box className="listas-maestras-container">
      <h1>Gestión de Listas Maestras</h1>

      <button className="btn-nueva-lista" onClick={() => setModalOpen(true)}>
        AGREGAR NUEVA LISTA
      </button>

      {/* Mostrar listas existentes */}
      {isLoading ? (
        <p>Cargando...</p>
      ) : error ? (
        <p>Error: {error}</p>
      ) : (
        <div className="listas-grid">
          {listas.map((lista) => (
            <div key={lista._id} className="lista-card">
              <h3>{lista.nombre}</h3>
              <p>{lista.descripcion}</p>
              <button
                className="btn-agregar-items"
                onClick={() => handleAgregarItems(lista)}
              >
                Agregar Items
              </button>
              <button
                className="btn-toggle-items"
                onClick={() => toggleItems(lista._id)}
              >
                {listasExpandidas.has(lista._id)
                  ? "Ocultar Items"
                  : "Ver Items"}
              </button>
              {listasExpandidas.has(lista._id) && renderItems(lista.items)}
            </div>
          ))}
        </div>
      )}

      <ModalListaMaestra
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        onSubmit={handleCrearLista}
      />

      {listaSeleccionada && (
        <ModalItems
          isOpen={modalItemsOpen}
          onClose={() => {
            setModalItemsOpen(false);
            setListaSeleccionada(null);
          }}
          lista={listaSeleccionada}
          onItemsUpdated={cargarListas}
        />
      )}
    </Box>
  );
};

```
</open_file>

<open_file>
src\components\listas-maestras\GestionListasMaestras.scss
```src\components\listas-maestras\GestionListasMaestras.scss
@use "../../styles/variables" as var;

.listas-maestras-container {
  padding: 2rem;

  h1 {
    color: var.$color-principal-cliente;
    margin-bottom: 1rem;
    text-align: center;
    font-size: 1.6rem;
  }

  .listas-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
  }

  .lista-card {
    padding: 1.2rem;

    border: 1px solid var.$color-principal-cliente;

    h3 {
      color: var.$color-principal-cliente;
      margin-bottom: 0.8rem;
      text-align: center;
      font-size: 1.2rem;
    }

    p {
      color: var.$color-principal-estudio;
      margin-bottom: 0.8rem;
      text-align: center;
      font-size: 0.9rem;
    }

    .btn-agregar-items {
      width: 100%;
      padding: 0.6rem;
      margin: 0.8rem 0;
      background: var.$color-principal-estudio;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;

      &:hover {
        opacity: 0.9;
        transform: translateY(-1px);
      }

      &:active {
        transform: translateY(0);
      }
    }

    .btn-toggle-items {
      width: 100%;
      padding: 0.6rem;

      background: transparent;
      color: var.$color-principal-cliente;
      border: 1px solid var.$color-principal-cliente;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;

      &:hover {
        background: var.$color-principal-cliente;
        color: white;
        transform: translateY(-1px);
      }

      &:active {
        transform: translateY(0);
      }
    }

    .items-list {
      margin-top: 0.5rem;
      animation: fadeIn 0.3s ease;

      .item {
        margin: 0.1rem 0;
        color: white;

        .item-nombre {
          padding: 0.1rem 0.3rem;
          font-size: 0.95rem;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          background: none;
        }

        .subitems {
          margin-left: 0.8rem;
          border-left: 1px solid rgba(64, 181, 166, 0.3);
          padding-left: 0.5rem;

          .item-nombre {
            font-size: 0.92rem;
            color: rgba(255, 255, 255, 0.9);
          }

          .subitems {
            margin-left: 0.6rem;
            padding-left: 0.4rem;

            .item-nombre {
              font-size: 0.9rem;
              color: rgba(255, 255, 255, 0.85);
            }
          }
        }
      }
    }
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.btn-agregar-principal-small {
  background: none;
  border: 1px solid var.$color-principal-cliente;
  color: var.$color-principal-cliente;
  padding: 0.3rem 0.8rem;
  border-radius: 4px;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;

  &:hover {
    background-color: var.$color-principal-cliente;
    color: white;
  }
}

.btn-nueva-lista {
  background: var.$color-principal-estudio;
  color: white;
  border: none;
  padding: 0.8rem 1.5rem;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 2rem auto;
  display: block;
  min-width: 200px;

  &:hover {
    opacity: 0.9;
    transform: translateY(-1px);
  }

  &:active {
    transform: translateY(0);
  }
}

```
</open_file>

<open_file>
src\components\listas-maestras\ModalItems.jsx
```src\components\listas-maestras\ModalItems.jsx
import { useState } from "react";
import PropTypes from "prop-types";
import { addItemToLista } from "../../services/listaMaestraService";
import { AiOutlineClose } from "react-icons/ai";
import "./ModalItems.scss";

export const ModalItems = ({
  isOpen,
  onClose,
  lista: listaInicial,
  onItemsUpdated,
}) => {
  const [nuevoItem, setNuevoItem] = useState("");
  const [itemSeleccionado, setItemSeleccionado] = useState(null);
  const [rutaActual, setRutaActual] = useState([]);
  const [listaActual, setListaActual] = useState(listaInicial);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!nuevoItem.trim()) return;

    try {
      const itemData = {
        nombre: nuevoItem,
        parentId: itemSeleccionado?._id,
      };

      const listaActualizada = await addItemToLista(listaActual._id, itemData);
      setListaActual(listaActualizada);
      setNuevoItem("");
      onItemsUpdated();
    } catch (error) {
      console.error("Error al agregar item:", error);
    }
  };

  const renderItems = (items = listaActual.items, nivel = 0) => {
    return items?.map((item, index) => (
      <div key={index} className={`item-container nivel-${nivel}`}>
        <div className="item-content">
          <span className="item-nombre">{item.nombre}</span>
          <button
            type="button"
            className="btn-agregar-subitem"
            onClick={() => {
              setItemSeleccionado(item);
              setRutaActual([...rutaActual, item.nombre]);
            }}
          >
            Agregar Subitem
          </button>
        </div>
        {item.items && item.items.length > 0 && (
          <div className="subitems">{renderItems(item.items, nivel + 1)}</div>
        )}
      </div>
    ));
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <button className="btn-cerrar-modal" onClick={onClose} title="Cerrar">
          <AiOutlineClose />
        </button>
        <h2>
          Agregar Items a<span>{listaActual.nombre}</span>
        </h2>
        {rutaActual.length > 0 && (
          <div className="ruta-actual">
            {rutaActual.join(" > ")}
            <button
              className="btn-volver"
              onClick={() => {
                setItemSeleccionado(null);
                setRutaActual([]);
              }}
            >
              Volver al inicio
            </button>
          </div>
        )}
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="nombreItem">
              {itemSeleccionado
                ? `Nuevo subitem en "${itemSeleccionado.nombre}"`
                : "Nuevo item"}
            </label>
            <div className="input-buttons-container">
              <input
                id="nombreItem"
                type="text"
                value={nuevoItem}
                onChange={(e) => setNuevoItem(e.target.value)}
                required
                autoFocus
              />
              <button type="button" className="btn-cancelar" onClick={onClose}>
                Cerrar
              </button>
              <button type="submit" className="btn-guardar">
                {itemSeleccionado ? "Agregar Subitem" : "Agregar Item"}
              </button>
            </div>
          </div>
          <div className="items-list-modal">
            {renderItems(listaActual.items)}
          </div>
        </form>
      </div>
    </div>
  );
};

ModalItems.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  lista: PropTypes.object.isRequired,
  onItemsUpdated: PropTypes.func.isRequired,
};

```
</open_file>

<open_file>
src\components\listas-maestras\ModalItems.scss
```src\components\listas-maestras\ModalItems.scss
@use "sass:color";
@use "../../styles/variables" as var;

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: var.$color-fondo-estudio;
  padding: 2rem;
  border-radius: 8px;
  width: 90%;
  max-width: 800px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  border: 1px solid var.$color-principal-cliente;
  max-height: 90vh;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  position: relative;

  h2 {
    color: white;
    margin-bottom: 1.5rem;
    text-align: center;
    font-size: 1.5rem;

    span {
      display: block;
      font-size: 1.2rem;
      margin-top: 0.5rem;
      color: var.$color-principal-cliente;
    }
  }

  .form-group {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;

    label {
      color: white;
      font-size: 1.2rem;
      text-align: center;
      margin-bottom: 0.5rem;
    }

    .input-buttons-container {
      display: flex;
      gap: 1rem;
      align-items: center;
      width: 100%;
      justify-content: center;

      input {
        max-width: 300px;
        padding: 0.8rem;
        border: 1px solid var.$color-principal-cliente;
        border-radius: 4px;
        background-color: white;
      }

      button {
        height: 42px;
        padding: 0 1rem;
        white-space: nowrap;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        min-width: 100px;
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;

        &.btn-cancelar {
          background-color: transparent;
          border: 1px solid var.$color-principal-cliente;
          color: var.$color-principal-cliente;

          &:hover {
            background-color: var.$color-principal-cliente;
            color: white;
          }
        }

        &.btn-guardar {
          background-color: var.$color-principal-estudio;
          border: 1px solid var.$color-principal-estudio;
          color: white;

          &:hover {
            opacity: 0.9;
          }
        }
      }
    }
  }

  .items-list-modal {
    max-height: 400px;
    overflow-y: auto;
    margin-top: 0.5rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding-top: 0.5rem;
    padding-left: 0.5rem;

    .item-container {
      margin: 0;
      text-align: left;

      .item-content {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        padding: 0.1rem 0;
        background: none;
        min-height: 24px;

        .item-nombre {
          color: white;
          margin-right: auto;
          font-size: 0.9rem;
        }

        .btn-agregar-subitem {
          background: transparent;
          border: 1px solid var.$color-principal-cliente;
          color: var.$color-principal-cliente;
          padding: 0.2rem 0.5rem;
          border-radius: 4px;
          font-size: 0.8rem;
          cursor: pointer;
          transition: all 0.2s ease;
          white-space: nowrap;
          margin-left: auto;
          min-width: 110px;

          &:hover {
            background: var.$color-principal-cliente;
            color: white;
          }
        }
      }

      .subitems {
        margin-left: 1.2rem;
        border-left: 1px solid rgba(64, 181, 166, 0.2);
        padding-left: 0.8rem;

        .subitems {
          margin-left: 1.5rem;
          padding-left: 1rem;
        }
      }
    }
  }

  .btn-cerrar-modal {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    background: transparent;
    border: none;
    color: var.$color-principal-cliente;
    font-size: 1.8rem;
    cursor: pointer;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    margin: 0;
    z-index: 1001;

    svg {
      width: 28px;
      height: 28px;
    }

    &:hover {
      color: white;
      transform: scale(1.1);
    }

    &:active {
      transform: scale(0.95);
    }
  }
}

.ruta-actual {
  color: var.$color-principal-cliente;
  padding: 0.5rem;
  margin-bottom: 1rem;
  font-size: 0.9rem;
  display: flex;
  justify-content: space-between;
  align-items: center;

  .btn-volver {
    background: transparent;
    border: none;
    color: var.$color-principal-estudio;
    cursor: pointer;
    font-size: 0.8rem;

    &:hover {
      text-decoration: underline;
    }
  }
}

```
</open_file>

<open_file>
src\components\listas-maestras\ModalListaMaestra.jsx
```src\components\listas-maestras\ModalListaMaestra.jsx
import PropTypes from "prop-types";
import { useState } from "react";
import "./ModalListaMaestra.scss";

export const ModalListaMaestra = ({
  isOpen,
  onClose,
  onSubmit,
  lista = null,
}) => {
  const [formData, setFormData] = useState({
    nombre: lista?.nombre || "",
    descripcion: lista?.descripcion || "",
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h2>{lista ? "Editar Lista Maestra" : "Nueva Lista Maestra"}</h2>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="nombre">Nombre de la Lista</label>
            <input
              id="nombre"
              type="text"
              value={formData.nombre}
              onChange={(e) =>
                setFormData({ ...formData, nombre: e.target.value })
              }
              required
              autoFocus
            />
          </div>
          <div className="form-group">
            <label htmlFor="descripcion">Descripción</label>
            <textarea
              id="descripcion"
              value={formData.descripcion}
              onChange={(e) =>
                setFormData({ ...formData, descripcion: e.target.value })
              }
              rows={3}
            />
          </div>
          <div className="modal-actions">
            <button type="button" className="btn-cancelar" onClick={onClose}>
              Cancelar
            </button>
            <button type="submit" className="btn-guardar">
              {lista ? "Guardar Cambios" : "Crear Lista"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

ModalListaMaestra.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  onSubmit: PropTypes.func.isRequired,
  lista: PropTypes.shape({
    nombre: PropTypes.string,
    descripcion: PropTypes.string,
  }),
};

```
</open_file>

<open_file>
src\components\listas-maestras\ModalListaMaestra.scss
```src\components\listas-maestras\ModalListaMaestra.scss
@use "sass:color";
@use "../../styles/variables" as var;

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: var.$color-fondo-estudio;
  padding: 2rem;
  border-radius: 8px;
  width: 90%;
  max-width: 400px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  border: 1px solid var.$color-principal-cliente;

  h2 {
    color: white;
    margin-bottom: 1.5rem;
    text-align: center;
    font-size: 1.5rem;
  }

  .form-group {
    margin-bottom: 1.5rem;

    label {
      display: block;
      margin-bottom: 0.5rem;
      color: white;
      font-size: 1rem;
    }

    input,
    textarea {
      width: 100%;
      padding: 0.4rem;
      border: 1px solid var.$color-principal-cliente;
      border-radius: 4px;
      background-color: white;
      color: black;
      font-size: 1rem;

      &:focus {
        outline: none;
        border-color: var.$color-principal-estudio;
        box-shadow: 0 0 0 2px
          color.adjust(var.$color-principal-estudio, $alpha: -0.8);
      }
    }

    textarea {
      resize: vertical;
      min-height: 72px;
      max-height: 150px;
      line-height: 24px;
    }
  }

  .modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    margin-top: 2rem;
    flex-wrap: nowrap;

    button {
      min-width: 120px;
      white-space: nowrap;
      padding: 0.4rem 1rem;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      transition: all 0.3s ease;

      &.btn-cancelar {
        background-color: transparent;
        border: 1px solid var.$color-principal-cliente;
        color: var.$color-principal-cliente;

        &:hover {
          background-color: var.$color-principal-cliente;
          color: white;
        }
      }

      &.btn-guardar {
        background-color: var.$color-principal-estudio;
        border: 1px solid var.$color-principal-estudio;
        color: white;

        &:hover {
          background-color: color.adjust(
            var.$color-principal-estudio,
            $lightness: -10%
          );
          border-color: color.adjust(
            var.$color-principal-estudio,
            $lightness: -10%
          );
        }
      }

      &:hover {
        transform: translateY(-1px);
      }

      &:active {
        transform: translateY(0);
      }
    }
  }
}

.input-nombre-lista {
  background-color: azure;
  border: 1px solid var.$color-principal-estudio;
}

```
</open_file>

<open_file>
src\components\NavBar.jsx
```src\components\NavBar.jsx
import { useState, useEffect } from "react";
import logo from "../assets/logoEstudio.png";
import logo1 from "../assets/logoEstudio1.png";
import whatsappIcon from "/whatsapp.png";
import { Link, useNavigate } from "react-router-dom";
import "../styles/NavBar.scss";
import { obtenerFechaActual } from "../utils/fechaActual";
import { Undo2, PhoneCall, LogOut, UserPlus, User } from "lucide-react";
import { logout, isAuthenticated, getUser } from "../services/authService";

export const NavBar = () => {
  const [showContact, setShowContact] = useState(true);
  const [showDate, setShowDate] = useState(true);
  const [showLogo1, setShowLogo1] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    let timer;
    if (!showContact && !showDate) {
      timer = setTimeout(() => {
        setShowContact(true);
        setShowDate(true);
      }, 10000);
    }
    return () => clearTimeout(timer);
  }, [showContact, showDate]);

  useEffect(() => {
    const logoTimer = setInterval(() => {
      setShowLogo1((prevShowLogo1) => !prevShowLogo1);
    }, 20000); // Cambia el logo cada 20 segundos
    return () => clearInterval(logoTimer);
  }, []);

  const handleContactClick = () => {
    setShowContact(false);
    setShowDate(false);
  };

  const handleBackClick = () => {
    // Verifica si hay historial de navegación
    if (window.history.length > 2) {
      navigate(-1); // Vuelve a la página anterior
    } else {
      navigate("/"); // Redirige a la página principal si no hay historial
    }
  };

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  // Función para verificar si el usuario es alberto
  const isAlbertoUser = () => {
    return localStorage.getItem("auth_user") === "alberto";
  };

  return (
    <div>
      <nav className="navbar navbar-expand-lg justify-content-center">
        <span className="navbar-brand logo-container">
          <Link to="/home">
            <img
              src={logo}
              className={`d-inline-block align-top logo-img ${
                showLogo1 ? "show" : ""
              }`}
              alt="logo"
            />
            <img
              src={logo1}
              className={`d-inline-block align-top logo-img ${
                showLogo1 ? "" : "show"
              }`}
              alt="logo1"
            />
          </Link>
        </span>
        <ul className="navbar-nav">
          {showContact ? (
            <li className="nav-item">
              <span className="button-contacto" onClick={handleContactClick}>
                <PhoneCall size={30} />
              </span>
            </li>
          ) : (
            <li className="nav-item">
              <img
                src={whatsappIcon}
                alt="whatsapp"
                className="whatsapp-icon"
              />
              <span className="telefono">(+54 9 388) 4781336</span>
            </li>
          )}

          <li className="nav-item-1">
            <button onClick={handleBackClick} className="button-volver">
              <Undo2 size={30} />
            </button>
          </li>

          {/* Usuario logueado */}
          {isAuthenticated() && (
            <li className="nav-item-1 usuario-logueado">
              <User size={30} className="icono-usuario" />
              <span className="nombre-usuario">{getUser().toUpperCase()}</span>
            </li>
          )}

          {/* Botón de logout */}
          {isAuthenticated() && (
            <li className="nav-item-1">
              <button onClick={handleLogout} className="button-volver">
                <LogOut size={30} />
              </button>
            </li>
          )}

          {/* Botón de registro solo para alberto */}
          {isAlbertoUser() && (
            <li className="nav-item-1">
              <Link to="/register" className="button-volver">
                <UserPlus size={30} />
              </Link>
            </li>
          )}
        </ul>
        {showDate && (
          <span className="fecha-actual">{obtenerFechaActual()}</span>
        )}
      </nav>
    </div>
  );
};

```
</open_file>

<open_file>
src\components\PaginaInicial.jsx
```src\components\PaginaInicial.jsx
import logo from "../assets/odontomed512_512.png";
import logo1 from "../assets/odontomedBigLogo.png";
import "../styles/PaginaInicial.scss";
import { FaDollarSign, FaMoneyBillWave } from "react-icons/fa";
import { Link } from "react-router-dom";
import { DashboardIngresos } from "./dashboard/DashboardIngresos";
import { DashboardEgresos } from "./dashboard/DashboardEgresos";
import { DashboardComparativo } from "./dashboard/DashboardComparativo";

export const PaginaInicial = () => {
  return (
    <div className="pagina-inicial">
      <div className="pagina-inicial-container">
        <img src={logo} alt="Logo" className="pagina-inicial-logo" />
        <img src={logo1} alt="Logo1" className="pagina-inicial-logo-1" />
        <p className="pag-ini-titulo">Cash Flow</p>
      </div>
      <div className="pagina-inicial-container">
        <Link to="/ingresos">
          <button className="btn-ingresos">
            <FaDollarSign className="btn-icon" />
            Ingresos
          </button>
        </Link>
        <Link to="/egresos">
          <button className="btn-gastos">
            <FaMoneyBillWave className="btn-icon" />
            Egresos
          </button>
        </Link>
      </div>

      <DashboardIngresos />
      <DashboardEgresos />
      <DashboardComparativo />
    </div>
  );
};

```
</open_file>

<open_file>
src\config\constants.js
```src\config\constants.js
export const API_BASE_URL =
  import.meta.env.VITE_API_URL || "https://caja-om.estudiobeguier.com:5005";

export const INITIAL_FORM_STATE = {
  codigo: "",
  nombre: "",
  nivel: 1,
  categoriaPadre: "",
};

export const INITIAL_SUBCATEGORIA_FORM_STATE = {
  codigo: "",
  nombre: "",
  nivel: 1,
  categoriaPadre: "",
  categoriaBase: "",
};

export const ENDPOINTS = {
  CATEGORIAS_EGRESOS: "/api/categorias-egresos",
  SUBCATEGORIAS_EGRESOS: "/api/subcategorias-egresos",
  SUBCATEGORIAS_INGRESOS: "/api/subcategorias-ingresos",
  CONVERTIR_LISTA: "/api/subcategorias-ingresos/convertir-lista",
};

```
</open_file>

<open_file>
src\hooks\useCategorias.js
```src\hooks\useCategorias.js
import { useState, useEffect } from "react";
import { getCategorias } from "../services/categoriasService";

export const useCategorias = () => {
  const [categorias, setCategorias] = useState([]);
  const [rutaSeleccion, setRutaSeleccion] = useState([]);
  const [categoriasVisibles, setCategoriasVisibles] = useState([]);
  const [cargando, setCargando] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const obtenerCategorias = async () => {
      try {
        const data = await getCategorias();
        setCategorias(data);
        const categoriasPrincipales = data.filter((cat) => !cat.categoriaPadre);
        setCategoriasVisibles(categoriasPrincipales);
      } catch (err) {
        setError(err.message);
      } finally {
        setCargando(false);
      }
    };
    obtenerCategorias();
  }, []);

  const esCategoriaNivelFinal = (categoria) => {
    return !categorias.some((cat) => cat.categoriaPadre === categoria.codigo);
  };

  const seleccionarCategoria = (categoriaSeleccionada) => {
    const nuevaRuta = [...rutaSeleccion, categoriaSeleccionada];
    setRutaSeleccion(nuevaRuta);

    const subcategorias = categorias.filter(
      (cat) => cat.categoriaPadre === categoriaSeleccionada.codigo
    );

    setCategoriasVisibles(subcategorias);
  };

  const volverAtras = () => {
    if (rutaSeleccion.length > 0) {
      const nuevaRuta = rutaSeleccion.slice(0, -1);
      setRutaSeleccion(nuevaRuta);

      if (nuevaRuta.length === 0) {
        const categoriasPrincipales = categorias.filter(
          (cat) => !cat.categoriaPadre
        );
        setCategoriasVisibles(categoriasPrincipales);
      } else {
        const categoriaAnterior = nuevaRuta[nuevaRuta.length - 1];
        const subcategorias = categorias.filter(
          (cat) => cat.categoriaPadre === categoriaAnterior.codigo
        );
        setCategoriasVisibles(subcategorias);
      }
    }
  };

  const resetearSeleccion = () => {
    setRutaSeleccion([]);
    const categoriasPrincipales = categorias.filter(
      (cat) => !cat.categoriaPadre
    );
    setCategoriasVisibles(categoriasPrincipales);
  };

  return {
    categorias,
    rutaSeleccion,
    categoriasVisibles,
    cargando,
    error,
    esCategoriaNivelFinal,
    seleccionarCategoria,
    volverAtras,
    resetearSeleccion,
  };
};

```
</open_file>

<open_file>
src\hooks\useCategoriasEgresos.js
```src\hooks\useCategoriasEgresos.js
import { useState, useEffect } from "react";
import { getCategoriasEgresos } from "../services/categoriaEgresosService";

export const useCategoriasEgresos = () => {
  const [categorias, setCategorias] = useState([]);
  const [rutaSeleccion, setRutaSeleccion] = useState([]);
  const [categoriasVisibles, setCategoriasVisibles] = useState([]);
  const [cargando, setCargando] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const obtenerCategorias = async () => {
      try {
        const data = await getCategoriasEgresos();
        setCategorias(data);
        const categoriasPrincipales = data.filter((cat) => !cat.categoriaPadre);
        setCategoriasVisibles(categoriasPrincipales);
      } catch (err) {
        setError(err.message);
      } finally {
        setCargando(false);
      }
    };
    obtenerCategorias();
  }, []);

  const esCategoriaNivelFinal = (categoria) => {
    return !categorias.some((cat) => cat.categoriaPadre === categoria.codigo);
  };

  const seleccionarCategoria = (categoriaSeleccionada) => {
    const nuevaRuta = [...rutaSeleccion, categoriaSeleccionada];
    setRutaSeleccion(nuevaRuta);

    const subcategorias = categorias.filter(
      (cat) => cat.categoriaPadre === categoriaSeleccionada.codigo
    );

    setCategoriasVisibles(subcategorias);
  };

  const volverAtras = () => {
    if (rutaSeleccion.length > 0) {
      const nuevaRuta = rutaSeleccion.slice(0, -1);
      setRutaSeleccion(nuevaRuta);

      if (nuevaRuta.length === 0) {
        const categoriasPrincipales = categorias.filter(
          (cat) => !cat.categoriaPadre
        );
        setCategoriasVisibles(categoriasPrincipales);
      } else {
        const categoriaAnterior = nuevaRuta[nuevaRuta.length - 1];
        const subcategorias = categorias.filter(
          (cat) => cat.categoriaPadre === categoriaAnterior.codigo
        );
        setCategoriasVisibles(subcategorias);
      }
    }
  };

  const resetearSeleccion = () => {
    setRutaSeleccion([]);
    const categoriasPrincipales = categorias.filter(
      (cat) => !cat.categoriaPadre
    );
    setCategoriasVisibles(categoriasPrincipales);
  };

  return {
    categorias,
    rutaSeleccion,
    categoriasVisibles,
    cargando,
    error,
    esCategoriaNivelFinal,
    seleccionarCategoria,
    volverAtras,
    resetearSeleccion,
  };
};

```
</open_file>

<open_file>
src\hooks\useInactivityTimer.js
```src\hooks\useInactivityTimer.js
import { useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import { logout } from "../services/authService";

export const useInactivityTimer = (timeoutMinutes = 1) => {
  const navigate = useNavigate();

  const resetTimer = useCallback(() => {
    const timer = localStorage.getItem("inactivityTimer");
    if (timer) {
      clearTimeout(parseInt(timer));
    }

    const newTimer = setTimeout(() => {
      logout();
      navigate("/login");
    }, timeoutMinutes * 60 * 1000);

    localStorage.setItem("inactivityTimer", newTimer.toString());
  }, [navigate, timeoutMinutes]);

  useEffect(() => {
    // Eventos que resetean el timer
    const events = [
      "mousedown",
      "mousemove",
      "keypress",
      "scroll",
      "touchstart",
    ];

    // Iniciar el timer
    resetTimer();

    // Agregar event listeners
    events.forEach((event) => {
      document.addEventListener(event, resetTimer);
    });

    // Cleanup
    return () => {
      const timer = localStorage.getItem("inactivityTimer");
      if (timer) {
        clearTimeout(parseInt(timer));
      }
      events.forEach((event) => {
        document.removeEventListener(event, resetTimer);
      });
    };
  }, [resetTimer]);
};

```
</open_file>

<open_file>
src\hooks\useSubcategoriasEgresos.js
```src\hooks\useSubcategoriasEgresos.js
import { useState, useEffect, useCallback } from "react";
import { getSubcategoriasEgresos } from "../services/subcategoriaEgresosService";

export const useSubcategoriasEgresos = () => {
  const [subcategorias, setSubcategorias] = useState([]);
  const [rutaSeleccion, setRutaSeleccion] = useState([]);
  const [subcategoriasVisibles, setSubcategoriasVisibles] = useState([]);
  const [cargando, setCargando] = useState(true);
  const [error, setError] = useState(null);

  const cargarEstadoGuardado = useCallback(
    (subcategoriaGuardada) => {
      if (subcategoriaGuardada?.rutaSubcategoria) {
        const padres = subcategoriaGuardada.rutaSubcategoria.slice(0, -1);
        setRutaSeleccion(padres);

        if (padres.length > 0) {
          const ultimoPadre = padres[padres.length - 1];
          const hijos = subcategorias.filter(
            (sub) => sub.categoriaPadre === ultimoPadre.codigo
          );
          setSubcategoriasVisibles(hijos);
        } else {
          const principales = subcategorias.filter(
            (sub) => !sub.categoriaPadre
          );
          setSubcategoriasVisibles(principales);
        }
      }
    },
    [subcategorias]
  );

  useEffect(() => {
    const obtenerSubcategorias = async () => {
      try {
        const data = await getSubcategoriasEgresos();
        setSubcategorias(data);
        if (rutaSeleccion.length === 0) {
          const subcategoriasPrincipales = data.filter(
            (subcat) => !subcat.categoriaPadre
          );
          setSubcategoriasVisibles(subcategoriasPrincipales);
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setCargando(false);
      }
    };
    obtenerSubcategorias();
  }, [rutaSeleccion.length]);

  const seleccionarSubcategoria = (subcategoriaSeleccionada) => {
    const nuevaRuta = [...rutaSeleccion, subcategoriaSeleccionada];
    setRutaSeleccion(nuevaRuta);

    const subsubcategorias = subcategorias.filter(
      (subcat) => subcat.categoriaPadre === subcategoriaSeleccionada.codigo
    );
    setSubcategoriasVisibles(subsubcategorias);
  };

  const volverAtras = () => {
    if (rutaSeleccion.length > 0) {
      const nuevaRuta = rutaSeleccion.slice(0, -1);
      setRutaSeleccion(nuevaRuta);

      if (nuevaRuta.length === 0) {
        const subcategoriasPrincipales = subcategorias.filter(
          (subcat) => !subcat.categoriaPadre
        );
        setSubcategoriasVisibles(subcategoriasPrincipales);
      } else {
        const subcategoriaAnterior = nuevaRuta[nuevaRuta.length - 1];
        const subsubcategorias = subcategorias.filter(
          (subcat) => subcat.categoriaPadre === subcategoriaAnterior.codigo
        );
        setSubcategoriasVisibles(subsubcategorias);
      }
    }
  };

  const resetearSeleccion = () => {
    setRutaSeleccion([]);
    const subcategoriasPrincipales = subcategorias.filter(
      (subcat) => !subcat.categoriaPadre
    );
    setSubcategoriasVisibles(subcategoriasPrincipales);
  };

  return {
    subcategorias,
    rutaSeleccion,
    subcategoriasVisibles,
    cargando,
    error,
    seleccionarSubcategoria,
    volverAtras,
    resetearSeleccion,
    cargarEstadoGuardado,
  };
};

```
</open_file>

<open_file>
src\hooks\useSubcategoriasIngresos.js
```src\hooks\useSubcategoriasIngresos.js
import { useState, useEffect, useCallback } from "react";
import { getSubcategoriasIngresos } from "../services/subcategoriaIngresosService";

export const useSubcategoriasIngresos = () => {
  const [subcategorias, setSubcategorias] = useState([]);
  const [rutaSeleccion, setRutaSeleccion] = useState([]);
  const [subcategoriasVisibles, setSubcategoriasVisibles] = useState([]);
  const [cargando, setCargando] = useState(true);
  const [error, setError] = useState(null);

  const cargarEstadoGuardado = useCallback(
    (subcategoriaGuardada) => {
      if (subcategoriaGuardada?.rutaSubcategoria) {
        const padres = subcategoriaGuardada.rutaSubcategoria.slice(0, -1);
        setRutaSeleccion(padres);

        if (padres.length > 0) {
          const ultimoPadre = padres[padres.length - 1];
          const hijos = subcategorias.filter(
            (sub) => sub.categoriaPadre === ultimoPadre.codigo
          );
          setSubcategoriasVisibles(hijos);
        } else {
          const principales = subcategorias.filter(
            (sub) => !sub.categoriaPadre
          );
          setSubcategoriasVisibles(principales);
        }
      }
    },
    [subcategorias]
  );

  useEffect(() => {
    const obtenerSubcategorias = async () => {
      try {
        const data = await getSubcategoriasIngresos();
        setSubcategorias(data);
        if (rutaSeleccion.length === 0) {
          const subcategoriasPrincipales = data.filter(
            (sub) => !sub.categoriaPadre
          );
          setSubcategoriasVisibles(subcategoriasPrincipales);
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setCargando(false);
      }
    };

    obtenerSubcategorias();
  }, [rutaSeleccion.length]);

  const seleccionarSubcategoria = (subcategoriaSeleccionada) => {
    const nuevaRuta = [...rutaSeleccion, subcategoriaSeleccionada];
    setRutaSeleccion(nuevaRuta);

    const subsubcategorias = subcategorias.filter(
      (sub) => sub.categoriaPadre === subcategoriaSeleccionada.codigo
    );
    setSubcategoriasVisibles(subsubcategorias);
  };

  const volverAtras = () => {
    if (rutaSeleccion.length > 0) {
      const nuevaRuta = rutaSeleccion.slice(0, -1);
      setRutaSeleccion(nuevaRuta);

      if (nuevaRuta.length === 0) {
        const subcategoriasPrincipales = subcategorias.filter(
          (sub) => !sub.categoriaPadre
        );
        setSubcategoriasVisibles(subcategoriasPrincipales);
      } else {
        const subcategoriaAnterior = nuevaRuta[nuevaRuta.length - 1];
        const subsubcategorias = subcategorias.filter(
          (sub) => sub.categoriaPadre === subcategoriaAnterior.codigo
        );
        setSubcategoriasVisibles(subsubcategorias);
      }
    }
  };

  const resetearSeleccion = () => {
    setRutaSeleccion([]);
    const subcategoriasPrincipales = subcategorias.filter(
      (sub) => !sub.categoriaPadre
    );
    setSubcategoriasVisibles(subcategoriasPrincipales);
  };

  return {
    subcategorias,
    rutaSeleccion,
    subcategoriasVisibles,
    cargando,
    error,
    seleccionarSubcategoria,
    volverAtras,
    resetearSeleccion,
    cargarEstadoGuardado,
  };
};

```
</open_file>

<open_file>
src\main.jsx
```src\main.jsx
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";

import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap/dist/js/bootstrap.bundle.min.js";
import App from "./App.jsx";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <App />
  </StrictMode>
);

```
</open_file>

<open_file>
src\services\authService.js
```src\services\authService.js
import { API_BASE_URL } from "../config/constants";

const TOKEN_KEY = "auth_token";
const USER_KEY = "auth_user";

export const login = async (credentials) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(credentials),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.mensaje);
    }

    const data = await response.json();

    // Guardar token y usuario
    localStorage.setItem(TOKEN_KEY, data.token);
    localStorage.setItem(USER_KEY, data.username);

    return data;
  } catch (error) {
    throw new Error(error.message || "Error al iniciar sesión");
  }
};

export const logout = () => {
  // Limpiar el timer de inactividad
  const timer = localStorage.getItem("inactivityTimer");
  if (timer) {
    clearTimeout(parseInt(timer));
    localStorage.removeItem("inactivityTimer");
  }

  // Limpiar datos de autenticación
  localStorage.removeItem(TOKEN_KEY);
  localStorage.removeItem(USER_KEY);
};

export const isAuthenticated = () => {
  return !!localStorage.getItem(TOKEN_KEY);
};

export const getToken = () => {
  return localStorage.getItem(TOKEN_KEY);
};

export const getAuthHeaders = () => {
  const token = getToken();
  return {
    "Content-Type": "application/json",
    Authorization: `Bearer ${token}`,
  };
};

export const getUser = () => {
  return localStorage.getItem(USER_KEY);
};

```
</open_file>

<open_file>
src\services\categoriaEgresosService.js
```src\services\categoriaEgresosService.js
import { API_BASE_URL } from "../config/constants";

export const createCategoriaEgreso = async (categoriaData) => {
  const response = await fetch(`${API_BASE_URL}/api/categorias-egresos`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(categoriaData),
  });

  if (!response.ok) {
    const data = await response.json();
    throw new Error(data.mensaje || "Error al crear la categoría");
  }

  return response.json();
};

export const getCategoriasEgresos = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/categorias-egresos`);

    if (!response.ok) {
      const contentType = response.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        const errorData = await response.json();
        throw new Error(errorData.mensaje || "Error al obtener las categorías");
      } else {
        throw new Error("Error en la conexión con el servidor");
      }
    }

    return await response.json();
  } catch (error) {
    throw new Error(error.message || "Error al obtener las categorías");
  }
};

```
</open_file>

<open_file>
src\services\categoriasService.js
```src\services\categoriasService.js
import { API_BASE_URL } from "../config/constants";

export const createCategoria = async (categoriaData) => {
  const response = await fetch(`${API_BASE_URL}/api/categorias-ingresos`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(categoriaData),
  });

  if (!response.ok) {
    const data = await response.json();
    throw new Error(data.mensaje || "Error al crear la categoría");
  }

  return response.json();
};
export const getCategorias = async () => {
  const response = await fetch(`${API_BASE_URL}/api/categorias-ingresos`);

  if (!response.ok) {
    const data = await response.json();
    throw new Error(data.mensaje || "Error al obtener las categorías");
  }

  return response.json();
};

```
</open_file>

<open_file>
src\services\egresosService.js
```src\services\egresosService.js
import { API_BASE_URL } from "../config/constants";

export const createEgreso = async (egresoData) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/egresos`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify(egresoData),
    });

    if (!response.ok) {
      const contentType = response.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        const errorData = await response.json();
        throw new Error(errorData.mensaje || "Error al procesar la solicitud");
      } else {
        throw new Error("Error en la conexión con el servidor");
      }
    }

    return await response.json();
  } catch (error) {
    throw new Error(error.message || "Error al crear el egreso");
  }
};

export const getEgresos = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/egresos`);

    if (!response.ok) {
      const contentType = response.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        const errorData = await response.json();
        throw new Error(errorData.mensaje || "Error al obtener los egresos");
      } else {
        throw new Error("Error en la conexión con el servidor");
      }
    }

    return await response.json();
  } catch (error) {
    throw new Error(error.message || "Error al obtener los egresos");
  }
};

export const updateEgreso = async (id, egresoData) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/egresos/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify(egresoData),
    });

    if (!response.ok) {
      const contentType = response.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        const errorData = await response.json();
        throw new Error(errorData.mensaje || "Error al actualizar el egreso");
      } else {
        throw new Error("Error en la conexión con el servidor");
      }
    }

    return await response.json();
  } catch (error) {
    throw new Error(error.message || "Error al actualizar el egreso");
  }
};

```
</open_file>

<open_file>
src\services\ingresosService.js
```src\services\ingresosService.js
import { API_BASE_URL } from "../config/constants";

export const createIngreso = async (ingresoData) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/ingresos`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify(ingresoData),
    });

    if (!response.ok) {
      const contentType = response.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        const errorData = await response.json();
        throw new Error(errorData.mensaje || "Error al procesar la solicitud");
      } else {
        throw new Error("Error en la conexión con el servidor");
      }
    }

    return await response.json();
  } catch (error) {
    throw new Error(error.message || "Error al crear el ingreso");
  }
};

export const getIngresos = async () => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/ingresos`);

    if (!response.ok) {
      const contentType = response.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        const errorData = await response.json();
        throw new Error(errorData.mensaje || "Error al obtener los ingresos");
      } else {
        throw new Error("Error en la conexión con el servidor");
      }
    }

    return await response.json();
  } catch (error) {
    throw new Error(error.message || "Error al obtener los ingresos");
  }
};

export const updateIngreso = async (id, ingresoData) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/ingresos/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify(ingresoData),
    });

    if (!response.ok) {
      const contentType = response.headers.get("content-type");
      if (contentType && contentType.includes("application/json")) {
        const errorData = await response.json();
        throw new Error(errorData.mensaje || "Error al actualizar el ingreso");
      } else {
        throw new Error("Error en la conexión con el servidor");
      }
    }

    return await response.json();
  } catch (error) {
    throw new Error(error.message || "Error al actualizar el ingreso");
  }
};

```
</open_file>

<open_file>
src\services\listaMaestraService.js
```src\services\listaMaestraService.js
import { API_BASE_URL } from "../config/constants";

const API_URL = `${API_BASE_URL}/api/listas-maestras`;

export const getListasMaestras = async () => {
  const response = await fetch(API_URL);
  if (!response.ok) {
    throw new Error("Error al obtener listas maestras");
  }
  return response.json();
};

export const getListaMaestra = async (id) => {
  const response = await fetch(`${API_URL}/${id}`);
  if (!response.ok) {
    throw new Error("Error al obtener lista maestra");
  }
  return response.json();
};

export const createListaMaestra = async (data) => {
  const response = await fetch(API_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });
  if (!response.ok) {
    throw new Error("Error al crear lista maestra");
  }
  return response.json();
};

export const addItemToLista = async (listaId, itemData) => {
  try {
    const response = await fetch(`${API_URL}/${listaId}/items`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(itemData),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || "Error al agregar item a la lista");
    }

    return response.json();
  } catch (error) {
    console.error("Error en addItemToLista:", error);
    throw error;
  }
};

export const getListaPorSubcategoria = async (codigoSubcategoria) => {
  const response = await fetch(`${API_URL}/subcategoria/${codigoSubcategoria}`);
  if (!response.ok) {
    throw new Error("Error al obtener la lista maestra");
  }
  return response.json();
};

```
</open_file>

<open_file>
src\services\subcategoriaEgresosService.js
```src\services\subcategoriaEgresosService.js
import { API_BASE_URL, ENDPOINTS } from "../config/constants";

export const createSubcategoriaEgreso = async (subcategoriaData) => {
  const response = await fetch(
    `${API_BASE_URL}${ENDPOINTS.SUBCATEGORIAS_EGRESOS}`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(subcategoriaData),
    }
  );

  if (!response.ok) {
    const data = await response.json();
    throw new Error(data.mensaje || "Error al crear la subcategoría");
  }

  return response.json();
};

export const getSubcategoriasEgresos = async () => {
  const response = await fetch(
    `${API_BASE_URL}${ENDPOINTS.SUBCATEGORIAS_EGRESOS}`
  );

  if (!response.ok) {
    const contentType = response.headers.get("content-type");
    if (contentType && contentType.includes("application/json")) {
      const errorData = await response.json();
      throw new Error(
        errorData.mensaje || "Error al obtener las subcategorías"
      );
    } else {
      throw new Error("Error en la conexión con el servidor");
    }
  }

  return response.json();
};

```
</open_file>

<open_file>
src\services\subcategoriaIngresosService.js
```src\services\subcategoriaIngresosService.js
import { API_BASE_URL, ENDPOINTS } from "../config/constants";

const getSubcategoriasIngresos = async () => {
  try {
    const response = await fetch(
      `${API_BASE_URL}${ENDPOINTS.SUBCATEGORIAS_INGRESOS}`
    );
    if (!response.ok) {
      throw new Error("Error al obtener subcategorías");
    }
    return await response.json();
  } catch (error) {
    console.error("Error en getSubcategoriasIngresos:", error);
    throw error;
  }
};

const createSubcategoriaIngreso = async (subcategoria) => {
  try {
    console.log("Enviando al backend:", subcategoria);

    // Extraer solo los datos necesarios
    const datos =
      subcategoria.tipo === "subcategoria" ? subcategoria.datos : subcategoria;

    const response = await fetch(
      `${API_BASE_URL}${ENDPOINTS.SUBCATEGORIAS_INGRESOS}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(datos),
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.mensaje || "Error al crear la subcategoría");
    }

    return await response.json();
  } catch (error) {
    console.error("Error en createSubcategoriaIngreso:", error);
    throw error;
  }
};

const updateSubcategoriaIngreso = async (codigo, cambios) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}${ENDPOINTS.SUBCATEGORIAS_INGRESOS}/${codigo}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(cambios),
      }
    );

    if (!response.ok) {
      throw new Error("Error al actualizar la subcategoría");
    }

    return await response.json();
  } catch (error) {
    console.error("Error en updateSubcategoriaIngreso:", error);
    throw error;
  }
};

const actualizarItem = async (codigo, nombre) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}${ENDPOINTS.SUBCATEGORIAS_INGRESOS}/${codigo}`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ nombre }),
      }
    );

    if (!response.ok) {
      throw new Error("Error al actualizar el item");
    }

    return await response.json();
  } catch (error) {
    console.error("Error en actualizarItem:", error);
    throw error;
  }
};

const analizarEstructuraSubcategorias = async () => {
  try {
    return await getSubcategoriasIngresos();
  } catch (error) {
    console.error("Error al analizar estructura:", error);
    throw error;
  }
};

const sincronizarTodasLasSubcategorias = async () => {
  try {
    const response = await fetch(
      `${API_BASE_URL}${ENDPOINTS.SUBCATEGORIAS_INGRESOS}/sincronizar`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.mensaje || "Error al sincronizar");
    }

    return await response.json();
  } catch (error) {
    console.error("Error en sincronizarTodasLasSubcategorias:", error);
    throw error;
  }
};

const asignarListaMaestra = async (codigo, listaId) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}${ENDPOINTS.SUBCATEGORIAS_INGRESOS}/${codigo}/asignar-lista`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ listaId }),
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.mensaje || "Error al asignar la lista maestra");
    }

    return await response.json();
  } catch (error) {
    console.error("Error en asignarListaMaestra:", error);
    throw error;
  }
};

const convertirListaASubcategorias = async (codigo, listaId) => {
  try {
    const response = await fetch(
      `${API_BASE_URL}${ENDPOINTS.SUBCATEGORIAS_INGRESOS}/${codigo}/convertir-lista`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ listaId }),
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.mensaje || "Error al convertir la lista");
    }

    return await response.json();
  } catch (error) {
    console.error("Error en convertirListaASubcategorias:", error);
    throw error;
  }
};

export {
  getSubcategoriasIngresos,
  createSubcategoriaIngreso,
  updateSubcategoriaIngreso,
  actualizarItem,
  analizarEstructuraSubcategorias,
  sincronizarTodasLasSubcategorias,
  asignarListaMaestra,
  convertirListaASubcategorias,
};

```
</open_file>

<open_file>
src\styles\Footer.scss
```src\styles\Footer.scss
@use "variables" as var;
body {
  background-color: var.$color-fondo-estudio;
}

.footer-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.parrafo-footer {
  color: white;
  margin: 0px;
  text-align: center;
  font-weight: 500;
}

.parrafo-footer sup {
  vertical-align: baseline;
  position: relative;
  top: -0.4em; /* Ajusta este valor según necesites */
  font-size: 75%; /* Ajusta este valor según necesites */
  margin-left: -0.01em; /* Ajusta para reducir el espacio antes del sup */
  margin-right: -0.01em; /* Ajusta para reducir el espacio después del sup */
}

.img-footer {
  margin: 3px;
  padding: 1px;
  border-radius: 5px;
  width: 50px;
}

@media (max-width: 480px) {
  .img-footer {
    margin: 3px;
    padding: 1px;
    border-radius: 5px;
    width: 50px;
  }
}

```
</open_file>

<open_file>
src\styles\NavBar.scss
```src\styles\NavBar.scss
@use "./variables" as var;

* {
  padding: 0;
}

.navbar {
  padding: 1rem;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
}

.nav-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 1200px;
  margin: 0 auto;
}

.nav-logo {
  width: 40px;
  height: auto;
}

.nav-links {
  display: flex;
  gap: 1rem;
  align-items: center;
}

.nav-link {
  color: white;
  text-decoration: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  transition: all 0.3s ease;

  &:hover {
    background-color: var.$color-principal-estudio;
  }
}

.nav-item-1 {
  margin-left: 10px;
  margin-right: 10px;
}

.whatsapp-icon {
  width: 40px; /* o el tamaño que prefieras para tu icono */
}

.button-contacto {
  color: var.$color-principal-estudio; /* text-white */
  font-weight: bold; /* font-bold */
  padding: 0.2rem 0.3rem; /* py-2 px-4 */
  border-radius: 0.25rem; /* rounded */
  display: flex; /* flex */
  align-items: center; /* items-center */
  border: none;
  cursor: pointer;
}

.button-contacto:hover {
  color: #a2a9e2; /* hover:bg-red-700 */
}

.button-contacto-icon {
  height: 1.25rem; /* h-5 */
  width: 1.25rem; /* w-5 */
}

.button-volver {
  color: var.$color-principal-estudio; /* text-white */
  font-weight: bold; /* font-bold */
  padding: 0.2rem 0.3rem; /* py-2 px-4 */
  border-radius: 0.25rem; /* rounded */
  display: flex; /* flex */
  align-items: center; /* items-center */
  border: none;
  cursor: pointer;
  background-color: var.$color-fondo-estudio;
}

.button-volver:hover {
  color: #a2a9e2; /* hover:bg-red-700 */
}

.button-volver-icon {
  height: 1.25rem; /* h-5 */
  width: 1.25rem; /* w-5 */
}

.telefono {
  color: white;
  font-weight: 600;
  font-size: 1.1rem;
  margin-left: 10px;
}

.fecha-actual {
  margin: 5px;
  padding: 10px;
  font-size: 15px;
  color: white;
  font-weight: 600;
}

.logo-container {
  position: relative;
  width: 335px; /* Ajusta el tamaño según sea necesario */
  height: 70px; /* Ajusta el tamaño según sea necesario */
}

.logo-img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  transition: opacity 20s ease-in-out; /* Transición suave y lenta de 20 segundos */
}

.logo-img.show {
  opacity: 1;
}

/* ------------------ MEDIA QUERIES PARA RESPONSIVIDAD ------------------ */

/* Para pantallas menores a 768px (tablets) */
@media (max-width: 994px) {
  .navbar {
    padding: 10px;
    flex-wrap: nowrap; /* Asegura que los elementos no se rompan en varias líneas */
  }

  .whatsapp-icon {
    width: 30px;
  }

  .telefono {
    font-size: 1rem;
  }

  .logo-container {
    width: 250px;
    height: 55px;
  }

  .fecha-actual {
    display: none; /* Oculta la fecha en pantallas menores de 768px */
  }

  .nombre-usuario {
    font-size: 0.9rem;
  }
}

@media (max-width: 990px) {
  .navbar {
    padding: 5px;
    flex-wrap: nowrap; /* Asegura que los elementos no se rompan en varias líneas */
  }
  .button-login {
    /* Botón INICIO */
    display: none; /* Oculta los botones INICIO y VOLVER en pantallas menores de 480px */
  }
  .telefono {
    font-size: 0.9rem;
  }
}

@media (max-width: 500px) {
  .telefono {
    font-size: 0.8rem;
  }
}

@media (max-width: 450px) {
  .telefono {
    font-size: 0.7rem;
  }
}

@media (max-width: 768px) {
  .fecha-actual {
    display: none;
  }
}

@media (max-width: 576px) {
  .nombre-usuario {
    display: none;
  }
}

main {
  padding-top: 80px;
}

.usuario-logueado {
  display: flex;
  align-items: center;

  .icono-usuario {
    color: var.$color-principal-cliente;
    margin-right: 1px;
  }
}

.nombre-usuario {
  color: var.$color-principal-cliente;
  font-weight: 600;
  font-size: 1rem;
  margin: 0 3px;
  text-transform: uppercase;
}

```
</open_file>

<open_file>
src\styles\PaginaInicial.scss
```src\styles\PaginaInicial.scss
@use "variables" as var;

body {
  background-color: var.$color-fondo-estudio;
}
/* Elimina el subrayado de todos los enlaces */
a {
  text-decoration: none; /* Elimina el subrayado */
}

.pagina-inicial-container {
  display: flex; /* Flexbox para alinear elementos */
  align-items: center; /* Alinea verticalmente */
  justify-content: center; /* Centra horizontalmente */
  flex-wrap: wrap; /* Permite que los elementos se ajusten en caso de falta de espacio */
  text-align: center;
  margin: 20px 0; /* Espaciado vertical */
  background-color: var.$color-fondo-estudio;
}

.pagina-inicial-logo {
  width: 60px; /* Tamaño del primer logo */
  margin-right: 10px; /* Espacio entre los logos */
}

.pagina-inicial-logo-1 {
  width: 200px; /* Tamaño del segundo logo */
  margin-left: 10px; /* Espacio entre los logos */
  margin-top: 7px;
}

.pag-ini-titulo {
  font-size: 2.5rem;
  color: var.$color-principal-estudio; /* O cualquier color que desees */
  margin-top: 10px; /* Espaciado superior */
  margin-left: 30px;
  font-weight: 600;
}

.btn-ingresos,
.btn-gastos {
  display: flex; /* Flexbox para alinear icono y texto */
  align-items: center; /* Alinea icono y texto verticalmente */
  justify-content: flex-start; /* Icono y texto alineados al inicio */
  background-color: transparent; /* Fondo transparente */
  color: white;
  border: 2px solid; /* Borde visible */
  border-radius: 30px; /* Bordes redondeados */
  padding: 10px 15px;
  margin: 10px;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-ingresos {
  border-color: var.$color-principal-estudio; /* Verde para ingresos */
  background-color: black; /* Fondo suave */
  color: var.$color-principal-estudio; /* Color del texto */
  font-weight: 700;
}

.btn-ingresos:hover {
  background-color: var.$color-principal-estudio; /* Fondo más oscuro al pasar el cursor */
  color: white; /* Color del texto al pasar el cursor */
  border-color: rgb(167, 160, 160);
}

.btn-gastos {
  border-color: #40b5a6; /* Rojo para gastos */
  background-color: black; /* Fondo suave */
  color: #40b5a6; /* Color del texto */
  font-weight: 700;
}

.btn-gastos:hover {
  background-color: #40b5a6; /* Fondo más oscuro al pasar el cursor */
  color: white; /* Color del texto al pasar el cursor */
  border-color: rgb(167, 160, 160);
}

.btn-icon {
  margin-right: 10px; /* Espacio entre el icono y el texto */
  font-size: 1.5rem; /* Tamaño del icono */
  background-color: transparent; /* Fondo transparente */
}

.pagina-inicial {
  .dashboard-container {
    margin-top: 2px;
    padding: 0;

    &:not(:last-child) {
      margin-bottom: 0;
    }
  }
}

// Separador entre dashboards
.separator-line {
  height: 1px;
  background-color: rgba(255, 255, 255, 0.1);
  margin: 2px 0;
  width: 100%;
}

// Ajuste para el dashboard comparativo
.dashboard-container:last-child {
  .graficos-grid {
    margin-top: 2px;
  }

  .grafico-item {
    min-height: 400px;
  }
}

// Ajustar el espacio interno de los gráficos
.graficos-grid {
  gap: 2px;
  margin-bottom: 2px;
}

.grafico-header {
  padding: 2px 1rem;
}

```
</open_file>

<open_file>
src\styles\_variables.scss
```src\styles\_variables.scss
$color-fondo-estudio: #050014;

$color-principal-estudio: #3e499c;

$color-principal-cliente: #40b5a6;

$color-error: #cf2828;

```
</open_file>

<open_file>
src\utils\fechaActual.js
```src\utils\fechaActual.js
export function obtenerFechaActual() {
  const dias = [
    "Domingo",
    "Lunes",
    "Martes",
    "Miércoles",
    "Jueves",
    "Viernes",
    "Sábado",
  ];
  const meses = [
    "enero",
    "febrero",
    "marzo",
    "abril",
    "mayo",
    "junio",
    "julio",
    "agosto",
    "septiembre",
    "octubre",
    "noviembre",
    "diciembre",
  ];

  const fechaActual = new Date();
  const diaSemana = dias[fechaActual.getDay()];
  const diaMes = fechaActual.getDate();
  const mes = meses[fechaActual.getMonth()];
  const anio = fechaActual.getFullYear();

  return `${diaSemana}, ${diaMes} de ${mes} de ${anio}`;
}

```
</open_file>

<open_file>
vite.config.js
```vite.config.js
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    force: true,
  },
  server: {
    hmr: true,
  },
});

```
</open_file>

